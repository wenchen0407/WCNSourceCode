<nesc xmlns="http://www.tinyos.net/nesC">
  <components>
    <component qname="TestNetworkAppC" loc="9:TestNetworkAppC.nc">
      <configuration/>
    </component>
    <component qname="TestNetworkC" loc="11:TestNetworkC.nc">
      <module/>
    </component>
    <component qname="MainC" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/MainC.nc">
      <configuration/>
    </component>
    <component qname="PlatformC" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/mica/sim/PlatformC.nc">
      <documentation loc="1:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="1:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
      <documentation loc="10:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformC.nc">
        <short>&#10; The porttion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The porttion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="18:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc" safe="">
      <documentation loc="12:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/MotePlatformP.nc">
        <short>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.</short>
        <long>&#10; The micaZ portion of a mica-family initialisation that is&#10; mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
      <documentation loc="27:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="31(HplAtm128GeneralIOC.PortA):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:27">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:26">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:25">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="32(HplAtm128GeneralIOC.PortA.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="32(HplAtm128GeneralIOC.PortA.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="32(HplAtm128GeneralIOC.PortA.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="32(HplAtm128GeneralIOC.PortA.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="32(HplAtm128GeneralIOC.PortA.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="32(HplAtm128GeneralIOC.PortA.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="32(HplAtm128GeneralIOC.PortA.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="32(HplAtm128GeneralIOC.PortA.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="31(HplAtm128GeneralIOC.PortB):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:24">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:23">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:22">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="32(HplAtm128GeneralIOC.PortB.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="32(HplAtm128GeneralIOC.PortB.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="32(HplAtm128GeneralIOC.PortB.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="32(HplAtm128GeneralIOC.PortB.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="32(HplAtm128GeneralIOC.PortB.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="32(HplAtm128GeneralIOC.PortB.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="32(HplAtm128GeneralIOC.PortB.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="32(HplAtm128GeneralIOC.PortB.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="31(HplAtm128GeneralIOC.PortC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:21">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:20">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:19">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="32(HplAtm128GeneralIOC.PortC.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="32(HplAtm128GeneralIOC.PortC.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="32(HplAtm128GeneralIOC.PortC.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="32(HplAtm128GeneralIOC.PortC.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="32(HplAtm128GeneralIOC.PortC.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="32(HplAtm128GeneralIOC.PortC.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="32(HplAtm128GeneralIOC.PortC.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="32(HplAtm128GeneralIOC.PortC.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="31(HplAtm128GeneralIOC.PortD):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:18">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:17">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:16">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="32(HplAtm128GeneralIOC.PortD.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="32(HplAtm128GeneralIOC.PortD.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="32(HplAtm128GeneralIOC.PortD.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="32(HplAtm128GeneralIOC.PortD.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="32(HplAtm128GeneralIOC.PortD.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="32(HplAtm128GeneralIOC.PortD.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="32(HplAtm128GeneralIOC.PortD.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="32(HplAtm128GeneralIOC.PortD.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="31(HplAtm128GeneralIOC.PortE):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:3">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="32(HplAtm128GeneralIOC.PortE.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="32(HplAtm128GeneralIOC.PortE.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="32(HplAtm128GeneralIOC.PortE.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="32(HplAtm128GeneralIOC.PortE.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="32(HplAtm128GeneralIOC.PortE.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="32(HplAtm128GeneralIOC.PortE.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="32(HplAtm128GeneralIOC.PortE.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="32(HplAtm128GeneralIOC.PortE.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="31(HplAtm128GeneralIOC.PortF):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="32(HplAtm128GeneralIOC.PortF.Bit0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="32(HplAtm128GeneralIOC.PortF.Bit1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="32(HplAtm128GeneralIOC.PortF.Bit2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="32(HplAtm128GeneralIOC.PortF.Bit3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="32(HplAtm128GeneralIOC.PortF.Bit4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="32(HplAtm128GeneralIOC.PortF.Bit5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="32(HplAtm128GeneralIOC.PortF.Bit6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="32(HplAtm128GeneralIOC.PortF.Bit7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="33(HplAtm128GeneralIOC.F0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="33(HplAtm128GeneralIOC.F1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="33(HplAtm128GeneralIOC.F2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="33(HplAtm128GeneralIOC.F3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="33(HplAtm128GeneralIOC.F4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="33(HplAtm128GeneralIOC.F5):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="33(HplAtm128GeneralIOC.F6):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="33(HplAtm128GeneralIOC.F7):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="33(HplAtm128GeneralIOC.G0):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="33(HplAtm128GeneralIOC.G1):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="33(HplAtm128GeneralIOC.G2):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="33(HplAtm128GeneralIOC.G3):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="33(HplAtm128GeneralIOC.G4):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="10:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
      <documentation loc="3:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/mica/sim/MeasureClockC.nc">
        <short>&#10; Simulation version of MeasureClockC for the mica platform.</short>
        <long>&#10; Simulation version of MeasureClockC for the mica platform. See &#10; tos/platforms/mica/MeasureClockC.nc for more details.&#10;&#10; @author Phil Levis&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMainP" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMainP.nc">
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TinySchedulerC.nc">
        <short>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).</short>
        <long>&#10; TOSSIM-specific scheduler implementation, which models&#10; tasks as simulation events (in order to capture delay).&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SimSchedulerBasicP" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="SimMoteP" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <documentation loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/sim/CC2420.h">
        <short>&#10; Ideally, your receive history size should be equal to the number of&#10; RF neighbors your node will have&#10;</short>
      </documentation>
      <module/>
    </component>
    <component qname="CC2420CsmaP" loc="3:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <module/>
    </component>
    <component qname="ActiveMessageC" loc="34:../pure-tdma/sim/ActiveMessageC.nc">
      <documentation loc="25:../pure-tdma/sim/ActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AsyncAdapterC" loc="29:../pure-tdma/sim/AsyncAdapterC.nc">
      <documentation loc="23:../pure-tdma/sim/AsyncAdapterC.nc">
        <short>&#10; Converts &#60;tt>AsyncReceive&#60;/tt> and &#60;tt>AsyncSend&#60;/tt> interfaces to&#10; synchronous &#60;tt>Receive&#60;/tt> and &#60;tt>Send&#60;/tt> interfaces.</short>
        <long>&#10; Converts &#60;tt>AsyncReceive&#60;/tt> and &#60;tt>AsyncSend&#60;/tt> interfaces to&#10; synchronous &#60;tt>Receive&#60;/tt> and &#60;tt>Send&#60;/tt> interfaces.&#10;&#10; @author Greg Hackmann&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AsyncReceiveAdapterP" loc="29:../pure-tdma/sim/AsyncReceiveAdapterP.nc" safe="">
      <documentation loc="23:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
        <short>&#10; Converts an &#60;tt>AsyncReceive&#60;/tt> interface to a synchronous&#10; &#60;tt>Receive&#60;/tt> interface.</short>
        <long>&#10; Converts an &#60;tt>AsyncReceive&#60;/tt> interface to a synchronous&#10; &#60;tt>Receive&#60;/tt> interface.&#10;&#10; @author Greg Hackmann&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="AsyncSendAdapterP" loc="29:../pure-tdma/sim/AsyncSendAdapterP.nc" safe="">
      <documentation loc="23:../pure-tdma/sim/AsyncSendAdapterP.nc">
        <short>&#10; Converts an &#60;tt>AsyncSend&#60;/tt> interface to a synchronous&#10; &#60;tt>Send&#60;/tt> interface.</short>
        <long>&#10; Converts an &#60;tt>AsyncSend&#60;/tt> interface to a synchronous&#10; &#60;tt>Send&#60;/tt> interface.&#10;&#10; @author Greg Hackmann&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MacC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/MacC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/MacC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.2 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PureTDMASchedulerC" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.3 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PureTDMASchedulerP" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <module/>
    </component>
    <component qname="TDMASlotSenderC" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/TDMASlotSenderC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/TDMASlotSenderC.nc">
        <short>&#10; This component transmits packets in pure tdma slot&#10; It should solve the clock drift issues&#10; &#10; </short>
        <long>&#10; This component transmits packets in pure tdma slot&#10; It should solve the clock drift issues&#10; &#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:59:00 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender" loc="30(TDMASlotSenderC.TDMASlotSender):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.2 $&#10; @date $Date: 2008/06/27 20:27:22 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GenericSlotSenderC"/>
        <arguments>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="LedsC" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/LedsC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/LedsP.nc" safe="">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="1:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
        <short>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.</short>
        <long>                                                                     &#10;  IMPORTANT: READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.  By&#10;  downloading, copying, installing or using the software you agree to&#10;  this license.  If you do not agree to this license, do not download,&#10;  install, copy or use the software.&#10;&#10;  Copyright (c) 2004-2005 Crossbow Technology, Inc.&#10;  Copyright (c) 2002-2003 Intel Corporation.&#10;  Copyright (c) 2000-2003 The Regents of the University  of California.    &#10;  All rights reserved.&#10;&#10;  Permission to use, copy, modify, and distribute this software and its&#10;  documentation for any purpose, without fee, and without written&#10;  agreement is hereby granted, provided that the above copyright&#10;  notice, the (updated) modification history and the author appear in&#10;  all copies of this source code.&#10;&#10;  Permission is also granted to distribute this software under the&#10;  standard BSD license as contained in the TinyOS distribution.&#10;&#10;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS&#10;  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT&#10;  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A&#10;  PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE INTEL OR ITS&#10;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,&#10;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,&#10;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR&#10;  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF&#10;  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING&#10;  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS&#10;  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&#10;&#10;  @author Jason Hill, Philip Levis, Nelson Lee, David Gay&#10;  @author Alan Broad &#60;abroad@xbow.com>&#10;  @author Matt Miller &#60;mmiller@xbow.com>&#10;  @author Martin Turon &#60;mturon@xbow.com>&#10;&#10;  $Id$&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender.GenericSlotSenderP" loc="39(TDMASlotSenderC.TDMASlotSender.GenericSlotSenderP):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
        <short>      &#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V               &#10;       |********************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|            | END &#10;  &#10; </short>
        <long>      &#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V               &#10;       |********************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|            | END &#10;  &#10; @author Octav Chipara&#10; @version $Revision: 1.4 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="GenericSlotSenderP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender.Alarm32khz16C" loc="1(TDMASlotSenderC.TDMASlotSender.Alarm32khz16C):../pure-tdma/sim/Alarm32khz16C.nc">
      <instance number="0">
        <component-ref qname="Alarm32khz16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.AlarmMicro16C" loc="1(TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.AlarmMicro16C):../pure-tdma/sim/AlarmMicro16C.nc">
      <instance number="0">
        <component-ref qname="AlarmMicro16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.AlarmMicro16C.AlarmMicro16P" loc="1(TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.AlarmMicro16C.AlarmMicro16P):../pure-tdma/sim/AlarmMicro16P.nc">
      <instance number="0">
        <component-ref qname="AlarmMicro16P"/>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro16C" loc="1:../pure-tdma/sim/CounterMicro16C.nc">
      <configuration/>
    </component>
    <component qname="CounterMicro16P" loc="1:../pure-tdma/sim/CounterMicro16P.nc">
      <module/>
    </component>
    <component qname="TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.TransformAlarmC" loc="40(TDMASlotSenderC.TDMASlotSender.Alarm32khz16C.TransformAlarmC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz16C" loc="1:../pure-tdma/sim/Counter32khz16C.nc">
      <configuration/>
    </component>
    <component qname="Counter32khz16C.TransformCounterC" loc="43(Counter32khz16C.TransformCounterC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.2 $&#10; @date $Date: 2008/06/27 20:27:22 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="GenericSlotterP" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <documentation loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Bo Li&#10; @version $WCP 2.0 $&#10; @date $Date: 2015/08/28  $&#10; change to match super long superframe length&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C" loc="1(GenericSlotterC.Alarm32khz32C):../pure-tdma/sim/Alarm32khz32C.nc">
      <instance number="0">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.AlarmMicro16C" loc="1(GenericSlotterC.Alarm32khz32C.AlarmMicro16C):../pure-tdma/sim/AlarmMicro16C.nc">
      <instance number="1">
        <component-ref qname="AlarmMicro16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P" loc="1(GenericSlotterC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P):../pure-tdma/sim/AlarmMicro16P.nc">
      <instance number="1">
        <component-ref qname="AlarmMicro16P"/>
      </instance>
      <module/>
    </component>
    <component qname="GenericSlotterC.Alarm32khz32C.TransformAlarmC" loc="40(GenericSlotterC.Alarm32khz32C.TransformAlarmC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="1:../pure-tdma/sim/Counter32khz32C.nc">
      <configuration/>
    </component>
    <component qname="Counter32khz32C.TransformCounterC" loc="43(Counter32khz32C.TransformCounterC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SenderDispatcherC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:59:00 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SenderDispatcherP" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherP.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherP.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.3 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="DummyChannelMonitorC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/DummyChannelMonitorC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/DummyChannelMonitorC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.3 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BeaconSlotC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/BeaconSlotC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/BeaconSlotC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:59 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="BeaconSlotP" loc="39:../pure-tdma/sim/BeaconSlotP.nc">
      <documentation loc="23:../pure-tdma/sim/BeaconSlotP.nc">
        <short>&#10; This component handles time synchronization&#10;&#10; </short>
        <long>&#10; This component handles time synchronization&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:59 $&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PureTDMASchedulerC.Alarm32khz32C" loc="1(PureTDMASchedulerC.Alarm32khz32C):../pure-tdma/sim/Alarm32khz32C.nc">
      <instance number="1">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PureTDMASchedulerC.Alarm32khz32C.AlarmMicro16C" loc="1(PureTDMASchedulerC.Alarm32khz32C.AlarmMicro16C):../pure-tdma/sim/AlarmMicro16C.nc">
      <instance number="2">
        <component-ref qname="AlarmMicro16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="PureTDMASchedulerC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P" loc="1(PureTDMASchedulerC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P):../pure-tdma/sim/AlarmMicro16P.nc">
      <instance number="2">
        <component-ref qname="AlarmMicro16P"/>
      </instance>
      <module/>
    </component>
    <component qname="PureTDMASchedulerC.Alarm32khz32C.TransformAlarmC" loc="40(PureTDMASchedulerC.Alarm32khz32C.TransformAlarmC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC2420ControlC" loc="2:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlC.nc">
      <configuration/>
    </component>
    <component qname="CC2420ControlP" loc="1:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <module/>
    </component>
    <component qname="CpmModelC" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <module/>
    </component>
    <component qname="TossimPacketModelC" loc="52:../pure-tdma/sim/TossimPacketModelC.nc">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.h">
        <short>&#10;&#10; Configuration parameters for a CSMA link.</short>
        <long>&#10;&#10; Configuration parameters for a CSMA link.&#10;&#10; @author Philip Levis&#10; @date   Dec 10 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TossimComPrintfC" loc="11:../pure-tdma/sim/TossimComPrintfC.nc">
      <configuration/>
    </component>
    <component qname="TossimComPrintfP" loc="13:../pure-tdma/sim/TossimComPrintfP.nc">
      <module/>
    </component>
    <component qname="MacControlC" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/MacControlC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/MacControlC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:58 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SyncAdapterC" loc="1:../pure-tdma/sim/SyncAdapterC.nc">
      <configuration/>
    </component>
    <component qname="SyncReceiveAdapterP" loc="1:../pure-tdma/sim/SyncReceiveAdapterP.nc" safe="">
      <module/>
    </component>
    <component qname="SyncSendAdapterP" loc="1:../pure-tdma/sim/SyncSendAdapterP.nc" safe="">
      <module/>
    </component>
    <component qname="TossimActiveMessageC" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
        <short>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.</short>
        <long>&#10;&#10; The basic chip-independent TOSSIM Active Message layer for radio chips&#10; that do not have simulation support.&#10;&#10; @author Philip Levis&#10; @date December 2 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <documentation loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
        <short>&#10; Accessor methods for Active Messages.</short>
        <long>&#10; Accessor methods for Active Messages.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TestNetworkAppC.Sender" loc="39(TestNetworkAppC.Sender):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.Sender.AMQueueEntryP" loc="35(TestNetworkAppC.Sender.AMQueueEntryP):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="37(AMQueueP.AMQueueImplP):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestNetworkAppC.Receiver" loc="35(TestNetworkAppC.Receiver):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.AMReceiver" loc="35(TestNetworkAppC.AMReceiver):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.Alarm32khz32C" loc="1(TestNetworkAppC.Alarm32khz32C):../pure-tdma/sim/Alarm32khz32C.nc">
      <instance number="2">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.Alarm32khz32C.AlarmMicro16C" loc="1(TestNetworkAppC.Alarm32khz32C.AlarmMicro16C):../pure-tdma/sim/AlarmMicro16C.nc">
      <instance number="3">
        <component-ref qname="AlarmMicro16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P" loc="1(TestNetworkAppC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P):../pure-tdma/sim/AlarmMicro16P.nc">
      <instance number="3">
        <component-ref qname="AlarmMicro16P"/>
      </instance>
      <module/>
    </component>
    <component qname="TestNetworkAppC.Alarm32khz32C.TransformAlarmC" loc="40(TestNetworkAppC.Alarm32khz32C.TransformAlarmC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC" loc="32(TestNetworkAppC.SSTdmaSlotSenderC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Bo Li&#10; @version $Revision: 0.1 $&#10; @date $Date: 2013/09/23$&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SSTdmaSlotSenderC"/>
        <arguments>
          <value cst="I:32">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:120">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
          <value cst="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC.SSTdmaSlotSenderP" loc="40(TestNetworkAppC.SSTdmaSlotSenderC.SSTdmaSlotSenderP):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
        <short>&#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V            &#10;       |****************************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|                    | END &#10;                                              &#10;&#10; </short>
        <long>&#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V            &#10;       |****************************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|                    | END &#10;                                              &#10;&#10; @author Bo Li&#10; @version $Revision: 0.1 $&#10; @date $Date: 2013/09/23$&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SSTdmaSlotSenderP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C" loc="1(TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C):../pure-tdma/sim/Alarm32khz32C.nc">
      <instance number="3">
        <component-ref qname="Alarm32khz32C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.AlarmMicro16C" loc="1(TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.AlarmMicro16C):../pure-tdma/sim/AlarmMicro16C.nc">
      <instance number="4">
        <component-ref qname="AlarmMicro16C"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P" loc="1(TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.AlarmMicro16C.AlarmMicro16P):../pure-tdma/sim/AlarmMicro16P.nc">
      <instance number="4">
        <component-ref qname="AlarmMicro16P"/>
      </instance>
      <module/>
    </component>
    <component qname="TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.TransformAlarmC" loc="40(TestNetworkAppC.SSTdmaSlotSenderC.Alarm32khz32C.TransformAlarmC):/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TransformAlarmC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
            <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
          </type-tag>
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
            <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <value cst="I:5">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/RandomC.nc">
      <documentation loc="22:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="21:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc" abstract="">
      <documentation loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f06c17ab430" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f06c17ab7c0" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f06c17abb50" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f06c17aa020" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/sim/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GenericSlotSenderP" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc" abstract="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
        <short>      &#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V               &#10;       |********************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|            | END &#10;  &#10; </short>
        <long>      &#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V               &#10;       |********************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|            | END &#10;  &#10; @author Octav Chipara&#10; @version $Revision: 1.4 $&#10; @date $Date: 2011/12/21 17:56:26 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="offset" ref="0x7f06c1249b00" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
          <component-ref qname="GenericSlotSenderP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="backoff" ref="0x7f06c1249e70" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
          <component-ref qname="GenericSlotSenderP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="cca" ref="0x7f06c12461b0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
          <component-ref qname="GenericSlotSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="GenericSlotSenderC" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc" abstract="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
        <short>      &#10;&#10; </short>
        <long>      &#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.2 $&#10; @date $Date: 2008/06/27 20:27:22 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="offset" ref="0x7f06c1296060" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
          <component-ref qname="GenericSlotSenderC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="backoff" ref="0x7f06c12963d0" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
          <component-ref qname="GenericSlotSenderC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="cca" ref="0x7f06c12966e0" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderC.nc">
          <component-ref qname="GenericSlotSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="TransformCounterC" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f06c116d270" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f06c116d270"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f06c116da40" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f06c116da40"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f06c116de30" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f06c116de30"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f06c116c650" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f06c116c650"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f06c116ca20" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x7f06c116b290" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f06c116b290"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f06c171f710" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f06c171faa0" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f06c171fe30" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x7f06c171c1c0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz32C" loc="1:../pure-tdma/sim/Alarm32khz32C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueImplP" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x7f06c0bf0660" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmMicro16C" loc="1:../pure-tdma/sim/AlarmMicro16C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="SSTdmaSlotSenderP" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc" abstract="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
        <short>&#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V            &#10;       |****************************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|                    | END &#10;                                              &#10;&#10; </short>
        <long>&#10; The generic slot sender implements a generic slot as follows:&#10; &#10;      start&#10;       |&#10;       |           offset     initial backoff     send done      &#10;       |             |              |              |               &#10;       v             v              V              V            &#10;       |****************************************************************|&#10;       |---START-----|---OFFSET-----|----SENT------|                    | END &#10;                                              &#10;&#10; @author Bo Li&#10; @version $Revision: 0.1 $&#10; @date $Date: 2013/09/23$&#10;</long>
      </documentation>
      <parameters>
        <constant name="offset" ref="0x7f06c0b6cd80" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
          <component-ref qname="SSTdmaSlotSenderP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="backoff" ref="0x7f06c0b69110" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
          <component-ref qname="SSTdmaSlotSenderP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="checkLength" ref="0x7f06c0b694a0" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
          <component-ref qname="SSTdmaSlotSenderP"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x7f06c17bcd70" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x7f06c17b9110" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x7f06c17b9480" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="SSTdmaSlotSenderC" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc" abstract="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Bo Li&#10; @version $Revision: 0.1 $&#10; @date $Date: 2013/09/23$&#10;</long>
      </documentation>
      <parameters>
        <constant name="offset" ref="0x7f06c0b75e00" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
          <component-ref qname="SSTdmaSlotSenderC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="backoff" ref="0x7f06c0b721a0" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
          <component-ref qname="SSTdmaSlotSenderC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
        <constant name="checkLength" ref="0x7f06c0b72530" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderC.nc">
          <component-ref qname="SSTdmaSlotSenderC"/>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMReceiverC" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f06c0b88020" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSenderC" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x7f06c0c12da0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x7f06c0c0bb10" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="TransformAlarmC" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc" abstract="" safe="">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; TransformAlarmC decreases precision and/or widens an Alarm.</short>
        <long>&#10; TransformAlarmC decreases precision and/or widens an Alarm.  An already&#10; widened Counter component is used to help.&#10;&#10; &#60;p>See TEP102 for more details.&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Alarm.&#10; @param to_size_type The type for the width of the transformed Alarm.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Alarm.&#10; @param from_size_type The type for the width of the original Alarm.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x7f06c11afa30" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x7f06c11afa30"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x7f06c11ac290" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f06c11ac290"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x7f06c11ac680" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x7f06c11ac680"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x7f06c11ace60" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x7f06c11ace60"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x7f06c11ab260" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
          <component-ref qname="TransformAlarmC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Alarm32khz16C" loc="1:../pure-tdma/sim/Alarm32khz16C.nc" abstract="">
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AlarmMicro16P" loc="1:../pure-tdma/sim/AlarmMicro16P.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
  </components>
  <interfaces>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="CC2420Config" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
      <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <short>&#10; An HAL abstraction of the ChipCon CC2420 radio.</short>
        <long>&#10; An HAL abstraction of the ChipCon CC2420 radio. This abstraction&#10; deals specifically with radio configurations. All get() and set()&#10; commands are single-phase. After setting some values, a call to&#10; sync() is required for the changes to propagate to the cc2420&#10; hardware chip. This interface allows setting multiple parameters&#10; before calling sync().&#10;&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <function command="" provided="0" name="setAutoAck" ref="0x7f06c192e2f0" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="93:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync must be called for acknowledgement changes to take effect&#10; </short>
          <long>&#10; Sync must be called for acknowledgement changes to take effect&#10; @param enableAutoAck TRUE to enable auto acknowledgements&#10; @param hwAutoAck TRUE to default to hardware auto acks, FALSE to&#10;     default to software auto acknowledgements&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAutoAck" ref="0x7f06c192fcd0" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
          <variable name="hwAutoAck" ref="0x7f06c192e060" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAddressRecognitionEnabled" ref="0x7f06c1930c30" loc="86:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddressRecognition" ref="0x7f06c19302f0" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @param enableAddressRecognition TRUE to turn address recognition on&#10; @param useHwAddressRecognition TRUE to perform address recognition first&#10;     in hardware. This doesn't affect software address recognition. The&#10;     driver must sync with the chip after changing this value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enableAddressRecognition" ref="0x7f06c1931c20" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
          <variable name="useHwAddressRecognition" ref="0x7f06c1930060" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="syncDone" ref="0x7f06c1936d70" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f06c1936af0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAddressRecognitionDefault" ref="0x7f06c192f550" loc="91:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="88:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if address recognition is performed first in hardware.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setShortAddr" ref="0x7f06c19322a0" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f06c1932020" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setChannel" ref="0x7f06c1934020" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x7f06c1935c40" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isAutoAckEnabled" ref="0x7f06c192c540" loc="110:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="107:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if auto acks are enabled&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPanAddr" ref="0x7f06c1931420" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="address" ref="0x7f06c19311a0" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isHwAutoAckDefault" ref="0x7f06c192ebf0" loc="105:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="101:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; </short>
          <long>&#10; @return TRUE if hardware auto acks are the default, FALSE if software&#10;     acks are the default&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getShortAddr" ref="0x7f06c19347d0" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the short address of the radio.</short>
          <long>&#10; Change the short address of the radio.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="sync" ref="0x7f06c1936350" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Sync configuration changes with the radio hardware.</short>
          <long>&#10; Sync configuration changes with the radio hardware. This only&#10; applies to set commands below.&#10;&#10; @return SUCCESS if the request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x7f06c1935520" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the channel of the radio, between 11 and 26&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPanAddr" ref="0x7f06c1932a40" loc="70:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
        <documentation loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/CC2420Config.nc">
          <short>&#10; Change the PAN address of the radio.</short>
        </documentation>
        <interfacedef-ref qname="CC2420Config"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Slotter" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Slotter.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Slotter.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:58 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="slot" ref="0x7f06c150b350" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Slotter.nc">
        <interfacedef-ref qname="Slotter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="num" ref="0x7f06c150b0d0" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Slotter.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
      <documentation loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f06c194cab0" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f06c194c830" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f06c194a020" loc="117:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="111:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f06c194bd30" loc="117:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f06c1951db0" loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f06c194b350" loc="109:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
        <documentation loc="94:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioBackoff" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
      <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <short>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.</short>
        <long>&#10; Interface to request and specify backoff periods for messages&#10; &#10; We use a call back method for setting the backoff as opposed to &#10; events that return backoff values.  &#10; &#10; This is because of fan-out issues with multiple components wanting to&#10; affect backoffs for whatever they're interested in:&#10; If you signal out an *event* to request an initial backoff and&#10; several components happen to be listening, then those components&#10; would be required to return a backoff value.  We don't want that&#10; behavior.&#10; With this strategy, components can listen for the requests and then&#10; decide if they want to affect the behavior.  If the component wants to&#10; affect the behavior, it calls back using the setXYZBackoff(..) command.&#10; If several components call back, then the last component to get its &#10; word in has the final say. &#10;&#10; @author David Moss&#10;</long>
      </documentation>
      <function event="" provided="0" name="requestCca" ref="0x7f06c15f9350" loc="95:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="90:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on whether or not to use CCA on the outbound packet.</short>
          <long>&#10; Request for input on whether or not to use CCA on the outbound packet.&#10; Replies should come in the form of setCca(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15f90d0" loc="95:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestInitialBackoff" ref="0x7f06c15fb5a0" loc="81:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="76:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; </short>
          <long>  &#10; Request for input on the initial backoff&#10; Reply using setInitialBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15fb320" loc="81:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCongestionBackoff" ref="0x7f06c15fec30" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestCongestionBackoff event&#10; </short>
          <long>&#10; Must be called within a requestCongestionBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f06c15fe9b0" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInitialBackoff" ref="0x7f06c15fe110" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Must be called within a requestInitialBackoff event&#10; </short>
          <long>&#10; Must be called within a requestInitialBackoff event&#10; @param backoffTime the amount of time in some unspecified units to backoff&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="backoffTime" ref="0x7f06c1609e40" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCca" ref="0x7f06c15fc6b0" loc="73:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Enable CCA for the outbound packet.</short>
          <long>&#10; Enable CCA for the outbound packet.  Must be called within a requestCca&#10; event&#10; @param ccaOn TRUE to enable CCA, which is the default.&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="ccaOn" ref="0x7f06c15fc430" loc="73:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="requestCongestionBackoff" ref="0x7f06c15fa4c0" loc="88:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
        <documentation loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
          <short>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; </short>
          <long>&#10; Request for input on the congestion backoff&#10; Reply using setCongestionBackoff(..)&#10; @param msg pointer to the message being sent&#10;</long>
        </documentation>
        <interfacedef-ref qname="RadioBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15fa240" loc="88:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/RadioBackoff.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
      <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x7f06c194f6c0" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
        <documentation loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x7f06c1bf5610" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x7f06c1bf5e60" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
        <documentation loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacket" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="strength" ref="0x7f06c0c90490" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
        <interfacedef-ref qname="TossimPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="signed char" size="I:1" alignment="I:1">
            <typename><typedef-ref name="int8_t" ref="0x7f06c25ba8d0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c0c90210" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacketModelCCA" loc="38:../pure-tdma/sim/TossimPacketModelCCA.nc">
      <documentation loc="34:../pure-tdma/sim/TossimPacketModelCCA.nc">
        <short> &#10; Pass an enabling bit into TossimPacketModelC for enabling/disabling of CCA&#10;</short>
      </documentation>
      <function command="" provided="0" name="set_cca" ref="0x7f06c14ef770" loc="39:../pure-tdma/sim/TossimPacketModelCCA.nc">
        <interfacedef-ref qname="TossimPacketModelCCA"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="enable" ref="0x7f06c14ef4f0" loc="39:../pure-tdma/sim/TossimPacketModelCCA.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
      <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x7f06c15efab0" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15ef830" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x7f06c15eaba0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15ea920" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f06c15e6020" loc="115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="98:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15e8910" loc="115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c15e8c40" loc="115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f06c15e8020" loc="95:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x7f06c15eb050" loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
        <documentation loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15e9a70" loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c15e9da0" loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CcaControl" loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
        <short>&#10; Controls the radio's CCA and backoff policies.</short>
        <long>&#10; Controls the radio's CCA and backoff policies.&#10;&#10; @author Greg Hackmann&#10;</long>
      </documentation>
      <function event="" provided="0" name="getCongestionBackoff" ref="0x7f06c1537750" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
        <documentation loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
          <short>&#10; The congestion backoff time for a message must be selected.</short>
          <long>&#10; The congestion backoff time for a message must be selected.  If the upper&#10; layer has no need to change the backoff, then return&#10; &#60;tt>defaultBackoff&#60;/tt>.&#10;&#10; @param msg the message&#10; @param defaultBackoff the radio-default backoff length&#10; @return the congestion backoff length, in 32 Khz increments&#10;</long>
        </documentation>
        <interfacedef-ref qname="CcaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1537110" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="defaultBackoff" ref="0x7f06c15374c0" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="getInitialBackoff" ref="0x7f06c1538750" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
        <documentation loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
          <short>&#10; The initial backoff time for a message must be selected.</short>
          <long>&#10; The initial backoff time for a message must be selected.  If the upper&#10; layer has no need to change the backoff, then return&#10; &#60;tt>defaultBackoff&#60;/tt>.&#10;&#10; @param msg the message&#10; @param defaultBackoff the radio-default backoff length&#10; @return the initial backoff length, in 32 Khz increments&#10;</long>
        </documentation>
        <interfacedef-ref qname="CcaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1538110" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="defaultbackoff" ref="0x7f06c15384c0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="getCca" ref="0x7f06c1535650" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
        <documentation loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
          <short>&#10; Whether to perform CCA before sending a message must be determined.</short>
          <long>&#10; Whether to perform CCA before sending a message must be determined.  If&#10; the upper layer has no need to specify this, then return&#10; &#60;tt>defaultCca&#60;/tt>.&#10;&#10; @param msg the message&#10; @param defaultCca the radio-default CCA policy&#10; @return whether to perform CCA before sending the message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CcaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1535060" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="defaultCca" ref="0x7f06c15353c0" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/CcaControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f06c1945630" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x7f06c194dcb0" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x7f06c1945060" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1945390" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f06c193f020" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1940890" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1940bc0" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f06c1940020" loc="112:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="102:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f06c19439c0" loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1943740" loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f06c1941020" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
        <documentation loc="87:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1942900" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f06c1942c50" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="RadioPowerControl" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.3 $&#10; @date $Date: 2011/12/21 17:56:26 $ &#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x7f06c1533dc0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
        <interfacedef-ref qname="RadioPowerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f06c1533b40" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x7f06c1530020" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
        <interfacedef-ref qname="RadioPowerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x7f06c1531c40" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f06c1533460" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
        <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
          <short>&#10; Turn Power to the Radio On&#10;</short>
        </documentation>
        <interfacedef-ref qname="RadioPowerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f06c1531560" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
        <documentation loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/RadioPowerControl.nc">
          <short>&#10; Turn Power to the Radio Off&#10;</short>
        </documentation>
        <interfacedef-ref qname="RadioPowerControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
      <documentation loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision$ $Date$&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x7f06c1043930" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f06c1043930"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x7f06c103f270" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x7f06c103e020" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
        <documentation loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f06c1043930"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x7f06c103f9f0" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x7f06c103fd10" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x7f06c1043930"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimComPrintfWrite" loc="11:../pure-tdma/sim/TossimComPrintfWrite.nc">
      <function command="" provided="0" name="printfWrite" ref="0x7f06c14edad0" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
        <interfacedef-ref qname="TossimComPrintfWrite"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flow" ref="0x7f06c14f1aa0" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="slot" ref="0x7f06c14f1de0" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="source" ref="0x7f06c14ed150" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="node_id" ref="0x7f06c14ed4b0" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x7f06c14ed810" loc="12:../pure-tdma/sim/TossimComPrintfWrite.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x7f06c0b5a990" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x7f06c0b5a190" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
        <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f06c16085e0" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1608020" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1608350" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f06c1603bb0" loc="114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="104:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c16035b0" loc="114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c16038e0" loc="114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f06c1607d20" loc="101:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="91:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f06c1606900" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1606680" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f06c1604e00" loc="89:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
        <documentation loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1604820" loc="89:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f06c1604b70" loc="89:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x7f06c0b17660" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f06c0b17660"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x7f06c0b132a0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
        <documentation loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f06c0b17660"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x7f06c0b13020" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x7f06c0b17660"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f06c1939dd0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f06c1939dd0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f06c1929070" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x7f06c1925c50" loc="98:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="94:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x7f06c1928be0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x7f06c19252b0" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="79:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x7f06c1927c40" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          </variable>
          <variable name="dt" ref="0x7f06c1925020" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x7f06c1927420" loc="77:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="70:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f06c1924480" loc="105:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="100:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x7f06c1929bd0" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x7f06c1929950" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c1929070"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f06c1928420" loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
        <documentation loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resend" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Resend.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Resend.nc">
        <short>&#10; Resends the last message.</short>
        <long>&#10; Resends the last message.  If possible, this interface should wrap native&#10; hardware support.  Otherwise, it must be emulated using a one-packet buffer.&#10;&#10; @author Greg Hackmann&#10;</long>
      </documentation>
      <function command="" provided="0" name="resend" ref="0x7f06c152fd10" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Resend.nc">
        <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/Resend.nc">
          <short>&#10; Resends the last message.</short>
          <long>&#10; Resends the last message.&#10;&#10; @return whether the operation succeeded&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Init.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f06c18203e0" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Init.nc">
        <documentation loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC2420PacketBody" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
      <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <short>&#10; Internal interface for the CC2420 to get portions of a packet.</short>
        <long>&#10; Internal interface for the CC2420 to get portions of a packet.&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="getHeader" ref="0x7f06c15e29f0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <documentation loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_header_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x7f06c19dfe20"/>
              <typename><typedef-ref name="tossim_header_t" ref="0x7f06c19dd230"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15e2730" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getMetadata" ref="0x7f06c15e0550" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
        <documentation loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
          <short>&#10; </short>
          <long>&#10; @return pointer to the cc2420_metadata_t of the given message&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC2420PacketBody"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x7f06c19dc020"/>
              <typename><typedef-ref name="tossim_metadata_t" ref="0x7f06c19da180"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15e0290" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/interfaces/sim/CC2420PacketBody.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f06c193a0d0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
        <documentation loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
              <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:8" alignment="I:8">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c193b730" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f06c193ba80" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c193bdb0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ChannelMonitor" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
      <documentation loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues&#10;</long>
      </documentation>
      <function command="" provided="0" name="setCheckLength" ref="0x7f06c19552a0" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; Set the length of CCA checks.</short>
          <long>&#10; Set the length of CCA checks.&#10;&#10; @param length the length of CCA checks, in 32 KHz increments&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="length" ref="0x7f06c1955020" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="error" ref="0x7f06c1957860" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; signal that checking the channel failed&#10;</short>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="check" ref="0x7f06c1958270" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; Check the channel to see if it is free or busy&#10;</short>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="busy" ref="0x7f06c1957120" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; signal that the channel is busy&#10;</short>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="free" ref="0x7f06c19589b0" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; signal that the channel is free&#10;</short>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCheckLength" ref="0x7f06c1955ae0" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
        <documentation loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/ChannelMonitor.nc">
          <short>&#10; Get the length of CCA checks.</short>
          <long>&#10; Get the length of CCA checks.&#10;&#10; @return the length of CCA checks, in 32 KHz increments&#10;</long>
        </documentation>
        <interfacedef-ref qname="ChannelMonitor"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimComPrintfRead" loc="11:../pure-tdma/sim/TossimComPrintfRead.nc">
      <function command="" provided="0" name="printfRead" ref="0x7f06c0dd90f0" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
        <interfacedef-ref qname="TossimComPrintfRead"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-pointer>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flow" ref="0x7f06c0dda020" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="slot" ref="0x7f06c0dda360" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="source" ref="0x7f06c0dda6b0" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="node_id" ref="0x7f06c0ddaa10" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x7f06c0ddad70" loc="12:../pure-tdma/sim/TossimComPrintfRead.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SimMote" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <short>&#10; TOSSIM-specific interface to access a mote's state.</short>
        <long>&#10; TOSSIM-specific interface to access a mote's state. TinyOS programs&#10; should never use this interface.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="setEuid" ref="0x7f06c167a110" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="euid" ref="0x7f06c167be50" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getVariableInfo" ref="0x7f06c16770d0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
            <type-pointer size="I:8" alignment="I:8">
              <type-pointer size="I:8" alignment="I:8">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
            <type-pointer size="I:8" alignment="I:8">
              <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="name" ref="0x7f06c1679740" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </variable>
          <variable name="ptr" ref="0x7f06c1679aa0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-pointer size="I:8" alignment="I:8">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-pointer>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1679e00" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
                <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOff" ref="0x7f06c1677e80" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="turnOn" ref="0x7f06c1677780" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEuid" ref="0x7f06c167b740" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTcpMsg" ref="0x7f06c1675850" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRadioChannel" ref="0x7f06c16768d0" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newRadioChannel" ref="0x7f06c1676650" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setTcpMsg" ref="0x7f06c1672910" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="root" ref="0x7f06c1673020" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="root_time" ref="0x7f06c1673340" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="res1" ref="0x7f06c1673630" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="res2" ref="0x7f06c1673920" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="res3" ref="0x7f06c1673c10" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="delay1" ref="0x7f06c1672020" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="delay2" ref="0x7f06c1672320" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="delay3" ref="0x7f06c1672620" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x7f06c1679020" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRadioChannel" ref="0x7f06c16750e0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getStartTime" ref="0x7f06c167a8c0" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMote.nc">
        <interfacedef-ref qname="SimMote"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x7f06c11f58f0" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x7f06c11f58f0"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x7f06c11f5b30" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c11f5b30"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x7f06c11f2480" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x7f06c11f5b30"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x7f06c11f1590" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x7f06c11f2d00" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x7f06c11f1cf0" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
        <documentation loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="27:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x7f06c1808270" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x7f06c18089a0" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x7f06c1809420" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x7f06c1806820" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f06c1809b20" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x7f06c18060e0" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f06c180a630" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x7f06c180ad00" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncSend" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <short>&#10; Provides packet sending commands in an asynchronous fashion.</short>
        <long>&#10; Provides packet sending commands in an asynchronous fashion.&#10;&#10; @author Greg Hackmann&#10; @see AMSend&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f06c1907c50" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
          <short>&#10; Sends a packet over the radio, in split-control fashion.</short>
          <long>&#10; Sends a packet over the radio, in split-control fashion.&#10;&#10; @param 'message_t * ONE msg' the packet to send&#10; @param len the packet's length&#10; @return &#60;tt>SUCCESS&#60;/tt> if the packet was buffered;&#10; &#60;tt>EOFF&#60;/tt> if the radio is off; or &#60;tt>FAIL&#60;/tt> if the request could&#10; not otherwise be completed&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1907690" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c19079c0" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x7f06c1900020" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <documentation loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
          <short>&#10; Gets the packet payload.</short>
          <long>&#10; Gets the packet payload.&#10;&#10; @param 'message_t * ONE msg' the packet&#10; @return 'void * COUNT_NOK(len)' the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c19028e0" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1902c10" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x7f06c19020e0" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <documentation loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
          <short>&#10; Gets the maximum packet payload length.</short>
          <long>&#10; Gets the maximum packet payload length.&#10;&#10; @return the maximum packet payload length, in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f06c19032a0" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <documentation loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
          <short>&#10; Attempts to cancel a packet transmission.</short>
          <long>&#10; Attempts to cancel a packet transmission.&#10;&#10; @param 'message_t * ONE msg' the packet to cancel&#10; @return whether the cancellation succeeded&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1903020" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f06c1905120" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
        <documentation loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
          <short>&#10; The packet sending operation has completed.</short>
          <long>&#10; The packet sending operation has completed.&#10;&#10; @param 'message_t * ONE msg' the packet that has been completely processed&#10; @param error &#60;tt>SUCCESS&#60;/tt> if the packet was successfully&#10; sent over the radio, or &#60;tt>FAIL&#60;/tt> otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1904ac0" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f06c1904e10" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
      <documentation loc="22:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x7f06c14f9530" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x7f06c14f9ce0" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x7f06c14f84e0" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x7f06c14f7490" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x7f06c14f6bd0" loc="89:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x7f06c14f4420" loc="106:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x7f06c14f8c70" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x7f06c14f3020" loc="123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="109:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x7f06c14f4d10" loc="123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x7f06c14fcd60" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x7f06c14f7c70" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="75:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x7f06c14f6420" loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
        <documentation loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x7f06c190d630" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c190d3b0" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x7f06c190c810" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c190c590" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x7f06c1909980" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1909700" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncReceive" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
        <short>&#10; Provides packet reception events in an asynchronous fashion.</short>
        <long>&#10; Provides packet reception events in an asynchronous fashion.&#10;&#10; @author Greg Hackmann&#10; @see Receive&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x7f06c1574bb0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
        <documentation loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
          <short>&#10; A packet was received over the radio.</short>
          <long>&#10; A packet was received over the radio.  After it is processed,&#10; &#60;tt>updateBuffer&#60;/tt> should be called.&#10;&#10; @param 'message_t * ONE msg' the packet that was received&#10; @param 'void * COUNT(len) payload' the packet's payload&#10; @param len the packet's length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:8" alignment="I:8">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1574290" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x7f06c15745e0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c1574910" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="updateBuffer" ref="0x7f06c15732e0" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
        <documentation loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
          <short>&#10; Provides a new message buffer to the radio stack.</short>
          <long>&#10; Provides a new message buffer to the radio stack.&#10; This should be called (only) after each packet is handled, since&#10; the radio stack may do additional radio-specific event handling&#10; here.&#10;&#10; @param 'message_t * ONE msg' the new message buffer to provide to the radio stack&#10; (possibly the same one passed up from the &#60;tt>receive&#60;/tt> event)&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncReceive"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c1573060" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/AsyncReceive.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f06c150f570" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f06c150fdc0" loc="84:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="76:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GainRadioModel" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="putOnAirTo" ref="0x7f06c0f5f3f0" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
            </type-int>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dest" ref="0x7f06c0f64b00" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x7f06c0f60020" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="ack" ref="0x7f06c0f60350" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
            </type-int>
          </variable>
          <variable name="endTime" ref="0x7f06c0f606f0" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="long long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
            </type-int>
          </variable>
          <variable name="gain" ref="0x7f06c0f60a00" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
          <variable name="reverseGain" ref="0x7f06c0f60d50" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
          <variable name="channel_id" ref="0x7f06c0f5f110" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x7f06c0f5c790" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c0f5c510" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearChannel" ref="0x7f06c0f5d4a0" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClearValue" ref="0x7f06c0f5fd10" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="value" ref="0x7f06c0f5fa90" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-float cname="double" size="I:8" alignment="I:8"></type-float>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="acked" ref="0x7f06c0f5ddf0" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c0f5db70" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x7f06c0f5b2a0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
        <interfacedef-ref qname="GainRadioModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c0f5b020" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/GainRadioModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="FrameConfiguration" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
        <short>&#10; </short>
        <long>&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:57 $&#10;&#10; This interface will be implemented by the different TDMA protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="setFrameLength" ref="0x7f06c1520790" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="numSlots" ref="0x7f06c1520510" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSlotLength" ref="0x7f06c1521600" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="slotTimeBms" ref="0x7f06c1521380" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
            <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
              <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlotLength" ref="0x7f06c1521d60" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getFrameLength" ref="0x7f06c151f020" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/FrameConfiguration.nc">
        <interfacedef-ref qname="FrameConfiguration"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TossimPacketModel" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x7f06c15f5020" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="node" ref="0x7f06c15f6570" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </variable>
          <variable name="msg" ref="0x7f06c15f68f0" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x7f06c15f6c20" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receive" ref="0x7f06c15f25f0" loc="79:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Signal that a packet was received.</short>
          <long>&#10; Signal that a packet was received. Note that there is no buffer&#10; swap: a component using this interface must copy out the message&#10; if it needs it.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15f2370" loc="79:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x7f06c15f5c00" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15f5980" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x7f06c15f3b20" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <documentation loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15f3540" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x7f06c15f3890" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="shouldAck" ref="0x7f06c15f10b0" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
        <interfacedef-ref qname="TossimPacketModel"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x7f06c15f2de0" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimPacketModel.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="50:../pure-tdma/sim/AMPacket.nc">
      <documentation loc="31:../pure-tdma/sim/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x7f06c1913840" loc="166:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="153:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f06c19e07c0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c19135c0" loc="166:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x7f06c191d440" loc="77:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="69:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c191d1c0" loc="77:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x7f06c191f8a0" loc="57:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="52:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x7f06c191e390" loc="67:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="59:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
            <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c191e110" loc="67:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x7f06c1919dc0" loc="110:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="94:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c19197e0" loc="110:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f06c1919b30" loc="110:../pure-tdma/sim/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x7f06c191b880" loc="92:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="79:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c191b2a0" loc="92:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x7f06c191b5f0" loc="92:../pure-tdma/sim/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
              <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x7f06c19162e0" loc="136:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="127:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c1916060" loc="136:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x7f06c1914680" loc="151:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="138:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c19140d0" loc="151:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x7f06c19143f0" loc="151:../pure-tdma/sim/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x7f06c19170b0" loc="125:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="112:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c1918e00" loc="125:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x7f06c1911d00" loc="176:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="168:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f06c19e07c0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x7f06c1911720" loc="176:../pure-tdma/sim/AMPacket.nc">
            <type-pointer size="I:8" alignment="I:8">
              <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
                <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x7f06c1911a70" loc="176:../pure-tdma/sim/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x7f06c19e07c0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x7f06c190fb50" loc="184:../pure-tdma/sim/AMPacket.nc">
        <documentation loc="178:../pure-tdma/sim/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x7f06c19e07c0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
      <documentation loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x7f06c1950c90" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x7f06c19484e0" loc="84:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
        <documentation loc="76:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
      <documentation loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x7f06c2041510" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x7f06c200b4c0" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x7f06c2041c80" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
        <documentation loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SlotterControl" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author Octav Chipara&#10; @version $Revision: 1.1 $&#10; @date $Date: 2007/11/06 23:58:58 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="stop" ref="0x7f06c1506020" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getSlot" ref="0x7f06c15067a0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="synchronize" ref="0x7f06c150a8e0" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="toSlot" ref="0x7f06c150a660" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSynchornized" ref="0x7f06c1509070" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x7f06c15097e0" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemaining" ref="0x7f06c15077b0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getNow" ref="0x7f06c1507020" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/interfaces/SlotterControl.nc">
        <interfacedef-ref qname="SlotterControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
            <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
    <enum loc="73:/usr/include/bits/confname.h" ref="0x7f06c0da7bd0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="bnd" loc="9:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c3110" defined="" size="I:16" alignment="I:8">
      <field name="lo" ref="0x7f06c25c35a0" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0x7f06c25c3650" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <union loc="132:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2007080" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x7f06c2007290" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c2007340" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <struct loc="117:/usr/include/bits/pthreadtypes.h" ref="0x7f06c200a530" defined="" size="I:48" alignment="I:8">
      <field name="__lock" ref="0x7f06c200a740" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__futex" ref="0x7f06c200a7f0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__total_seq" ref="0x7f06c200a8a0" bit-offset="I:64" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__wakeup_seq" ref="0x7f06c200a950" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__woken_seq" ref="0x7f06c200aa00" bit-offset="I:192" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__mutex" ref="0x7f06c200aab0" bit-offset="I:256" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__nwaiters" ref="0x7f06c200ab60" bit-offset="I:320" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__broadcast_seq" ref="0x7f06c200ac10" bit-offset="I:352" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c1837140" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="129:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182a0a0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="144:/usr/include/bits/types.h" ref="0x7f06c203ad30" defined="" size="I:8" alignment="I:4">
      <field name="__val" ref="0x7f06c203af40" bit-offset="I:0" size="I:8">
        <type-array elements="I:2" size="I:8" alignment="I:4">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-array>
      </field>
    </struct>
    <struct name="itimerspec" loc="161:/usr/include/time.h" ref="0x7f06c1beb8f0" defined="" size="I:32" alignment="I:8">
      <field name="it_interval" ref="0x7f06c1be9020" bit-offset="I:0" size="I:16">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="timespec" ref="0x7f06c2021020"/></type-tag>
      </field>
      <field name="it_value" ref="0x7f06c1be90d0" bit-offset="I:128" size="I:16">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="timespec" ref="0x7f06c2021020"/></type-tag>
      </field>
    </struct>
    <nx_struct name="tossim_metadata" loc="19:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7f06c19dc020" defined="" size="I:6" alignment="I:1">
      <field name="strength" ref="0x7f06c19dcca0" bit-offset="I:0" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
          <typename><typedef-ref name="nx_int8_t" ref="0x7f06c20bb2d0"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x7f06c19dcd50" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x7f06c19dce00" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="time" ref="0x7f06c19dceb0" bit-offset="I:24" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="destroyable" ref="0x7f06c19da020" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="gain_entry" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h" ref="0x7f06c1b45530" defined="" size="I:32" alignment="I:8">
      <field name="mote" ref="0x7f06c1b45ed0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="gain" ref="0x7f06c1b43020" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="channel" ref="0x7f06c1b430d0" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="next" ref="0x7f06c1b43180" bit-offset="I:192" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:32" alignment="I:8"><struct-ref name="gain_entry" ref="0x7f06c1b45530"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <struct name="sim_gain_noise" loc="3:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c" ref="0x7f06c1b36b00" defined="" size="I:16" alignment="I:8">
      <field name="mean" ref="0x7f06c1b34100" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="range" ref="0x7f06c1b341b0" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <attribute name="deputy_scope"  loc="NONE" ref="0x7f06c25caa20" size="V:" alignment="V:">
    </attribute>
    <struct name="timeval" loc="75:/usr/include/bits/time.h" ref="0x7f06c2021970" defined="" size="I:16" alignment="I:8">
      <field name="tv_sec" ref="0x7f06c2020020" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__time_t" ref="0x7f06c2037450"/></typename>
        </type-int>
      </field>
      <field name="tv_usec" ref="0x7f06c20200d0" bit-offset="I:64" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__suseconds_t" ref="0x7f06c2037c20"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="nonnull" loc="8:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c4650" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0x7f06c25c4ac0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="number"  loc="NONE" ref="0x7f06c25cb020" size="V:" alignment="V:">
    </attribute>
    <struct loc="85:/usr/include/bits/waitstatus.h" ref="0x7f06c205f1d0" defined="" size="I:4" alignment="I:4">
      <field name="__w_stopval" ref="0x7f06c205f3e0" bit-offset="I:0" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_stopsig" ref="0x7f06c205f490" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="node" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.c" ref="0x7f06c1c6fd40" defined="" size="I:16" alignment="I:8">
      <field name="data" ref="0x7f06c1c6e380" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="key" ref="0x7f06c1c6e430" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <union loc="206:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2000440" defined="" size="I:32" alignment="I:8">
      <field name="__size" ref="0x7f06c2000a50" bit-offset="I:0" size="I:32">
        <type-array elements="I:32" size="I:32" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c2000b00" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <nx_struct name="serial_packet" loc="120:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d2a90" defined="" size="I:7" alignment="I:1">
      <field name="header" ref="0x7f06c19d1200" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7f06c19d4640"/>
          <typename><typedef-ref name="serial_header_t" ref="0x7f06c19d2730"/></typename>
        </type-tag>
      </field>
      <field name="data" ref="0x7f06c19d12b0" bit-offset="I:56" size="I:0">
        <type-array elements="I:0" size="I:0" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <struct loc="22:/usr/include/_G_config.h" ref="0x7f06c1dbcb80" defined="" size="I:16" alignment="I:8">
      <field name="__pos" ref="0x7f06c1dbcd90" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off_t" ref="0x7f06c203a090"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0x7f06c1dbce40" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c1dbc020"/>
          <typename><typedef-ref name="__mbstate_t" ref="0x7f06c1dbc440"/></typename>
        </type-tag>
      </field>
    </struct>
    <enum loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7f06c1cdd770" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="integer"  loc="NONE" ref="0x7f06c25cecf0" size="V:" alignment="V:">
    </attribute>
    <struct loc="279:/usr/include/inttypes.h" ref="0x7f06c2241900" defined="" size="I:16" alignment="I:8">
      <field name="quot" ref="0x7f06c2241b10" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x7f06c2241bc0" bit-offset="I:64" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <attribute name="exactlyonce" loc="91:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7f06c1ceb720" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="14:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h" ref="0x7f06c19e0df0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="191:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2002380" defined="" size="I:8" alignment="I:8">
      <field name="__size" ref="0x7f06c2002590" bit-offset="I:0" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c2002640" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <union name="message_footer" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7f06c19d0e90" defined="" size="I:2" alignment="I:1">
      <field name="tossim" ref="0x7f06c19ce3d0" bit-offset="I:0" size="I:2">
        <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x7f06c19dd590"/>
          <typename><typedef-ref name="tossim_footer_t" ref="0x7f06c19ddbb0"/></typename>
        </type-tag>
      </field>
    </union>
    <attribute name="combine"  loc="NONE" ref="0x7f06c25ca340" size="V:" alignment="V:">
      <field name="fn" ref="0x7f06c25ca550" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <struct name="drand48_data" loc="418:/usr/include/stdlib.h" ref="0x7f06c1fe7c50" defined="" size="I:24" alignment="I:8">
      <field name="__x" ref="0x7f06c1fe6af0" bit-offset="I:0" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__old_x" ref="0x7f06c1fe6ba0" bit-offset="I:48" size="I:6">
        <type-array elements="I:3" size="I:6" alignment="I:2">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
        </type-array>
      </field>
      <field name="__c" ref="0x7f06c1fe6c50" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__init" ref="0x7f06c1fe6d00" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="__a" ref="0x7f06c1fe6db0" bit-offset="I:128" size="I:8">
        <type-int cname="unsigned long long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct loc="83:/usr/include/wchar.h" ref="0x7f06c1dbc020" defined="" size="I:8" alignment="I:4">
      <field name="__count" ref="0x7f06c1dbc230" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__value" ref="0x7f06c1dbc2e0" bit-offset="I:32" size="I:4">
        <type-tag size="I:4" alignment="I:4"><union-ref ref="0x7f06c1dbd9a0"/></type-tag>
      </field>
    </struct>
    <struct name="__locale_struct" loc="28:/usr/include/xlocale.h" ref="0x7f06c20995f0" defined="" size="I:232" alignment="I:8">
      <field name="__locales" ref="0x7f06c2098a50" bit-offset="I:0" size="I:104">
        <type-array elements="I:13" size="I:104" alignment="I:8">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="V:" alignment="V:"><struct-ref name="__locale_data" ref="0x7f06c2099890"/></type-tag>
          </type-pointer>
        </type-array>
      </field>
      <field name="__ctype_b" ref="0x7f06c2098b00" bit-offset="I:832" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-qualified const="">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_tolower" ref="0x7f06c2098bb0" bit-offset="I:896" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__ctype_toupper" ref="0x7f06c2098c60" bit-offset="I:960" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-qualified const="">
            <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="__names" ref="0x7f06c2098d10" bit-offset="I:1024" size="I:104">
        <type-array elements="I:13" size="I:104" alignment="I:8">
          <type-pointer size="I:8" alignment="I:8">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
        </type-array>
      </field>
    </struct>
    <union name="message_metadata" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7f06c19ce8b0" defined="" size="I:6" alignment="I:1">
      <field name="tossim" ref="0x7f06c19cedd0" bit-offset="I:0" size="I:6">
        <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x7f06c19dc020"/>
          <typename><typedef-ref name="tossim_metadata_t" ref="0x7f06c19da180"/></typename>
        </type-tag>
      </field>
    </union>
    <struct name="lqi_dist" loc="4:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h" ref="0x7f06c1013920" defined="" size="I:16" alignment="I:8">
      <field name="lqi" ref="0x7f06c1013ed0" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="cdf" ref="0x7f06c1010020" bit-offset="I:64" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <nx_struct name="serial_header" loc="112:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d4640" defined="" size="I:7" alignment="I:1">
      <field name="dest" ref="0x7f06c19d2310" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7f06c19d23c0" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x7f06c19d2470" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x7f06c19d2520" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x7f06c19e3ad0"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x7f06c19d25d0" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x7f06c19e35b0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <union name="message_header" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h" ref="0x7f06c19d0200" defined="" size="I:8" alignment="I:1">
      <field name="tossim" ref="0x7f06c19d0920" bit-offset="I:0" size="I:8">
        <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x7f06c19dfe20"/>
          <typename><typedef-ref name="tossim_header_t" ref="0x7f06c19dd230"/></typename>
        </type-tag>
      </field>
      <field name="serial" ref="0x7f06c19d09d0" bit-offset="I:0" size="I:7">
        <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7f06c19d4640"/>
          <typename><typedef-ref name="serial_header_t" ref="0x7f06c19d2730"/></typename>
        </type-tag>
      </field>
    </union>
    <struct name="timespec" loc="120:/usr/include/time.h" ref="0x7f06c2021020" defined="" size="I:16" alignment="I:8">
      <field name="tv_sec" ref="0x7f06c2021600" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__time_t" ref="0x7f06c2037450"/></typename>
        </type-int>
      </field>
      <field name="tv_nsec" ref="0x7f06c20216b0" bit-offset="I:64" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <attribute name="count" loc="11:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c1890" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0x7f06c25c1bd0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="__pthread_internal_list" loc="61:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2011560" defined="" size="I:16" alignment="I:8">
      <field name="__prev" ref="0x7f06c2011e60" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:16" alignment="I:8"><struct-ref name="__pthread_internal_list" ref="0x7f06c2011560"/></type-tag>
        </type-pointer>
      </field>
      <field name="__next" ref="0x7f06c2011f10" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:16" alignment="I:8"><struct-ref name="__pthread_internal_list" ref="0x7f06c2011560"/></type-tag>
        </type-pointer>
      </field>
    </struct>
    <struct loc="27:/usr/include/_G_config.h" ref="0x7f06c1dba740" defined="" size="I:16" alignment="I:8">
      <field name="__pos" ref="0x7f06c1dba950" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0x7f06c203a450"/></typename>
        </type-int>
      </field>
      <field name="__state" ref="0x7f06c1dbaa00" bit-offset="I:64" size="I:8">
        <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c1dbc020"/>
          <typename><typedef-ref name="__mbstate_t" ref="0x7f06c1dbc440"/></typename>
        </type-tag>
      </field>
    </struct>
    <enum loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h" ref="0x7f06c1827760" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="bnd_nok" loc="10:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c3ca0" defined="" size="I:16" alignment="I:8">
      <field name="lo" ref="0x7f06c25c11a0" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="hi" ref="0x7f06c25c1250" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
    </attribute>
    <struct name="timezone" loc="57:/usr/include/sys/time.h" ref="0x7f06c1c0c9f0" defined="" size="I:8" alignment="I:4">
      <field name="tz_minuteswest" ref="0x7f06c1c0b020" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tz_dsttime" ref="0x7f06c1c0b0d0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <union name="wait" loc="67:/usr/include/bits/waitstatus.h" ref="0x7f06c20633d0" defined="" size="I:4" alignment="I:4">
      <field name="w_status" ref="0x7f06c205f7c0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wait_terminated" ref="0x7f06c205f870" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c20602d0"/></type-tag>
      </field>
      <field name="__wait_stopped" ref="0x7f06c205f920" bit-offset="I:0" size="I:4">
        <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c205f1d0"/></type-tag>
      </field>
    </union>
    <enum loc="48:/usr/include/ctype.h" ref="0x7f06c1dee080" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="68:/usr/include/stdlib.h" ref="0x7f06c205d080" defined="" size="I:8" alignment="I:8">
      <field name="__uptr" ref="0x7f06c205d290" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:4" alignment="I:4"><union-ref name="wait" ref="0x7f06c20633d0"/></type-tag>
        </type-pointer>
      </field>
      <field name="__iptr" ref="0x7f06c205d340" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </type-pointer>
      </field>
    </union>
    <struct name="sim_event" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h" ref="0x7f06c1d0c020" defined="" size="I:48" alignment="I:8">
      <field name="time" ref="0x7f06c1d0a0a0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
        </type-int>
      </field>
      <field name="mote" ref="0x7f06c1d0a150" bit-offset="I:64" size="I:8">
        <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="force" ref="0x7f06c1d0a200" bit-offset="I:128" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
        </type-int>
      </field>
      <field name="cancelled" ref="0x7f06c1d0a2b0" bit-offset="I:136" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
        </type-int>
      </field>
      <field name="data" ref="0x7f06c1d0a360" bit-offset="I:192" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="handle" ref="0x7f06c1d0a410" bit-offset="I:256" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:8" alignment="I:8">
                <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
      <field name="cleanup" ref="0x7f06c1d0a4e0" bit-offset="I:320" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-function size="I:1" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
            <function-parameters>
              <type-pointer size="I:8" alignment="I:8">
                <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
                  <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
                </type-tag>
              </type-pointer>
            </function-parameters>
          </type-function>
        </type-pointer>
      </field>
    </struct>
    <struct name="_IO_jump_t" ref="0x7f06c1db8a50" size="V:" alignment="V:">
    </struct>
    <struct loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7f06c1959560" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7f06c1959770" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <nx_struct name="tossim_footer" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7f06c19dd590" defined="" size="I:2" alignment="I:1">
      <field name="crc" ref="0x7f06c19dda50" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
          <typename><typedef-ref name="nxle_uint16_t" ref="0x7f06c20b21f0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum name="__codecvt_result" loc="206:/usr/include/libio.h" ref="0x7f06c1db2080" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="70:/usr/include/bits/waitstatus.h" ref="0x7f06c20602d0" defined="" size="I:4" alignment="I:4">
      <field name="__w_termsig" ref="0x7f06c20604e0" bit-offset="I:0" bit-size="I:7">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_coredump" ref="0x7f06c2060590" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__w_retcode" ref="0x7f06c2060640" bit-offset="I:8" bit-size="I:8">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="sim_packet" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h" ref="0x7f06c19f3250" defined="" size="I:0" alignment="I:1">
    </struct>
    <enum loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x7f06c18d8120" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182b6b0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="serial_metadata" loc="125:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d1860" defined="" size="I:1" alignment="I:1">
      <field name="ack" ref="0x7f06c19d1d10" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum name="__itimer_which" loc="93:/usr/include/sys/time.h" ref="0x7f06c1c07d20" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atmostonce" loc="89:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7f06c1ceb020" defined="" size="I:0" alignment="I:1">
    </attribute>
    <union loc="106:/usr/include/bits/pthreadtypes.h" ref="0x7f06c200db90" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x7f06c200dda0" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c200de50" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="673:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h" ref="0x7f06c18ba300" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="26:/usr/include/bits/confname.h" ref="0x7f06c0dab670" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="hwevent"  loc="NONE" ref="0x7f06c25cba90" size="V:" alignment="V:">
    </attribute>
    <struct loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182f9b0" defined="" size="I:1" alignment="I:1">
      <field name="mux" ref="0x7f06c182fbc0" bit-offset="I:0" bit-size="I:5">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="adlar" ref="0x7f06c182fc70" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="refs" ref="0x7f06c182fd20" bit-offset="I:6" bit-size="I:2">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="_IO_FILE" loc="271:/usr/include/libio.h" ref="0x7f06c1dbe400" defined="" size="I:216" alignment="I:8">
      <field name="_flags" ref="0x7f06c1dad540" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_IO_read_ptr" ref="0x7f06c1dad5f0" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_end" ref="0x7f06c1dad6a0" bit-offset="I:128" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_read_base" ref="0x7f06c1dad750" bit-offset="I:192" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_base" ref="0x7f06c1dad800" bit-offset="I:256" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_ptr" ref="0x7f06c1dad8b0" bit-offset="I:320" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_write_end" ref="0x7f06c1dad960" bit-offset="I:384" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_base" ref="0x7f06c1dada10" bit-offset="I:448" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_buf_end" ref="0x7f06c1dadac0" bit-offset="I:512" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_base" ref="0x7f06c1dadb70" bit-offset="I:576" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_backup_base" ref="0x7f06c1dadc20" bit-offset="I:640" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_IO_save_end" ref="0x7f06c1dadcd0" bit-offset="I:704" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="_markers" ref="0x7f06c1dadd80" bit-offset="I:768" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:24" alignment="I:8"><struct-ref name="_IO_marker" ref="0x7f06c1db4340"/></type-tag>
        </type-pointer>
      </field>
      <field name="_chain" ref="0x7f06c1dadf30" bit-offset="I:832" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/></type-tag>
        </type-pointer>
      </field>
      <field name="_fileno" ref="0x7f06c1dab020" bit-offset="I:896" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_flags2" ref="0x7f06c1dab0d0" bit-offset="I:928" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_old_offset" ref="0x7f06c1dab180" bit-offset="I:960" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off_t" ref="0x7f06c203a090"/></typename>
        </type-int>
      </field>
      <field name="_cur_column" ref="0x7f06c1dab230" bit-offset="I:1024" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2"></type-int>
      </field>
      <field name="_vtable_offset" ref="0x7f06c1dab2e0" bit-offset="I:1040" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="_shortbuf" ref="0x7f06c1dab390" bit-offset="I:1048" size="I:1">
        <type-array elements="I:1" size="I:1" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="_lock" ref="0x7f06c1dab440" bit-offset="I:1088" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1">
            <typename><typedef-ref name="_IO_lock_t" ref="0x7f06c1db4020"/></typename>
          </type-void>
        </type-pointer>
      </field>
      <field name="_offset" ref="0x7f06c1dab4f0" bit-offset="I:1152" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__off64_t" ref="0x7f06c203a450"/></typename>
        </type-int>
      </field>
      <field name="__pad1" ref="0x7f06c1dab5a0" bit-offset="I:1216" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad2" ref="0x7f06c1dab650" bit-offset="I:1280" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad3" ref="0x7f06c1dab700" bit-offset="I:1344" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad4" ref="0x7f06c1dab9b0" bit-offset="I:1408" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="__pad5" ref="0x7f06c1daba60" bit-offset="I:1472" size="I:8">
        <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
          <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
        </type-int>
      </field>
      <field name="_mode" ref="0x7f06c1dabb10" bit-offset="I:1536" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="_unused2" ref="0x7f06c1dabbc0" bit-offset="I:1568" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </struct>
    <enum loc="135:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182aa00" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="hashtable" ref="0x7f06c1cebcb0" size="V:" alignment="V:">
    </struct>
    <enum loc="535:/usr/include/bits/confname.h" ref="0x7f06c0d75c60" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="heap" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.h" ref="0x7f06c1c78be0" defined="" size="I:24" alignment="I:8">
      <field name="size" ref="0x7f06c1c76360" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="data" ref="0x7f06c1c76410" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-void size="I:1" alignment="I:1"></type-void>
        </type-pointer>
      </field>
      <field name="private_size" ref="0x7f06c1c764c0" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <attribute name="safe"  loc="NONE" ref="0x7f06c25cace0" size="V:" alignment="V:">
    </attribute>
    <union loc="150:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2003660" defined="" size="I:56" alignment="I:8">
      <field name="__data" ref="0x7f06c2003870" bit-offset="I:0" size="I:56">
        <type-tag size="I:56" alignment="I:8"><struct-ref ref="0x7f06c20055f0"/></type-tag>
      </field>
      <field name="__size" ref="0x7f06c2003920" bit-offset="I:0" size="I:56">
        <type-array elements="I:56" size="I:56" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c20039d0" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <struct name="_IO_marker" loc="186:/usr/include/libio.h" ref="0x7f06c1db4340" defined="" size="I:24" alignment="I:8">
      <field name="_next" ref="0x7f06c1db4c30" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:24" alignment="I:8"><struct-ref name="_IO_marker" ref="0x7f06c1db4340"/></type-tag>
        </type-pointer>
      </field>
      <field name="_sbuf" ref="0x7f06c1db4ce0" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/></type-tag>
        </type-pointer>
      </field>
      <field name="_pos" ref="0x7f06c1db4d90" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h" ref="0x7f06c1501c90" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="86:/usr/include/wchar.h" ref="0x7f06c1dbd9a0" defined="" size="I:4" alignment="I:4">
      <field name="__wch" ref="0x7f06c1dbdbb0" bit-offset="I:0" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__wchb" ref="0x7f06c1dbdc60" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
    </union>
    <struct name="random_data" loc="349:/usr/include/stdlib.h" ref="0x7f06c1ffa020" defined="" size="I:48" alignment="I:8">
      <field name="fptr" ref="0x7f06c1ff9020" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x7f06c224f120"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rptr" ref="0x7f06c1ff90d0" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x7f06c224f120"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="state" ref="0x7f06c1ff9180" bit-offset="I:128" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x7f06c224f120"/></typename>
          </type-int>
        </type-pointer>
      </field>
      <field name="rand_type" ref="0x7f06c1ff9230" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_deg" ref="0x7f06c1ff92e0" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rand_sep" ref="0x7f06c1ff9390" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="end_ptr" ref="0x7f06c1ff9440" bit-offset="I:320" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="int" size="I:4" alignment="I:4">
            <typename><typedef-ref name="int32_t" ref="0x7f06c224f120"/></typename>
          </type-int>
        </type-pointer>
      </field>
    </struct>
    <enum loc="83:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d9330" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="5:TestNetworkC.h" ref="0x7f06c25c7a70" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="29:/usr/include/bits/sigset.h" ref="0x7f06c20224b0" defined="" size="I:128" alignment="I:8">
      <field name="__val" ref="0x7f06c20226c0" bit-offset="I:0" size="I:128">
        <type-array elements="I:16" size="I:128" alignment="I:8">
          <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8"></type-int>
        </type-array>
      </field>
    </struct>
    <struct name="tm" loc="133:/usr/include/time.h" ref="0x7f06c1bedac0" defined="" size="I:56" alignment="I:8">
      <field name="tm_sec" ref="0x7f06c1becf10" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_min" ref="0x7f06c1beb020" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_hour" ref="0x7f06c1beb0d0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mday" ref="0x7f06c1beb180" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_mon" ref="0x7f06c1beb230" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_year" ref="0x7f06c1beb2e0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_wday" ref="0x7f06c1beb390" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_yday" ref="0x7f06c1beb440" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_isdst" ref="0x7f06c1beb4f0" bit-offset="I:256" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="tm_gmtoff" ref="0x7f06c1beb5a0" bit-offset="I:320" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="tm_zone" ref="0x7f06c1beb650" bit-offset="I:384" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
    </struct>
    <struct name="sim_log_output" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7f06c1cdfb00" defined="" size="I:16" alignment="I:8">
      <field name="num" ref="0x7f06c1cde1b0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="files" ref="0x7f06c1cde260" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
              <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <enum loc="4:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcher.h" ref="0x7f06c152c870" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="radio_stats" loc="98:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d6020" defined="" size="I:18" alignment="I:2">
      <field name="version" ref="0x7f06c19d5a30" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="flags" ref="0x7f06c19d5ae0" bit-offset="I:8" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="reserved" ref="0x7f06c19d5b90" bit-offset="I:16" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="platform" ref="0x7f06c19d5c40" bit-offset="I:24" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="MTU" ref="0x7f06c19d5cf0" bit-offset="I:32" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="radio_crc_fail" ref="0x7f06c19d5da0" bit-offset="I:48" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="radio_queue_drops" ref="0x7f06c19d5e50" bit-offset="I:64" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="serial_crc_fail" ref="0x7f06c19d5f00" bit-offset="I:80" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="serial_tx_fail" ref="0x7f06c19d4020" bit-offset="I:96" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="serial_short_packets" ref="0x7f06c19d40d0" bit-offset="I:112" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
      <field name="serial_proto_drops" ref="0x7f06c19d4180" bit-offset="I:128" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
          <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
        </type-int>
      </field>
    </struct>
    <attribute name="one_nok" loc="14:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25bf670" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0x7f06c25bf9e0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="dmemset" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25be080" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0x7f06c25be550" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0x7f06c25be600" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0x7f06c25be6b0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <attribute name="atleastonce" loc="90:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7f06c1ceb3a0" defined="" size="I:0" alignment="I:1">
    </attribute>
    <enum loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7f06c1bfb020" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct ref="0x7f06c25d0530" size="V:" alignment="V:">
    </struct>
    <union loc="212:/usr/include/bits/pthreadtypes.h" ref="0x7f06c1fff4c0" defined="" size="I:4" alignment="I:4">
      <field name="__size" ref="0x7f06c1fff6d0" bit-offset="I:0" size="I:4">
        <type-array elements="I:4" size="I:4" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c1fff780" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </union>
    <enum loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h" ref="0x7f06c1d1a2f0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="itimerval" loc="109:/usr/include/sys/time.h" ref="0x7f06c1c06ac0" defined="" size="I:32" alignment="I:8">
      <field name="it_interval" ref="0x7f06c1c05200" bit-offset="I:0" size="I:16">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="timeval" ref="0x7f06c2021970"/></type-tag>
      </field>
      <field name="it_value" ref="0x7f06c1c052b0" bit-offset="I:128" size="I:16">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="timeval" ref="0x7f06c2021970"/></type-tag>
      </field>
    </struct>
    <nx_struct name="TestNetworkMsg" loc="7:TestNetwork.h" ref="0x7f06c1962e90" defined="" size="I:122" alignment="I:1">
      <field name="source" ref="0x7f06c195d250" bit-offset="I:0" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="parents" ref="0x7f06c195d300" bit-offset="I:8" size="I:8">
        <type-array elements="I:4" size="I:8" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="totalParents" ref="0x7f06c195d3b0" bit-offset="I:72" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="children" ref="0x7f06c195d460" bit-offset="I:80" size="I:20">
        <type-array elements="I:10" size="I:20" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="totalChildren" ref="0x7f06c195d510" bit-offset="I:240" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="siblings" ref="0x7f06c195d5c0" bit-offset="I:248" size="I:20">
        <type-array elements="I:10" size="I:20" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="totalSiblings" ref="0x7f06c195d670" bit-offset="I:408" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="i_am_primary" ref="0x7f06c195d720" bit-offset="I:416" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="message_type" ref="0x7f06c195d7d0" bit-offset="I:424" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="self_data1" ref="0x7f06c195d880" bit-offset="I:432" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="self_data2" ref="0x7f06c195d930" bit-offset="I:440" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="merged_data" ref="0x7f06c195d9e0" bit-offset="I:448" size="I:19">
        <type-array elements="I:19" size="I:19" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="merged_index" ref="0x7f06c195db10" bit-offset="I:600" size="I:19">
        <type-array elements="I:19" size="I:19" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="childrenReceive" ref="0x7f06c195dd40" bit-offset="I:752" size="I:10">
        <type-array elements="I:10" size="I:10" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="childrenHandle" ref="0x7f06c195ddf0" bit-offset="I:832" size="I:10">
        <type-array elements="I:10" size="I:10" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="curr_num" ref="0x7f06c195dea0" bit-offset="I:912" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="avg_link_prob" ref="0x7f06c195df50" bit-offset="I:920" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="able_to_send_lp" ref="0x7f06c195b030" bit-offset="I:928" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="hopcount" ref="0x7f06c195b0e0" bit-offset="I:936" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="sendCount" ref="0x7f06c195b190" bit-offset="I:944" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="sendSuccessCount" ref="0x7f06c195b240" bit-offset="I:960" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c1838080" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct loc="106:/usr/include/stdlib.h" ref="0x7f06c205c710" defined="" size="I:16" alignment="I:8">
      <field name="quot" ref="0x7f06c205c920" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x7f06c205c9d0" bit-offset="I:64" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <attribute name="count_nok" loc="12:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c02d0" defined="" size="I:4" alignment="I:4">
      <field name="n" ref="0x7f06c25c0610" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="sigevent" ref="0x7f06c1be9300" size="V:" alignment="V:">
    </struct>
    <struct loc="98:/usr/include/stdlib.h" ref="0x7f06c205dc40" defined="" size="I:8" alignment="I:4">
      <field name="quot" ref="0x7f06c205de50" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="rem" ref="0x7f06c205df00" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="31:../pure-tdma/sim/BeaconSlotP.nc" ref="0x7f06c1087af0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="one" loc="13:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25c0c30" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0x7f06c25bf020" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct loc="118:/usr/include/stdlib.h" ref="0x7f06c205b2b0" defined="" size="I:16" alignment="I:8">
      <field name="quot" ref="0x7f06c205b4c0" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="rem" ref="0x7f06c205b570" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </struct>
    <struct loc="153:/usr/include/bits/pthreadtypes.h" ref="0x7f06c20055f0" defined="" size="I:56" alignment="I:8">
      <field name="__lock" ref="0x7f06c2005800" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers" ref="0x7f06c20058b0" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__readers_wakeup" ref="0x7f06c2005960" bit-offset="I:64" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__writer_wakeup" ref="0x7f06c2005a10" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_readers_queued" ref="0x7f06c2005ac0" bit-offset="I:128" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nr_writers_queued" ref="0x7f06c2005b70" bit-offset="I:160" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__writer" ref="0x7f06c2005c20" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__shared" ref="0x7f06c2005cd0" bit-offset="I:224" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__pad1" ref="0x7f06c2005d80" bit-offset="I:256" size="I:8">
        <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__pad2" ref="0x7f06c2005e30" bit-offset="I:320" size="I:8">
        <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8"></type-int>
      </field>
      <field name="__flags" ref="0x7f06c2005ee0" bit-offset="I:384" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7f06c19525c0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7f06c19527d0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <struct name="__locale_data" ref="0x7f06c2099890" size="V:" alignment="V:">
    </struct>
    <attribute name="spontaneous"  loc="NONE" ref="0x7f06c25ca080" size="V:" alignment="V:">
    </attribute>
    <union loc="115:/usr/include/bits/pthreadtypes.h" ref="0x7f06c20083c0" defined="" size="I:48" alignment="I:8">
      <field name="__data" ref="0x7f06c20085d0" bit-offset="I:0" size="I:48">
        <type-tag size="I:48" alignment="I:8"><struct-ref ref="0x7f06c200a530"/></type-tag>
      </field>
      <field name="__size" ref="0x7f06c2008680" bit-offset="I:0" size="I:48">
        <type-array elements="I:48" size="I:48" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c2008730" bit-offset="I:0" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <enum loc="76:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19da8b0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="snr_lqi" loc="9:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h" ref="0x7f06c1010570" defined="" size="I:24" alignment="I:8">
      <field name="snr" ref="0x7f06c1010d40" bit-offset="I:0" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="numLqi" ref="0x7f06c1010df0" bit-offset="I:64" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x7f06c1010ea0" bit-offset="I:128" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
            <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7f06c1cdf430" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="unsafe"  loc="NONE" ref="0x7f06c25c8020" size="V:" alignment="V:">
    </attribute>
    <enum loc="117:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182cc40" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="nts" loc="17:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25bd980" defined="" size="I:4" alignment="I:4">
      <field name="dummy" ref="0x7f06c25bdcf0" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <enum loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h" ref="0x7f06c19e2700" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="_IO_FILE_plus" ref="0x7f06c1da9340" size="V:" alignment="V:">
    </struct>
    <struct name="exception" loc="316:/usr/include/math.h" ref="0x7f06c1df1480" defined="" size="I:40" alignment="I:8">
      <field name="type" ref="0x7f06c1df1e30" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="name" ref="0x7f06c1df1ee0" bit-offset="I:64" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="arg1" ref="0x7f06c1def020" bit-offset="I:128" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="arg2" ref="0x7f06c1def0d0" bit-offset="I:192" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="retval" ref="0x7f06c1def180" bit-offset="I:256" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
    </struct>
    <struct loc="141:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c1828590" defined="" size="I:1" alignment="I:1">
      <field name="adps" ref="0x7f06c18287a0" bit-offset="I:0" bit-size="I:3">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="adie" ref="0x7f06c1828850" bit-offset="I:3" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="adif" ref="0x7f06c1828900" bit-offset="I:4" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="adfr" ref="0x7f06c18289b0" bit-offset="I:5" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="adsc" ref="0x7f06c1828a60" bit-offset="I:6" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="aden" ref="0x7f06c1828b10" bit-offset="I:7" bit-size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
    </struct>
    <struct name="sim_log_channel" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c" ref="0x7f06c1cde730" defined="" size="I:24" alignment="I:8">
      <field name="name" ref="0x7f06c1cdd1b0" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-qualified const="">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-qualified>
        </type-pointer>
      </field>
      <field name="numOutputs" ref="0x7f06c1cdd260" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x7f06c1cdd310" bit-offset="I:96" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="outputs" ref="0x7f06c1cdd3c0" bit-offset="I:128" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
              <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
            </type-tag>
          </type-pointer>
        </type-pointer>
      </field>
    </struct>
    <attribute name="C"  loc="NONE" ref="0x7f06c25cb7d0" size="V:" alignment="V:">
    </attribute>
    <struct loc="67:/usr/include/sys/select.h" ref="0x7f06c201e470" defined="" size="I:128" alignment="I:8">
      <field name="__fds_bits" ref="0x7f06c201e680" bit-offset="I:0" size="I:128">
        <type-array elements="I:16" size="I:128" alignment="I:8">
          <type-int cname="long" size="I:8" alignment="I:8">
            <typename><typedef-ref name="__fd_mask" ref="0x7f06c20207f0"/></typename>
          </type-int>
        </type-array>
      </field>
    </struct>
    <enum loc="198:/usr/include/math.h" ref="0x7f06c1df4870" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="sim_noise_hash_t" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7f06c1bf84e0" defined="" size="I:488" alignment="I:8">
      <field name="key" ref="0x7f06c1bf7440" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="numElements" ref="0x7f06c1bf74f0" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="size" ref="0x7f06c1bf75a0" bit-offset="I:192" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="elements" ref="0x7f06c1bf7650" bit-offset="I:256" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="flag" ref="0x7f06c1bf7700" bit-offset="I:320" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="dist" ref="0x7f06c1bf77b0" bit-offset="I:352" size="I:444">
        <type-array elements="I:111" size="I:444" alignment="I:4">
          <type-float cname="float" size="I:4" alignment="I:4"></type-float>
        </type-array>
      </field>
    </struct>
    <enum loc="120:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h" ref="0x7f06c183a6b0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="macro"  loc="NONE" ref="0x7f06c25ca6b0" size="V:" alignment="V:">
      <field name="macro_name" ref="0x7f06c25ca8c0" bit-offset="U:" bit-size="U:">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
    </attribute>
    <enum loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c1837b00" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="111:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182c300" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="95:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h" ref="0x7f06c182e130" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="53:/usr/include/bits/pthreadtypes.h" ref="0x7f06c2013d20" defined="" size="I:56" alignment="I:8">
      <field name="__size" ref="0x7f06c2013f30" bit-offset="I:0" size="I:56">
        <type-array elements="I:56" size="I:56" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c2011020" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <nx_struct name="message_t" loc="14:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/message.h" ref="0x7f06c19cd350" defined="" size="I:172" alignment="I:1">
      <field name="header" ref="0x7f06c19cb630" bit-offset="I:0" size="I:8">
        <type-array elements="I:8" size="I:8" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="data" ref="0x7f06c19cb6e0" bit-offset="I:64" size="I:156">
        <type-array elements="I:156" size="I:156" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="footer" ref="0x7f06c19cb790" bit-offset="I:1312" size="I:2">
        <type-array elements="I:2" size="I:2" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
      <field name="metadata" ref="0x7f06c19cb840" bit-offset="I:1328" size="I:6">
        <type-array elements="I:6" size="I:6" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
      </field>
    </nx_struct>
    <nx_struct name="tossim_header" loc="6:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h" ref="0x7f06c19dfe20" defined="" size="I:8" alignment="I:1">
      <field name="dest" ref="0x7f06c19deca0" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
        </type-int>
      </field>
      <field name="src" ref="0x7f06c19ded50" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
        </type-int>
      </field>
      <field name="length" ref="0x7f06c19dee00" bit-offset="I:32" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="dsn" ref="0x7f06c19deeb0" bit-offset="I:40" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="group" ref="0x7f06c19dd020" bit-offset="I:48" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_group_t" ref="0x7f06c19e3ad0"/></typename>
        </type-int>
      </field>
      <field name="type" ref="0x7f06c19dd0d0" bit-offset="I:56" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_am_id_t" ref="0x7f06c19e35b0"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <struct name="sim_noise_node_t" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h" ref="0x7f06c1bf7d60" defined="" size="I:80" alignment="I:8">
      <field name="key" ref="0x7f06c1bf4560" bit-offset="I:0" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="freqKey" ref="0x7f06c1bf4610" bit-offset="I:160" size="I:20">
        <type-array elements="I:20" size="I:20" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="lastNoiseVal" ref="0x7f06c1bf46c0" bit-offset="I:320" size="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </field>
      <field name="noiseGenTime" ref="0x7f06c1bf4770" bit-offset="I:352" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
        </type-int>
      </field>
      <field name="noiseTable" ref="0x7f06c1bf4820" bit-offset="I:384" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7f06c1cebcb0"/></type-tag>
        </type-pointer>
      </field>
      <field name="noiseTrace" ref="0x7f06c1bf48d0" bit-offset="I:448" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </field>
      <field name="noiseTraceLen" ref="0x7f06c1bf4980" bit-offset="I:512" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
        </type-int>
      </field>
      <field name="noiseTraceIndex" ref="0x7f06c1bf4a30" bit-offset="I:544" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
          <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
        </type-int>
      </field>
      <field name="generated" ref="0x7f06c1bf4ae0" bit-offset="I:576" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
        </type-int>
      </field>
    </struct>
    <struct loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h" ref="0x7f06c1959dc0" defined="" size="I:4" alignment="I:4">
      <field name="notUsed" ref="0x7f06c1952020" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </struct>
    <enum loc="26:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h" ref="0x7f06c19df3f0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <union loc="76:/usr/include/bits/pthreadtypes.h" ref="0x7f06c200fed0" defined="" size="I:40" alignment="I:8">
      <field name="__data" ref="0x7f06c200d110" bit-offset="I:0" size="I:40">
        <type-tag size="I:40" alignment="I:8"><struct-ref name="__pthread_mutex_s" ref="0x7f06c20104d0"/></type-tag>
      </field>
      <field name="__size" ref="0x7f06c200d1c0" bit-offset="I:0" size="I:40">
        <type-array elements="I:40" size="I:40" alignment="I:1">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-array>
      </field>
      <field name="__align" ref="0x7f06c200d270" bit-offset="I:0" size="I:8">
        <type-int cname="long" size="I:8" alignment="I:8"></type-int>
      </field>
    </union>
    <enum loc="291:/usr/include/math.h" ref="0x7f06c1df3a70" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="atomic_hwevent"  loc="NONE" ref="0x7f06c25cbd50" size="V:" alignment="V:">
    </attribute>
    <enum loc="91:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h" ref="0x7f06c19d84c0" defined="" size="I:4" alignment="I:4">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <attribute name="dmemcpy" loc="16:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/deputy_nodeputy.h" ref="0x7f06c25bed00" defined="" size="I:12" alignment="I:4">
      <field name="a1" ref="0x7f06c25bd200" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a2" ref="0x7f06c25bd2b0" bit-offset="I:32" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="a3" ref="0x7f06c25bd360" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
    </attribute>
    <struct name="__pthread_mutex_s" loc="78:/usr/include/bits/pthreadtypes.h" ref="0x7f06c20104d0" defined="" size="I:40" alignment="I:8">
      <field name="__lock" ref="0x7f06c200f390" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__count" ref="0x7f06c200f440" bit-offset="I:32" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__owner" ref="0x7f06c200f4f0" bit-offset="I:64" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__nusers" ref="0x7f06c200f5a0" bit-offset="I:96" size="I:4">
        <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__kind" ref="0x7f06c200f650" bit-offset="I:128" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__spins" ref="0x7f06c200f700" bit-offset="I:160" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="__list" ref="0x7f06c200f7b0" bit-offset="I:192" size="I:16">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="__pthread_internal_list" ref="0x7f06c2011560"/>
          <typename><typedef-ref name="__pthread_list_t" ref="0x7f06c20100d0"/></typename>
        </type-tag>
      </field>
    </struct>
    <enum loc="38:TestNetworkC.nc" ref="0x7f06c18fd4c0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc" ref="0x7f06c1992670" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="44:../pure-tdma/sim/AsyncSendAdapterP.nc" ref="0x7f06c155acd0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AsyncSendAdapterP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="45:../pure-tdma/sim/AsyncReceiveAdapterP.nc" ref="0x7f06c156e210" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="143:../pure-tdma/sim/TossimPacketModelC.nc" ref="0x7f06c0e7cbc0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="93:../pure-tdma/sim/TossimPacketModelC.nc" ref="0x7f06c0de2eb0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="98:../pure-tdma/sim/TossimPacketModelC.nc" ref="0x7f06c0de3e60" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc" ref="0x7f06c14eecf0" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <nx_struct name="logentry_t" loc="79:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc" ref="0x7f06c14e8570" defined="" scoped="" size="I:61189" alignment="I:1">
      <component-ref qname="PureTDMASchedulerP"/>
      <field name="saved_data" ref="0x7f06c14e30e0" bit-offset="I:0" size="I:854">
        <type-array elements="I:7" size="I:854" alignment="I:1">
          <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
            <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
          </type-tag>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="handled_saved_data" ref="0x7f06c14e3210" bit-offset="I:6832" size="I:7">
        <type-array elements="I:7" size="I:7" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="prob_bit" ref="0x7f06c14e3340" bit-offset="I:6888" size="I:7">
        <type-array elements="I:7" size="I:7" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
            <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="len" ref="0x7f06c14e3470" bit-offset="I:6944" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
          <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0x7f06c14e3520" bit-offset="I:6952" size="I:172">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </field>
      <field name="avg_prob" ref="0x7f06c14e35d0" bit-offset="I:8328" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="root_time" ref="0x7f06c14e3680" bit-offset="I:8344" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="res_list" ref="0x7f06c14e37b0" bit-offset="I:8360" size="I:18">
        <type-array elements="I:9" size="I:18" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="delay_list" ref="0x7f06c14e38e0" bit-offset="I:8504" size="I:18">
        <type-array elements="I:9" size="I:18" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
            <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
          </type-int>
        </type-array>
        <attribute-value>
          <attribute-ref name="one" ref="0x7f06c25c0c30"/>
          <value-structured>
            <type-tag size="I:4" alignment="I:4"><attribute-ref name="one" ref="0x7f06c25c0c30"/></type-tag>
          </value-structured>
        </attribute-value>
      </field>
      <field name="root_results" ref="0x7f06c14e3a10" bit-offset="I:8648" size="I:36060">
        <type-array elements="I:3005" size="I:36060" alignment="I:1">
          <type-array elements="I:6" size="I:12" alignment="I:1">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
              <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
            </type-int>
          </type-array>
        </type-array>
      </field>
      <field name="lp_results" ref="0x7f06c14e3ac0" bit-offset="I:297128" size="I:12020">
        <type-array elements="I:3005" size="I:12020" alignment="I:1">
          <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="time_value" scoped="" ref="0x7f06c14e9900"/>
            <typename><typedef-ref name="time_value" scoped="" ref="0x7f06c14e8230"/></typename>
          </type-tag>
        </type-array>
      </field>
      <field name="node_results" ref="0x7f06c14e3b70" bit-offset="I:393288" size="I:12020">
        <type-array elements="I:3005" size="I:12020" alignment="I:1">
          <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="time_value" scoped="" ref="0x7f06c14e9900"/>
            <typename><typedef-ref name="time_value" scoped="" ref="0x7f06c14e8230"/></typename>
          </type-tag>
        </type-array>
      </field>
      <field name="lp_counter" ref="0x7f06c14e3c20" bit-offset="I:489448" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="node_counter" ref="0x7f06c14e3dd0" bit-offset="I:489464" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="LP_SAMPLE_TIMES" ref="0x7f06c14e3e80" bit-offset="I:489480" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="TOPO_SAMPLE_TIMES" ref="0x7f06c14e3f30" bit-offset="I:489496" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <nx_struct name="time_value" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc" ref="0x7f06c14e9900" defined="" scoped="" size="I:4" alignment="I:1">
      <component-ref qname="PureTDMASchedulerP"/>
      <field name="time" ref="0x7f06c14e8020" bit-offset="I:0" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
      <field name="value" ref="0x7f06c14e80d0" bit-offset="I:16" size="I:2">
        <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
          <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
        </type-int>
      </field>
    </nx_struct>
    <enum loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc" ref="0x7f06c123b020" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc" ref="0x7f06c119e640" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="TransformAlarmC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc" ref="0x7f06c1165ce0" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="TransformCounterC"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="653:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc" ref="0x7f06c1012770" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc" ref="0x7f06c103c620" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <struct name="receive_message" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc" ref="0x7f06c0f58180" defined="" scoped="" size="I:72" alignment="I:8">
      <component-ref qname="CpmModelC"/>
      <field name="source" ref="0x7f06c0f56020" bit-offset="I:0" size="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </field>
      <field name="start" ref="0x7f06c0f560d0" bit-offset="I:64" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
        </type-int>
      </field>
      <field name="end" ref="0x7f06c0f56180" bit-offset="I:128" size="I:8">
        <type-int cname="long long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
        </type-int>
      </field>
      <field name="power" ref="0x7f06c0f56230" bit-offset="I:192" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="reversePower" ref="0x7f06c0f562e0" bit-offset="I:256" size="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </field>
      <field name="strength" ref="0x7f06c0f56390" bit-offset="I:320" size="I:1">
        <type-int cname="signed char" size="I:1" alignment="I:1">
          <typename><typedef-ref name="int8_t" ref="0x7f06c25ba8d0"/></typename>
        </type-int>
      </field>
      <field name="lost" ref="0x7f06c0f56440" bit-offset="I:328" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
        </type-int>
      </field>
      <field name="ack" ref="0x7f06c0f564f0" bit-offset="I:336" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
        </type-int>
      </field>
      <field name="msg" ref="0x7f06c0f565a0" bit-offset="I:384" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
            <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="next" ref="0x7f06c0f56650" bit-offset="I:448" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:72" alignment="I:8"><struct-ref name="receive_message" scoped="" ref="0x7f06c0f58180"/>
            <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7f06c0f585f0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
      <field name="channel" ref="0x7f06c0f56700" bit-offset="I:512" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
      <field name="lqi" ref="0x7f06c0f567b0" bit-offset="I:520" size="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </field>
    </struct>
    <enum loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7f06c0ba2b50" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <enum loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueP.nc" ref="0x7f06c0bf1200" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
    <enum loc="161:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7f06c0beea30" defined="" scoped="" size="U:" alignment="U:">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unknown int" size="U:" alignment="U:"></type-int>
    </enum>
    <struct loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc" ref="0x7f06c0be7110" defined="" scoped="" size="I:8" alignment="I:8">
      <component-ref qname="AMQueueImplP"/>
      <field name="msg" ref="0x7f06c0be7320" bit-offset="I:0" size="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
            <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
          </type-tag>
        </type-pointer>
      </field>
    </struct>
    <enum loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc" ref="0x7f06c0b5c690" defined="" scoped="" size="I:4" alignment="I:4">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </enum>
  </tags>
  <variables>
    <variable name="snr28" ref="0x7f06c0ffaa50" loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:128" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr17" ref="0x7f06c0f92a50" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:176" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="randCM" ref="0x7f06c1ae8810" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="dummy" ref="0x7f06c1a45e70" loc="301:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr7" ref="0x7f06c0fcc140" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:720" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr30" ref="0x7f06c0f84a10" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:7" size="I:112" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="current_node" ref="0x7f06c1bc0020" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="test" ref="0x7f06c1ae7140" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr23" ref="0x7f06c0ffc200" loc="22:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:144" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__timezone" ref="0x7f06c1bd6090" loc="278:/usr/include/time.h">
      <type-int cname="long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="optarg" ref="0x7f06c0d2ec30" loc="59:/usr/include/getopt.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-pointer>
    </variable>
    <variable name="snr12" ref="0x7f06c0f9da10" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:16" size="I:256" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr2" ref="0x7f06c0fe2090" loc="27:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:42" size="I:672" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="channelTable" ref="0x7f06c1cdbaa0" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7f06c1cebcb0"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="emergency_status" ref="0x7f06c0d0d020" loc="7:../pure-tdma/sim/printfWr.c">
      <type-array elements="I:5" size="I:20" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </variable>
    <variable name="noiseData" ref="0x7f06c1ab9020" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-array elements="I:1000" size="I:1280000" alignment="I:8">
        <type-array elements="I:16" size="I:1280" alignment="I:8">
          <type-tag size="I:80" alignment="I:8"><struct-ref name="sim_noise_node_t" ref="0x7f06c1bf7d60"/>
            <typename><typedef-ref name="sim_noise_node_t" ref="0x7f06c1bf4c40"/></typename>
          </type-tag>
        </type-array>
      </type-array>
    </variable>
    <variable name="outputs" ref="0x7f06c1cdb640" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-array elements="I:175" size="I:2800" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="sim_log_output" ref="0x7f06c1cdfb00"/>
          <typename><typedef-ref name="sim_log_output_t" ref="0x7f06c1cde3c0"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__tzname" ref="0x7f06c1bd78e0" loc="276:/usr/include/time.h">
      <type-array elements="I:2" size="I:16" alignment="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="randU" ref="0x7f06c1ae8090" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-array elements="I:97" size="I:776" alignment="I:8">
        <type-float cname="double" size="I:8" alignment="I:8"></type-float>
      </type-array>
    </variable>
    <variable name="snr21" ref="0x7f06c1001020" loc="20:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:144" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr26" ref="0x7f06c10095b0" loc="17:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:128" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="optind" ref="0x7f06c0d2d020" loc="73:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="timezone" ref="0x7f06c1bd4490" loc="292:/usr/include/time.h">
      <type-int cname="long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="eventHeap" ref="0x7f06c1c2dd80" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.c">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
        <short>&#10; The event queue is the core of the mote side of TOSSIM.</short>
        <long>&#10; The event queue is the core of the mote side of TOSSIM. It is a&#10; wrapper around the underlying heap. Unlike the 1.x version, it is&#10; not re-entrant: merging the Python console and TOSSIM means that&#10; functionality like packet injection/reception from external tools&#10; is on the Python side.&#10;&#10; @author Phil Levis&#10; @date   November 22 2005&#10;</long>
      </documentation>
      <type-tag size="I:24" alignment="I:8"><struct-ref name="heap" ref="0x7f06c1c78be0"/>
        <typename><typedef-ref name="heap_t" ref="0x7f06c1c76620"/></typename>
      </type-tag>
    </variable>
    <variable name="snr15" ref="0x7f06c0f99de0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:176" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr5" ref="0x7f06c0fd88e0" loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:46" size="I:736" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaRxTxDelay" ref="0x7f06c1b6e4d0" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="numCase1" ref="0x7f06c1abc880" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr18" ref="0x7f06c0f88830" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:176" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__environ" ref="0x7f06c0db9ca0" loc="540:/usr/include/unistd.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-pointer>
    </variable>
    <variable name="randC" ref="0x7f06c1ae8310" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr10" ref="0x7f06c0fa7710" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:26" size="I:416" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="FreqKeyNum" ref="0x7f06c1abb810" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="snr29" ref="0x7f06c0ff6020" loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:128" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaLow" ref="0x7f06c1b70120" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaPreambleLength" ref="0x7f06c1b6f020" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr8" ref="0x7f06c0fb6a00" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:34" size="I:544" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr31" ref="0x7f06c0f858b0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:3" size="I:48" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="numTotal" ref="0x7f06c1abb300" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="daylight" ref="0x7f06c1bd40d0" loc="291:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaExponentBase" ref="0x7f06c1b6f4f0" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stdin_" ref="0x7f06c1da9780" loc="346:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x7f06c1da9340"/></type-tag>
    </variable>
    <variable name="allSnr" ref="0x7f06c0f82ad0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:29" size="I:696" alignment="I:8">
        <type-tag size="I:24" alignment="I:8"><struct-ref name="snr_lqi" ref="0x7f06c1010570"/>
          <typename><typedef-ref name="snr_lqi_t" ref="0x7f06c100f020"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="snr24" ref="0x7f06c100f3f0" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:8" size="I:128" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="fw" ref="0x7f06c0d0f700" loc="5:../pure-tdma/sim/printfWr.c">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="randCD" ref="0x7f06c1ae8590" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr0" ref="0x7f06c0ff4510" loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:25" size="I:400" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="j97" ref="0x7f06c1ae8db0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr13" ref="0x7f06c0fa0200" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:13" size="I:208" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="TOS_NODE_ID" ref="0x7f06c1d1ac70" loc="70:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="sys_errlist" ref="0x7f06c1d22360" loc="28:/usr/include/bits/sys_errlist.h">
      <type-qualified const="">
        <type-array elements="V:" size="V:" alignment="V:">
          <type-qualified const="">
            <type-pointer size="I:8" alignment="I:8">
              <type-qualified const="">
                <type-int cname="char" size="I:1" alignment="I:1"></type-int>
              </type-qualified>
            </type-pointer>
          </type-qualified>
        </type-array>
      </type-qualified>
    </variable>
    <variable name="snr3" ref="0x7f06c0feebf0" loc="26:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:720" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="tzname" ref="0x7f06c1bd6570" loc="283:/usr/include/time.h">
      <type-array elements="I:2" size="I:16" alignment="I:8">
        <type-pointer size="I:8" alignment="I:8">
          <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        </type-pointer>
      </type-array>
    </variable>
    <variable name="STARTING_SIZE" ref="0x7f06c1c6f900" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-qualified const="">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </variable>
    <variable name="opterr" ref="0x7f06c0d2d3a0" loc="78:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="=va_arg" ref="0x7f06c25d0860"  loc="NONE">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_IO_2_1_stderr_" ref="0x7f06c1da7130" loc="348:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x7f06c1da9340"/></type-tag>
    </variable>
    <variable name="csmaHigh" ref="0x7f06c1b72c90" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMaxIterations" ref="0x7f06c1b6f9c0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="atm128RegFile" ref="0x7f06c184e6a0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-array elements="I:1000" size="I:160000" alignment="I:1">
        <type-array elements="I:160" size="I:160" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </type-array>
      </type-array>
    </variable>
    <variable name="localNoise" ref="0x7f06c1b33390" loc="9:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:256256" alignment="I:8">
        <type-array elements="I:16" size="I:256" alignment="I:8">
          <type-tag size="I:16" alignment="I:8"><struct-ref name="sim_gain_noise" ref="0x7f06c1b36b00"/>
            <typename><typedef-ref name="sim_gain_noise_t" ref="0x7f06c1b34310"/></typename>
          </type-tag>
        </type-array>
      </type-array>
    </variable>
    <variable name="snr27" ref="0x7f06c1007a50" loc="18:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:144" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="_IO_2_1_stdout_" ref="0x7f06c1da9c30" loc="347:/usr/include/libio.h">
      <type-tag size="V:" alignment="V:"><struct-ref name="_IO_FILE_plus" ref="0x7f06c1da9340"/></type-tag>
    </variable>
    <variable name="snr16" ref="0x7f06c0f8fae0" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:11" size="I:176" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="csmaInitLow" ref="0x7f06c1b72810" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="fr" ref="0x7f06c0d0fa70" loc="6:../pure-tdma/sim/printfWr.c">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="snr6" ref="0x7f06c0fc15a0" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:45" size="I:720" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="numCase2" ref="0x7f06c1abcdd0" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr19" ref="0x7f06c0f8bb70" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:160" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sim_ticks" ref="0x7f06c1bc2bb0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
      </type-int>
    </variable>
    <variable name="snr22" ref="0x7f06c0fff8f0" loc="21:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:9" size="I:144" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="__daylight" ref="0x7f06c1bd7c70" loc="277:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stderr" ref="0x7f06c1d8ea10" loc="167:/usr/include/stdio.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="connectivity" ref="0x7f06c1b34b20" loc="8:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-array elements="I:1001" size="I:128128" alignment="I:8">
        <type-array elements="I:16" size="I:128" alignment="I:8">
          <type-pointer size="I:8" alignment="I:8">
            <type-tag size="I:32" alignment="I:8"><struct-ref name="gain_entry" ref="0x7f06c1b45530"/>
              <typename><typedef-ref name="gain_entry_t" ref="0x7f06c1b432e0"/></typename>
            </type-tag>
          </type-pointer>
        </type-array>
      </type-array>
    </variable>
    <variable name="snr11" ref="0x7f06c0fac3d0" loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:20" size="I:320" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sys_nerr" ref="0x7f06c1d24e60" loc="27:/usr/include/bits/sys_errlist.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stdin" ref="0x7f06c1d8e150" loc="165:/usr/include/stdio.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="simTimeBuf" ref="0x7f06c1b8a6e0" loc="360:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-array elements="I:128" size="I:128" alignment="I:1">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-array>
    </variable>
    <variable name="snr20" ref="0x7f06c1004330" loc="19:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:160" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="sim_seed" ref="0x7f06c1bc03a0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="_LIB_VERSION" ref="0x7f06c1df1150" loc="303:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x7f06c1df3a70"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x7f06c1df2c60"/></typename>
      </type-tag>
    </variable>
    <variable name="sensitivity" ref="0x7f06c1b336e0" loc="11:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="snr25" ref="0x7f06c100d8f0" loc="16:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:10" size="I:160" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="allSnr_len" ref="0x7f06c0f73180" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="signgam" ref="0x7f06c1df45a0" loc="157:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaInitHigh" ref="0x7f06c1b72380" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="snr14" ref="0x7f06c0f96e20" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-array elements="I:14" size="I:224" alignment="I:8">
        <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
          <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="optopt" ref="0x7f06c0d2d720" loc="82:/usr/include/getopt.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="stdout" ref="0x7f06c1d8e5b0" loc="166:/usr/include/stdio.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/></type-tag>
      </type-pointer>
    </variable>
    <variable name="csmaAckTime" ref="0x7f06c1b6e960" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaSymbolsPerSec" ref="0x7f06c1b705f0" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaMinFreeSamples" ref="0x7f06c1b6e020" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="csmaBitsPerSymbol" ref="0x7f06c1b70ac0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_csma.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="i97" ref="0x7f06c1ae8b50" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/randomlib.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="msgamr" ref="0x7f06c18fe0d0" loc="31:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
          <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="msglen" ref="0x7f06c18fe860" loc="34:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="prevSeq" ref="0x7f06c18f45f0" loc="64:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="rcmr" ref="0x7f06c18ffcb0" loc="30:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
          <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="rcm" ref="0x7f06c18ff8d0" loc="29:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
          <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="firstMsg" ref="0x7f06c18f4ac0" loc="65:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="fire_count" ref="0x7f06c18ff3c0" loc="28:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="packet" ref="0x7f06c18ff020" loc="27:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </variable>
    <variable name="tnmsg_in_transit" ref="0x7f06c18fe4f0" loc="33:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
        <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
      </type-tag>
    </variable>
    <variable name="packetCount" ref="0x7f06c18fec10" loc="35:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="sendBusy" ref="0x7f06c18fd130" loc="36:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="sim_scheduler_event_pending" ref="0x7f06c1990460" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="m_tail" ref="0x7f06c1991ad0" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="m_head" ref="0x7f06c1991760" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="m_next" ref="0x7f06c1990020" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-array elements="I:9" size="I:9" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="sim_scheduler_event" ref="0x7f06c19909b0" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
      </type-tag>
    </variable>
    <variable name="radioChannel" ref="0x7f06c16714e0" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="bootEvent" ref="0x7f06c1671110" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
          <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="startTime" ref="0x7f06c167c9a0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="euid" ref="0x7f06c167c5e0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="long long" size="I:8" alignment="I:8"></type-int>
    </variable>
    <variable name="isOn" ref="0x7f06c167cce0" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="tcp_msg" ref="0x7f06c1671a70" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimMoteP.nc">
      <component-ref qname="SimMoteP"/>
      <type-array elements="I:10" size="I:40" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </variable>
    <variable name="buffer" ref="0x7f06c15e5ad0" loc="20:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0x7f06c15e3020" loc="21:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/csma/sim/CC2420CsmaP.nc">
      <component-ref qname="CC2420CsmaP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="payload_" ref="0x7f06c156b580" loc="37:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-void size="I:1" alignment="I:1"></type-void>
      </type-pointer>
    </variable>
    <variable name="msg_" ref="0x7f06c156cd70" loc="36:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="len_" ref="0x7f06c156b8e0" loc="38:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="msg_" ref="0x7f06c1556110" loc="36:../pure-tdma/sim/AsyncSendAdapterP.nc">
      <component-ref qname="AsyncSendAdapterP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="len_" ref="0x7f06c1556470" loc="37:../pure-tdma/sim/AsyncSendAdapterP.nc">
      <component-ref qname="AsyncSendAdapterP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="slotSize" ref="0x7f06c14d75d0" loc="147:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="toSendLen" ref="0x7f06c14d5710" loc="156:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="is_primary" ref="0x7f06c14d9870" loc="142:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="topo_fp" ref="0x7f06c14db960" loc="136:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="start_change_topo" ref="0x7f06c14cb270" loc="184:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="CURRNODES" ref="0x7f06c14db0d0" loc="128:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="schedule_len" ref="0x7f06c14cb760" loc="186:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="node_list" ref="0x7f06c14d0110" loc="177:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:50" size="I:50" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="requestStop" ref="0x7f06c14c73a0" loc="205:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="Alpha" ref="0x7f06c14e9480" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="opt_node_list" ref="0x7f06c14d0b10" loc="183:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:47" size="I:47" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="self_pos" ref="0x7f06c14de9c0" loc="116:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="totalChildren" ref="0x7f06c14dd520" loc="119:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="j" ref="0x7f06c14d69b0" loc="152:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="rcmr" ref="0x7f06c14df640" loc="111:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
          <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="avg_prob" ref="0x7f06c14d3d00" loc="169:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="increment" ref="0x7f06c14dc4f0" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="toSend" ref="0x7f06c14d5380" loc="155:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="bi" ref="0x7f06c14d7930" loc="148:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="i_am_alive" ref="0x7f06c14ca680" loc="192:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="MAXLEVELNODE" ref="0x7f06c14dcbe0" loc="126:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="up_schedule" ref="0x7f06c14d42c0" loc="163:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:12" size="I:144" alignment="I:1">
        <type-array elements="I:12" size="I:12" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
          </type-int>
        </type-array>
      </type-array>
    </variable>
    <variable name="init" ref="0x7f06c14d7230" loc="146:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="new_opt" ref="0x7f06c14d2af0" loc="175:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="flag" ref="0x7f06c14dc020" loc="122:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="send_counter" ref="0x7f06c14d9390" loc="140:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="ADD_METHOD" ref="0x7f06c14c5b30" loc="226:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="schedule_counter" ref="0x7f06c14d5c10" loc="159:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:12" size="I:12" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="starter" ref="0x7f06c14dbe00" loc="138:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:12" size="I:12" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="cap" ref="0x7f06c14d7df0" loc="148:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="old_opt" ref="0x7f06c14d2230" loc="173:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="receiving_num" ref="0x7f06c14dd020" loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="k" ref="0x7f06c14d6e30" loc="153:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="curr_total_samples" ref="0x7f06c14c90d0" loc="196:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="coordinatorId" ref="0x7f06c14d61f0" loc="149:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="WRITE_DIR" ref="0x7f06c14c57e0" loc="224:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
      </type-pointer>
    </variable>
    <variable name="estimate_lp_fp" ref="0x7f06c14c5090" loc="220:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="rev_counter" ref="0x7f06c14d9d50" loc="144:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="log_payload" ref="0x7f06c14e1dc0" loc="109:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
          <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="totalParents" ref="0x7f06c14dda10" loc="120:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="curr_children_sample" ref="0x7f06c14c9760" loc="198:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:7" size="I:7" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="m_entry" ref="0x7f06c14e1570" loc="108:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-tag size="I:61189" alignment="I:1"><nx_struct-ref name="logentry_t" scoped="" ref="0x7f06c14e8570"/>
        <typename><typedef-ref name="logentry_t" scoped="" ref="0x7f06c14e10d0"/></typename>
      </type-tag>
    </variable>
    <variable name="child_flag" ref="0x7f06c14cab60" loc="194:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="superframe_length" ref="0x7f06c14c8650" loc="200:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="sync" ref="0x7f06c14c7020" loc="204:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="sd" ref="0x7f06c14d7b90" loc="148:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="isSibling" ref="0x7f06c14de4f0" loc="115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="max_schedule" ref="0x7f06c14d4790" loc="165:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-array elements="I:12" size="I:12" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="network_health_fp" ref="0x7f06c14c7c40" loc="218:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="i" ref="0x7f06c14d6530" loc="151:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="curr_node_fp" ref="0x7f06c14c5460" loc="222:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="isParent" ref="0x7f06c14de020" loc="114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="max_opt_len" ref="0x7f06c14d04b0" loc="179:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="lp_intervals" ref="0x7f06c14cbc50" loc="188:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="topo_intervals" ref="0x7f06c14ca1a0" loc="190:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="control_input_fp" ref="0x7f06c14c7840" loc="216:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="fp" ref="0x7f06c14db580" loc="130:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
          <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="isChild" ref="0x7f06c14df9c0" loc="113:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="consecutive_lost" ref="0x7f06c14c8b70" loc="202:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="toSendLen" ref="0x7f06c123a420" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="toSend" ref="0x7f06c123a090" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="state" ref="0x7f06c123a790" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="evt" ref="0x7f06c11ee830" loc="11:../pure-tdma/sim/AlarmMicro16P.nc">
      <component-ref qname="AlarmMicro16P"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
          <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="alarm" ref="0x7f06c11efe40" loc="9:../pure-tdma/sim/AlarmMicro16P.nc">
      <component-ref qname="AlarmMicro16P"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="zero" ref="0x7f06c11ee340" loc="10:../pure-tdma/sim/AlarmMicro16P.nc">
      <component-ref qname="AlarmMicro16P"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
      </type-int>
    </variable>
    <variable name="t0" ref="0x7f06c11c4610" loc="25:../pure-tdma/sim/CounterMicro16P.nc">
      <component-ref qname="CounterMicro16P"/>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
      </type-int>
    </variable>
    <variable name="m_dt" ref="0x7f06c119e3d0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TransformAlarmC"/>
      <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f06c11ac290"/></type-var>
    </variable>
    <variable name="m_t0" ref="0x7f06c119e020" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <documentation loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
        <short>&#10; The original Alarm.</short>
      </documentation>
      <component-ref qname="TransformAlarmC"/>
      <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x7f06c11ac290"/></type-var>
    </variable>
    <variable name="m_upper" ref="0x7f06c1165a70" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="TransformCounterC"/>
      <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x7f06c116b290"/></type-var>
    </variable>
    <variable name="frameLength" ref="0x7f06c1129920" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="slotLength" ref="0x7f06c1129530" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="nextFire" ref="0x7f06c1128020" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="slot" ref="0x7f06c1129140" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
    <variable name="sync" ref="0x7f06c1129c60" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotterP.nc">
      <component-ref qname="GenericSlotterP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="toSendLen" ref="0x7f06c10c8980" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherP.nc">
      <component-ref qname="SenderDispatcherP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="toSend" ref="0x7f06c10c85f0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherP.nc">
      <component-ref qname="SenderDispatcherP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="last_id" ref="0x7f06c10c8d00" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcherP.nc">
      <component-ref qname="SenderDispatcherP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="syncPkt" ref="0x7f06c10782a0" loc="51:../pure-tdma/sim/BeaconSlotP.nc">
      <component-ref qname="BeaconSlotP"/>
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </variable>
    <variable name="syncPktLen" ref="0x7f06c1078640" loc="52:../pure-tdma/sim/BeaconSlotP.nc">
      <component-ref qname="BeaconSlotP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="channel" ref="0x7f06c1038780" loc="12:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="panAddress" ref="0x7f06c1036020" loc="14:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="address" ref="0x7f06c1038b10" loc="13:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </variable>
    <variable name="hwAddressRecognition" ref="0x7f06c10367d0" loc="16:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="autoAck" ref="0x7f06c1036b30" loc="17:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="addressRecognition" ref="0x7f06c10363f0" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="hwAutoAck" ref="0x7f06c1035020" loc="18:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="collision" ref="0x7f06c0f23cb0" loc="207:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="requestAck" ref="0x7f06c0f594f0" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="receiveEvent" ref="0x7f06c0f233a0" loc="204:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
      </type-tag>
    </variable>
    <variable name="incomingSource" ref="0x7f06c0f21860" loc="209:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="outstandingReceptionHead" ref="0x7f06c0f56ba0" loc="81:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:72" alignment="I:8"><struct-ref name="receive_message" scoped="" ref="0x7f06c0f58180"/>
          <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7f06c0f585f0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="incoming" ref="0x7f06c0f21210" loc="208:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="rssi" ref="0x7f06c0f59ce0" loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="clearThreshold" ref="0x7f06c0f23730" loc="206:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-float cname="double" size="I:8" alignment="I:8"></type-float>
    </variable>
    <variable name="outgoing" ref="0x7f06c0f59170" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="receiving" ref="0x7f06c0f59860" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="sendEvent" ref="0x7f06c0e75e80" loc="73:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
      </type-tag>
    </variable>
    <variable name="initialized" ref="0x7f06c0e788f0" loc="65:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="error" ref="0x7f06c0e07590" loc="304:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="cca_enable_flag" ref="0x7f06c0e74270" loc="75:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="backoffCount" ref="0x7f06c0e762a0" loc="67:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="neededFreeSamples" ref="0x7f06c0e76680" loc="68:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="sending" ref="0x7f06c0e76a50" loc="69:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="running" ref="0x7f06c0e78d90" loc="66:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="receiveBuffer" ref="0x7f06c0e74640" loc="77:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </variable>
    <variable name="sendingLength" ref="0x7f06c0e75650" loc="71:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="transmitting" ref="0x7f06c0e75150" loc="70:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="destNode" ref="0x7f06c0e75ad0" loc="72:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </variable>
    <variable name="buffer" ref="0x7f06c0c91730" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </variable>
    <variable name="bufferPointer" ref="0x7f06c0c91b40" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimActiveMessageC.nc">
      <component-ref qname="TossimActiveMessageC"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="addr" ref="0x7f06c0c1f100" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
      </type-int>
    </variable>
    <variable name="set" ref="0x7f06c0c20c10" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </variable>
    <variable name="current" ref="0x7f06c0be7800" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="queue" ref="0x7f06c0be6020" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:8">
        <type-tag size="I:8" alignment="I:8"><struct-ref scoped="" ref="0x7f06c0be7110"/>
          <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x7f06c0be7480"/></typename>
        </type-tag>
      </type-array>
    </variable>
    <variable name="cancelMask" ref="0x7f06c0be68b0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:1">
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
        </type-int>
      </type-array>
    </variable>
    <variable name="toSendLen" ref="0x7f06c0b59130" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="toSend" ref="0x7f06c0b5bd60" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
          <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
        </type-tag>
      </type-pointer>
    </variable>
    <variable name="state" ref="0x7f06c0b594a0" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </variable>
    <variable name="seed" ref="0x7f06c0b0e5e0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </variable>
  </variables>
  <constants>
    <constant cst="I:128" name="_SC_XBS5_LPBIG_OFFBIG" ref="0x7f06c0d8b640" loc="348:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="_SC_PRIORITIZED_IO" ref="0x7f06c0da4620" loc="101:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:131" name="_SC_XOPEN_REALTIME_THREADS" ref="0x7f06c0d8a020" loc="355:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACIE" ref="0x7f06c1872630" loc="1075:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCDR7" ref="0x7f06c18879e0" loc="943:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PB6" ref="0x7f06c1869640" loc="1132:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB81" ref="0x7f06c1875ca0" loc="1058:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_ADC_DIFF_ADC22_1x" ref="0x7f06c18314f0" loc="76:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1BL" ref="0x7f06c18cf710" loc="140:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_DDRD" ref="0x7f06c18d4c10" loc="81:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOIE0" ref="0x7f06c18a8ca0" loc="786:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PING0" ref="0x7f06c184e020" loc="1299:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_FREE_RUNNING_OFF" ref="0x7f06c182ba40" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="LEDS_LED4" ref="0x7f06c14fd5a0" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_ADC_DIFF_ADC51_1x" ref="0x7f06c18323f0" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SRL0" ref="0x7f06c18b4330" loc="705:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS30" ref="0x7f06c1889640" loc="924:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINA2" ref="0x7f06c186a980" loc="1126:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINB4" ref="0x7f06c1865020" loc="1154:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES3" ref="0x7f06c188a680" loc="919:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINC6" ref="0x7f06c1861680" loc="1182:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1107" name="_CS_XBS5_ILP32_OFFBIG_LINTFLAGS" ref="0x7f06c0d70540" loc="588:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADLAR" ref="0x7f06c186f340" loc="1093:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:149" name="_SC_MONOTONIC_CLOCK" ref="0x7f06c0d87600" loc="392:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PA2" ref="0x7f06c186d620" loc="1106:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGMA1" ref="0x7f06c1891ca0" loc="876:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGMB3" ref="0x7f06c188dca0" loc="902:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="TOS_SERIAL_UNKNOWN_ID" ref="0x7f06c19d8230" loc="87:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWA3" ref="0x7f06c18b7640" loc="687:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1B1" ref="0x7f06c18909a0" loc="882:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADHSM" ref="0x7f06c1884660" loc="961:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INT3" ref="0x7f06c18ab020" loc="763:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC31" ref="0x7f06c18b19c0" loc="730:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINF3" ref="0x7f06c1852660" loc="1275:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:63" name="_SC_PII_OSI_COTS" ref="0x7f06c0d980b0" loc="209:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-1" name="_IEEE_" ref="0x7f06c1df3e00" loc="293:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:143" name="_SC_FD_MGMT" ref="0x7f06c0d88360" loc="380:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM21" ref="0x7f06c189c020" loc="858:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM33" ref="0x7f06c188a9a0" loc="920:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_SNGL_ADC5" ref="0x7f06c1836de0" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:129" name="ATM128_ICR3H" ref="0x7f06c18c4530" loc="269:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XMM0" ref="0x7f06c18b3950" loc="714:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="_SC_MAPPED_FILES" ref="0x7f06c0da2020" loc="107:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS2" ref="0x7f06c189f020" loc="839:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="_SC_TZNAME_MAX" ref="0x7f06c0da5020" loc="87:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="_ISgraph" ref="0x7f06c1de72b0" loc="57:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="_SC_IOV_MAX" ref="0x7f06c0d9a720" loc="203:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:51" name="ATM128_TCCR0" ref="0x7f06c18cc550" loc="169:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="_SC_INT_MAX" ref="0x7f06c0d90020" loc="298:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC1C" ref="0x7f06c1887390" loc="939:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:140" name="_SC_DEVICE_IO" ref="0x7f06c0d89a20" loc="374:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_RIGHT_ADJUST" ref="0x7f06c18374b0" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PB0" ref="0x7f06c1868920" loc="1138:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PC2" ref="0x7f06c1863020" loc="1166:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3AL" ref="0x7f06c18c21e0" loc="283:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WDP1" ref="0x7f06c1885cc0" loc="956:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PD4" ref="0x7f06c185f620" loc="1194:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PE6" ref="0x7f06c185bc80" loc="1222:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:145" name="_SC_PIPE" ref="0x7f06c0d888a0" loc="384:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1128" name="_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS" ref="0x7f06c0d6a200" loc="631:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="_SC_REALTIME_SIGNALS" ref="0x7f06c0da58e0" loc="93:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:83" name="_SC_NPROCESSORS_CONF" ref="0x7f06c0d940b0" loc="252:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM00" ref="0x7f06c189e340" loc="847:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ADPS2" ref="0x7f06c1870340" loc="1086:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="_SC_SIGQUEUE_MAX" ref="0x7f06c0d9f740" loc="144:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWA6" ref="0x7f06c18b8c80" loc="684:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:140" name="ATM128_TCCR3C" ref="0x7f06c18c1ad0" loc="298:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INT6" ref="0x7f06c18ac6b0" loc="760:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:59" name="_SC_SELECT" ref="0x7f06c0d9a0b0" loc="199:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW10" ref="0x7f06c18a3640" loc="817:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS0" ref="0x7f06c187d020" loc="1004:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_PORTE" ref="0x7f06c18d7020" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:107" name="_SC_WORD_BIT" ref="0x7f06c0d90850" loc="304:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC0" ref="0x7f06c189f950" loc="844:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PIND0" ref="0x7f06c185b660" loc="1218:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINE2" ref="0x7f06c1857ca0" loc="1246:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WDCE" ref="0x7f06c18853a0" loc="953:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_PRESCALE_16" ref="0x7f06c182d190" loc="100:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES" ref="0x7f06c188d980" loc="901:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:168" name="_SC_2_PBS" ref="0x7f06c0d82020" loc="430:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="ATM128_TCNT0" ref="0x7f06c18cc1d0" loc="166:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_POWER_ADC_NR" ref="0x7f06c183ad80" loc="122:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDA6" ref="0x7f06c186c330" loc="1112:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="_SC_MEMORY_PROTECTION" ref="0x7f06c0da28e0" loc="113:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:84" name="_SC_NPROCESSORS_ONLN" ref="0x7f06c0d943c0" loc="254:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ISC71" ref="0x7f06c18af3b0" loc="740:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:188" name="_SC_LEVEL1_DCACHE_SIZE" ref="0x7f06c0d7e020" loc="473:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="REFS0" ref="0x7f06c186f020" loc="1092:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDF7" ref="0x7f06c1854020" loc="1261:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1024" name="_ISalpha" ref="0x7f06c1decb30" loc="52:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="SERIAL_PROTO_PACKET_UNKNOWN" ref="0x7f06c19d7be0" loc="95:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSR" ref="0x7f06c18d6140" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="_SC_BC_SCALE_MAX" ref="0x7f06c0d9e310" loc="155:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="_SC_PAGESIZE" ref="0x7f06c0da0b50" loc="135:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="ATM128_TIMSK" ref="0x7f06c18cb710" loc="182:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:46" name="ATM128_TCCR1B" ref="0x7f06c18cd3b0" loc="154:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="NOISE_BIN_SIZE" ref="0x7f06c1bfa9e0" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="OCDR2" ref="0x7f06c18869d0" loc="948:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM00" ref="0x7f06c187ecc0" loc="1003:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1111" name="_CS_XBS5_LP64_OFF64_LINTFLAGS" ref="0x7f06c0d6f390" loc="596:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1104" name="_CS_XBS5_ILP32_OFFBIG_CFLAGS" ref="0x7f06c0d71a70" loc="582:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:51" name="_SC_2_SW_DEV" ref="0x7f06c0d9c9a0" loc="182:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:133" name="_SC_BARRIERS" ref="0x7f06c0d8a5d0" loc="360:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCIE2" ref="0x7f06c18a9680" loc="779:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:72" name="_SC_TTY_NAME_MAX" ref="0x7f06c0d97c30" loc="229:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:192" name="_SC_LEVEL2_CACHE_ASSOC" ref="0x7f06c0d7ece0" loc="481:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF3C" ref="0x7f06c18a4970" loc="811:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:95" name="_SC_2_CHAR_TERM" ref="0x7f06c0d925d0" loc="278:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SM2" ref="0x7f06c18a2320" loc="821:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PF0" ref="0x7f06c1855c20" loc="1258:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV1" ref="0x7f06c18a6020" loc="794:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PG2" ref="0x7f06c1851940" loc="1283:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ10" ref="0x7f06c187e020" loc="997:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="ATM128_ADC_SNGL_1_23" ref="0x7f06c1830330" loc="80:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:103" name="_SC_CHAR_MIN" ref="0x7f06c0d91c50" loc="296:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:187" name="_SC_LEVEL1_ICACHE_LINESIZE" ref="0x7f06c0d7fc90" loc="471:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:244" name="_SC_TRACE_SYS_MAX" ref="0x7f06c0d7a610" loc="520:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:123" name="SIMPLE_TDMA_SYNC" ref="0x7f06c1087e20" loc="32:../pure-tdma/sim/BeaconSlotP.nc">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:59" name="ATM128_RAMPZ" ref="0x7f06c18ca550" loc="194:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:45" name="_SC_CHARCLASS_NAME_MAX" ref="0x7f06c0d9d8d0" loc="169:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="INTF3" ref="0x7f06c18aa980" loc="773:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWWC" ref="0x7f06c18b8330" loc="679:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="RAMPZ0" ref="0x7f06c18b1680" loc="727:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_ADC_DIFF_ADC10_10x" ref="0x7f06c1835b10" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_ADC_DIFF_ADC22_10x" ref="0x7f06c1834520" loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="XDIV3" ref="0x7f06c18b2980" loc="721:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="HDLC_CTLESC_BYTE" ref="0x7f06c19d9020" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:148" name="_SC_FILE_SYSTEM" ref="0x7f06c0d87300" loc="390:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE1" ref="0x7f06c187a640" loc="1025:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:164" name="_SC_TIMEOUTS" ref="0x7f06c0d83370" loc="422:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:190" name="_SC_LEVEL1_DCACHE_LINESIZE" ref="0x7f06c0d7e6a0" loc="477:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_ENABLE_OFF" ref="0x7f06c182ad80" loc="136:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:53" name="_SC_PII" ref="0x7f06c0d9b020" loc="187:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_SVID_" ref="0x7f06c1df20b0" loc="294:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="TEST_NETWORK_QUEUE_SIZE" ref="0x7f06c1963c90" loc="10:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="EOFF" ref="0x7f06c1f1a6b0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_ENABLE_ON" ref="0x7f06c18291b0" loc="137:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="_SC_SHARED_MEMORY_OBJECTS" ref="0x7f06c0da1360" loc="119:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3C" ref="0x7f06c18c48b0" loc="272:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1133" name="_CS_POSIX_V7_ILP32_OFF32_LDFLAGS" ref="0x7f06c0d693f0" loc="642:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDF1" ref="0x7f06c1853330" loc="1267:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDG3" ref="0x7f06c1850660" loc="1289:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="_CS_V7_WIDTH_RESTRICTED_ENVS" ref="0x7f06c0d73020" loc="553:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM1" ref="0x7f06c187ac70" loc="1027:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="_PC_VDISABLE" ref="0x7f06c0da9020" loc="44:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1141" name="_CS_POSIX_V7_LP64_OFF64_LDFLAGS" ref="0x7f06c0d671f0" loc="658:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDB0" ref="0x7f06c1866330" loc="1148:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDC2" ref="0x7f06c1862950" loc="1176:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDD4" ref="0x7f06c185d020" loc="1204:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDE6" ref="0x7f06c1859660" loc="1232:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF1B" ref="0x7f06c18a7c80" loc="793:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC3B" ref="0x7f06c1888680" loc="933:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PE1" ref="0x7f06c185ac20" loc="1227:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE1A" ref="0x7f06c18a8020" loc="782:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPR0" ref="0x7f06c1881640" loc="980:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PF3" ref="0x7f06c1855320" loc="1255:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1139" name="_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS" ref="0x7f06c0d68ac0" loc="654:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1109" name="_CS_XBS5_LP64_OFF64_LDFLAGS" ref="0x7f06c0d70be0" loc="592:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="_PC_REC_INCR_XFER_SIZE" ref="0x7f06c0da8190" loc="56:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:237" name="_SC_V7_ILP32_OFF32" ref="0x7f06c0d7b020" loc="504:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC0" ref="0x7f06c1879020" loc="1030:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:89" name="_SC_XOPEN_VERSION" ref="0x7f06c0d93310" loc="265:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ACSR" ref="0x7f06c18d6ba0" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:102" name="_SC_CHAR_MAX" ref="0x7f06c0d91990" loc="294:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCW" ref="0x7f06c18d7390" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="ATM128_ETIMSK" ref="0x7f06c18c5ac0" loc="264:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="XDIV6" ref="0x7f06c18b2020" loc="718:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:100" name="ATM128_DDRG" ref="0x7f06c18c9a80" loc="216:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE3" ref="0x7f06c18a5340" loc="802:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINF1" ref="0x7f06c1852ca0" loc="1277:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PING3" ref="0x7f06c184f680" loc="1296:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CSMA_SLOT" ref="0x7f06c1529020" loc="6:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcher.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="LEDS_LED7" ref="0x7f06c14fc530" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWS5" ref="0x7f06c18b6c90" loc="696:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS21" ref="0x7f06c189c640" loc="860:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINA5" ref="0x7f06c186a020" loc="1123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:112" name="ATM128_TWBR" ref="0x7f06c18c7720" loc="238:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:67" name="SERIAL_PROTO_ACK" ref="0x7f06c19d7020" loc="92:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="ATM128_OCR1B" ref="0x7f06c18cf3a0" loc="139:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINB7" ref="0x7f06c1866670" loc="1151:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="_SC_RE_DUP_MAX" ref="0x7f06c0d9d5b0" loc="167:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:39" name="_SC_BC_STRING_MAX" ref="0x7f06c0d9e600" loc="157:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:109" name="_SC_NZERO" ref="0x7f06c0d90dc0" loc="308:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:116" name="_SC_UINT_MAX" ref="0x7f06c0d8d2e0" loc="322:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PA5" ref="0x7f06c186ec50" loc="1103:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1" ref="0x7f06c18d08c0" loc="134:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="_PC_REC_MIN_XFER_SIZE" ref="0x7f06c0da87d0" loc="60:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_INT_FLAG_OFF" ref="0x7f06c182a410" loc="130:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDA1" ref="0x7f06c186b330" loc="1117:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDB3" ref="0x7f06c1867950" loc="1145:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDC5" ref="0x7f06c1862020" loc="1173:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDD7" ref="0x7f06c185e650" loc="1201:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_FREE_RUNNING_ON" ref="0x7f06c182bd90" loc="125:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_MIN_TRACE" ref="0x7f06c1bf9990" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3BL" ref="0x7f06c18c3710" loc="278:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC10" ref="0x7f06c18b09d0" loc="735:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINF6" ref="0x7f06c1853ca0" loc="1272:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDF2" ref="0x7f06c1853020" loc="1266:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDG4" ref="0x7f06c1850350" loc="1288:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1115" name="_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS" ref="0x7f06c0d6e1f0" loc="604:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1125" name="_CS_POSIX_V6_LP64_OFF64_LDFLAGS" ref="0x7f06c0d6b710" loc="625:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS02" ref="0x7f06c189e970" loc="849:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM00" ref="0x7f06c189fc70" loc="845:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM12" ref="0x7f06c188b660" loc="912:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_POWER_IDLE" ref="0x7f06c183a9e0" loc="121:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COMB0" ref="0x7f06c1891340" loc="873:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ERESERVE" ref="0x7f06c1eaa3b0" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="_SC_C_LANG_SUPPORT_R" ref="0x7f06c0d8ae80" loc="366:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:185" name="_SC_LEVEL1_ICACHE_SIZE" ref="0x7f06c0d7f610" loc="467:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE1" ref="0x7f06c187bc90" loc="1022:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_ADC_DIFF_ADC01_1x" ref="0x7f06c1833360" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="ATM128_UBRR0H" ref="0x7f06c18c1e60" loc="301:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:154" name="ATM128_UCSR1B" ref="0x7f06c18c0cd0" loc="313:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:160" name="_SC_SPORADIC_SERVER" ref="0x7f06c0d856e0" loc="414:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_ISblank" ref="0x7f06c1de6110" loc="58:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE" ref="0x7f06c1878990" loc="1040:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ADIE" ref="0x7f06c1870020" loc="1085:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="JTD" ref="0x7f06c18a2c70" loc="826:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_ENABLE_OFF" ref="0x7f06c182c660" loc="112:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:109" name="ATM128_XMCRA" ref="0x7f06c18c7020" loc="232:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM3C1" ref="0x7f06c188e980" loc="894:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIF" ref="0x7f06c1883670" loc="968:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:161" name="_SC_THREAD_SPORADIC_SERVER" ref="0x7f06c0d85a30" loc="416:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SRE" ref="0x7f06c18a3020" loc="815:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_PINC" ref="0x7f06c18d3390" loc="87:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SRW01" ref="0x7f06c18b4650" loc="706:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:41" name="_SC_EQUIV_CLASS_MAX" ref="0x7f06c0d9ec10" loc="161:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINC1" ref="0x7f06c1860660" loc="1187:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PIND3" ref="0x7f06c185cca0" loc="1215:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINE5" ref="0x7f06c1857340" loc="1243:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:56" name="ATM128_EIFR" ref="0x7f06c18cba80" loc="185:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TDMA_SLOT" ref="0x7f06c152cb50" loc="5:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcher.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:53" name="ATM128_MCUCR" ref="0x7f06c18cb020" loc="176:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:165" name="_SC_TYPED_MEMORY_OBJECTS" ref="0x7f06c0d836b0" loc="424:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCDR0" ref="0x7f06c1885070" loc="950:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="_SC_AIO_LISTIO_MAX" ref="0x7f06c0da1660" loc="121:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:64" name="_SC_PII_OSI_CLTS" ref="0x7f06c0d983a0" loc="211:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="_SC_AIO_MAX" ref="0x7f06c0da1910" loc="123:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3" ref="0x7f06c18c28d0" loc="287:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_SNGL_ADC2" ref="0x7f06c18364b0" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_ADC_DIFF_ADC32_200x" ref="0x7f06c1833020" loc="65:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_PRESCALE_4" ref="0x7f06c182ead0" loc="98:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDE1" ref="0x7f06c1858640" loc="1237:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:169" name="_SC_2_PBS_ACCOUNTING" ref="0x7f06c0d82330" loc="432:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:49" name="ATM128_OCR0" ref="0x7f06c18cde20" loc="163:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ISC50" ref="0x7f06c18ae390" loc="745:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:39" name="ATM128_ICR1H" ref="0x7f06c18cf020" loc="136:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3L" ref="0x7f06c18c41d0" loc="268:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:61" name="_SC_PII_INTERNET_STREAM" ref="0x7f06c0d9aa50" loc="205:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:49" name="_SC_2_FORT_DEV" ref="0x7f06c0d9c410" loc="178:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INTF1" ref="0x7f06c18a9020" loc="775:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="EINVAL" ref="0x7f06c1f1acf0" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_ADC_DIFF_ADC10_200x" ref="0x7f06c18341e0" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_ADC_DIFF_ADC22_200x" ref="0x7f06c1834bb0" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN" ref="0x7f06c1bfb3d0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_ADC_DIFF_ADC12_1x" ref="0x7f06c18311b0" loc="75:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SE" ref="0x7f06c18a3940" loc="818:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ADSC" ref="0x7f06c1871660" loc="1082:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="OCDR5" ref="0x7f06c1886070" loc="945:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PB4" ref="0x7f06c1869c40" loc="1134:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PC6" ref="0x7f06c1864320" loc="1162:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:43" name="ATM128_OCR1AH" ref="0x7f06c18ce550" loc="146:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1CL" ref="0x7f06c18c6c20" loc="254:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:119" name="_SC_NL_ARGMAX" ref="0x7f06c0d8db50" loc="329:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_PINF" ref="0x7f06c18d8430" loc="27:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_DDRB" ref="0x7f06c18d21c0" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="LEDS_LED2" ref="0x7f06c14feb60" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:75" name="_SC_THREAD_STACK_MIN" ref="0x7f06c0d96630" loc="235:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:117" name="_SC_ULONG_MAX" ref="0x7f06c0d8d5b0" loc="324:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINA0" ref="0x7f06c1869020" loc="1128:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINB2" ref="0x7f06c1865660" loc="1156:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINC4" ref="0x7f06c1861cc0" loc="1184:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PIND6" ref="0x7f06c185c340" loc="1212:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ICES1" ref="0x7f06c188b020" loc="910:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWPS0" ref="0x7f06c18b5970" loc="700:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:70" name="_SC_GETPW_R_SIZE_MAX" ref="0x7f06c0d97640" loc="225:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:112" name="_SC_SCHAR_MIN" ref="0x7f06c0d8f650" loc="314:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN" ref="0x7f06c1877640" loc="1044:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1124" name="_CS_POSIX_V6_LP64_OFF64_CFLAGS" ref="0x7f06c0d6b390" loc="623:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ01" ref="0x7f06c187d340" loc="1005:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PA0" ref="0x7f06c186dc20" loc="1108:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL1" ref="0x7f06c187f020" loc="992:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="INTF6" ref="0x7f06c18aa020" loc="770:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWA1" ref="0x7f06c18b7c60" loc="689:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC1" ref="0x7f06c187b970" loc="1021:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COM1C1" ref="0x7f06c188f020" loc="884:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:74" name="_SC_THREAD_KEYS_MAX" ref="0x7f06c0d96320" loc="233:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:172" name="_SC_2_PBS_TRACK" ref="0x7f06c0d82bf0" loc="438:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:68" name="_SC_THREAD_SAFE_FUNCTIONS" ref="0x7f06c0d97020" loc="221:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="INT1" ref="0x7f06c18ab640" loc="765:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_SC_NGROUPS_MAX" ref="0x7f06c0da66d0" loc="81:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_ENABLE_ON" ref="0x7f06c182c970" loc="113:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1129" name="_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS" ref="0x7f06c0d6a590" loc="633:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM31" ref="0x7f06c188d020" loc="896:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1119" name="_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS" ref="0x7f06c0d6c060" loc="613:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS0" ref="0x7f06c189f620" loc="841:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:193" name="_SC_LEVEL2_CACHE_LINESIZE" ref="0x7f06c0d7d060" loc="483:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE1" ref="0x7f06c1876990" loc="1052:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1002" name="_CS_LFS_LIBS" ref="0x7f06c0d73930" loc="561:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:94" name="_SC_XOPEN_SHM" ref="0x7f06c0d922f0" loc="275:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-5" name="NOISE_MAX" ref="0x7f06c1bfb7e0" loc="45:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ACME" ref="0x7f06c1884970" loc="962:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:146" name="_SC_FILE_ATTRIBUTES" ref="0x7f06c0d88ba0" loc="386:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADCL" ref="0x7f06c18d7a30" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC1A" ref="0x7f06c1888ce0" loc="937:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PC0" ref="0x7f06c1863620" loc="1168:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PD2" ref="0x7f06c185fc20" loc="1196:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PE4" ref="0x7f06c185a320" loc="1224:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PF6" ref="0x7f06c1856960" loc="1252:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="_SC_RTSIG_MAX" ref="0x7f06c0da0e20" loc="138:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1118" name="_CS_POSIX_V6_ILP32_OFF32_LIBS" ref="0x7f06c0d6ec70" loc="611:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ADPS0" ref="0x7f06c1870980" loc="1088:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="_SC_SCHAR_MAX" ref="0x7f06c0d8f380" loc="312:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWA4" ref="0x7f06c18b7330" loc="686:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM0" ref="0x7f06c1880020" loc="985:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_ADC_DIFF_ADC21_1x" ref="0x7f06c18339e0" loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FP_NAN" ref="0x7f06c1df4a50" loc="200:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="_SC_VERSION" ref="0x7f06c0da0890" loc="133:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:139" name="ATM128_TCCR3A" ref="0x7f06c18c1740" loc="295:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:92" name="_SC_XOPEN_CRYPT" ref="0x7f06c0d93be0" loc="271:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="NOISE_DEFAULT_ELEMENT_SIZE" ref="0x7f06c1bf9260" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="ATM128_PORTC" ref="0x7f06c18d3a80" loc="93:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB80" ref="0x7f06c1873340" loc="1067:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINE0" ref="0x7f06c1856340" loc="1248:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS00" ref="0x7f06c189d020" loc="851:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ITIMER_VIRTUAL" ref="0x7f06c1c06400" loc="99:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS12" ref="0x7f06c188b970" loc="913:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65" name="_SC_PII_OSI_M" ref="0x7f06c0d98670" loc="213:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:105" name="_SC_INT_MIN" ref="0x7f06c0d902d0" loc="300:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:182" name="_SC_TRACE_EVENT_FILTER" ref="0x7f06c0d80bd0" loc="460:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1147" name="_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS" ref="0x7f06c0d5d770" loc="670:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:195" name="_SC_LEVEL3_CACHE_ASSOC" ref="0x7f06c0d7d6a0" loc="487:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="MAXSIBLINGS" ref="0x7f06c19626c0" loc="13:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC" ref="0x7f06c188d670" loc="900:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE0" ref="0x7f06c1874660" loc="1063:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="ATM128_XDIV" ref="0x7f06c18ca8c0" loc="197:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:144" name="_SC_FIFO" ref="0x7f06c0d88600" loc="382:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDA4" ref="0x7f06c186c950" loc="1114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDB6" ref="0x7f06c1867020" loc="1142:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_PC_MAX_INPUT" ref="0x7f06c0dabe30" loc="32:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPMEN" ref="0x7f06c18ac070" loc="756:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC01" ref="0x7f06c18b0cf0" loc="736:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:158" name="_SC_SIGNALS" ref="0x7f06c0d85140" loc="410:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDF5" ref="0x7f06c1854640" loc="1263:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="BLBSET" ref="0x7f06c18ad6b0" loc="753:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PGWRT" ref="0x7f06c18ad9d0" loc="754:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOCC" ref="0x7f06c1888020" loc="929:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COMA1" ref="0x7f06c18929a0" loc="870:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="ATM128_OSCCAL" ref="0x7f06c18c73b0" loc="235:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:73" name="_SC_THREAD_DESTRUCTOR_ITERATIONS" ref="0x7f06c0d96020" loc="231:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:78" name="_SC_THREAD_ATTR_STACKSIZE" ref="0x7f06c0d95020" loc="241:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:79" name="_SC_THREAD_PRIORITY_SCHEDULING" ref="0x7f06c0d95390" loc="243:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="AS0" ref="0x7f06c189cc70" loc="864:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="UPM10" ref="0x7f06c187f660" loc="994:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:135" name="_SC_C_LANG_SUPPORT" ref="0x7f06c0d8ab70" loc="364:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:179" name="_SC_V6_LPBIG_OFFBIG" ref="0x7f06c0d80320" loc="453:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:98" name="ATM128_PORTF" ref="0x7f06c18c93a0" loc="210:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL1" ref="0x7f06c187e340" loc="998:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN1" ref="0x7f06c1875340" loc="1055:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ACBG" ref="0x7f06c1873c90" loc="1072:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE0" ref="0x7f06c18a8980" loc="785:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF3A" ref="0x7f06c18a4020" loc="808:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="SM0" ref="0x7f06c18a2020" loc="820:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PG0" ref="0x7f06c1850020" loc="1285:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1100" name="_CS_XBS5_ILP32_OFF32_CFLAGS" ref="0x7f06c0d72cd0" loc="574:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:149" name="ATM128_UCSR0C" ref="0x7f06c18c0220" loc="304:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:45" name="ATM128_TCNT1H" ref="0x7f06c18cd020" loc="151:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:136" name="ATM128_TCNT3L" ref="0x7f06c18c2c40" loc="288:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDE" ref="0x7f06c18856a0" loc="954:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ADFR" ref="0x7f06c1871970" loc="1083:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:85" name="_SC_PHYS_PAGES" ref="0x7f06c0d94690" loc="256:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="MUX1" ref="0x7f06c186e020" loc="1097:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_ADC_DIFF_ADC02_1x" ref="0x7f06c1832db0" loc="74:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADC_PRESCALE_32" ref="0x7f06c182d4b0" loc="101:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="FP_ZERO" ref="0x7f06c1df3020" loc="204:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM3A0" ref="0x7f06c188e020" loc="891:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="AM_TESTNETWORKMSG" ref="0x7f06c25c7da0" loc="6:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XDIV1" ref="0x7f06c18b1020" loc="723:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="MAXCHILDREN" ref="0x7f06c1962370" loc="12:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ2" ref="0x7f06c1877c70" loc="1046:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="ATM128_OCR3A" ref="0x7f06c18c3e00" loc="282:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:100" name="_SC_XOPEN_XPG4" ref="0x7f06c0d91410" loc="289:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:142" name="_SC_DEVICE_SPECIFIC_R" ref="0x7f06c0d880b0" loc="378:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1101" name="_CS_XBS5_ILP32_OFF32_LDFLAGS" ref="0x7f06c0d71060" loc="576:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:156" name="ATM128_UDR1" ref="0x7f06c18bf420" loc="319:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDG1" ref="0x7f06c1850c80" loc="1291:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1105" name="_CS_XBS5_ILP32_OFFBIG_LDFLAGS" ref="0x7f06c0d71de0" loc="584:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="FALSE" ref="0x7f06c1d1a590" loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="EBUSY" ref="0x7f06c1f1a9d0" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1123" name="_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS" ref="0x7f06c0d6b020" loc="621:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:151" name="_SC_SINGLE_PROCESS" ref="0x7f06c0d87bf0" loc="396:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:155" name="_SC_REGEXP" ref="0x7f06c0d868d0" loc="404:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32768" name="ATM128_TIMER0_TICKSPPS" ref="0x7f06c1824020" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:87" name="_SC_ATEXIT_MAX" ref="0x7f06c0d94c50" loc="260:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:122" name="_SC_NL_NMAX" ref="0x7f06c0d8c3f0" loc="335:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:114" name="_SC_SHRT_MIN" ref="0x7f06c0d8fbd0" loc="318:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:197" name="_SC_LEVEL4_CACHE_SIZE" ref="0x7f06c0d7dd00" loc="491:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDC0" ref="0x7f06c1861020" loc="1178:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDD2" ref="0x7f06c185d640" loc="1206:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDE4" ref="0x7f06c1859c80" loc="1234:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:30" name="CHANNEL_BANDGAP" ref="0x7f06c18257b0" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:236" name="_SC_RAW_SOCKETS" ref="0x7f06c0d7cc30" loc="501:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCIE3C" ref="0x7f06c18a5660" loc="803:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ISC41" ref="0x7f06c18ae6b0" loc="746:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:150" name="_SC_MULTI_PROCESS" ref="0x7f06c0d878f0" loc="394:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_XOPEN_" ref="0x7f06c1df2340" loc="295:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWGCE" ref="0x7f06c18b6340" loc="691:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CSB1" ref="0x7f06c188c640" loc="905:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1007" name="_CS_LFS64_LINTFLAGS" ref="0x7f06c0d728e0" loc="571:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MUX4" ref="0x7f06c186f650" loc="1094:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:129" name="_SC_XOPEN_LEGACY" ref="0x7f06c0d8b930" loc="351:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1135" name="_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS" ref="0x7f06c0d69b00" loc="646:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_POWER_EXT_STANDBY" ref="0x7f06c1839250" loc="123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR0" ref="0x7f06c1879c60" loc="1034:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PB7" ref="0x7f06c1869340" loc="1131:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOIE1" ref="0x7f06c18a8660" loc="784:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="DEFAULT_CHANNEL_SIZE" ref="0x7f06c1cdf7a0" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_DDRE" ref="0x7f06c18d8b10" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PING1" ref="0x7f06c184fcc0" loc="1298:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="LEDS_LED5" ref="0x7f06c14fda90" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:54" name="_SC_PII_XTI" ref="0x7f06c0d9b2d0" loc="189:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1005" name="_CS_LFS64_LDFLAGS" ref="0x7f06c0d72310" loc="567:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1113" name="_CS_XBS5_LPBIG_OFFBIG_LDFLAGS" ref="0x7f06c0d6fa60" loc="600:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWS3" ref="0x7f06c18b5330" loc="698:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="SRL1" ref="0x7f06c18b4020" loc="704:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:116" name="ATM128_TWCR" ref="0x7f06c18c6530" loc="250:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS31" ref="0x7f06c1889330" loc="923:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINA3" ref="0x7f06c186a660" loc="1125:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINB5" ref="0x7f06c1866cb0" loc="1153:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINC7" ref="0x7f06c1861360" loc="1181:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="CPOL" ref="0x7f06c1882c50" loc="977:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SPE" ref="0x7f06c1882320" loc="974:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PA3" ref="0x7f06c186d320" loc="1105:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="_PC_REC_MAX_XFER_SIZE" ref="0x7f06c0da84b0" loc="58:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="ATM128_ADC_DIFF_ADC11_1x" ref="0x7f06c18336a0" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COM1A0" ref="0x7f06c1890680" loc="881:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:115" name="ATM128_TWDR" ref="0x7f06c18c61c0" loc="247:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:106" name="_SC_LONG_BIT" ref="0x7f06c0d90590" loc="302:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INT4" ref="0x7f06c18accd0" loc="762:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="ATM128_OCR3CL" ref="0x7f06c18c4c20" loc="273:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:135" name="ATM128_OCR3AH" ref="0x7f06c18c2550" loc="284:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC20" ref="0x7f06c18b0390" loc="733:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINF4" ref="0x7f06c1852340" loc="1274:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1122" name="_CS_POSIX_V6_ILP32_OFFBIG_LIBS" ref="0x7f06c0d6caf0" loc="619:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:43" name="_SC_LINE_MAX" ref="0x7f06c0d9d2e0" loc="165:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:113" name="_SC_SHRT_MAX" ref="0x7f06c0d8f910" loc="316:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM10" ref="0x7f06c188f980" loc="887:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_SNGL_ADC6" ref="0x7f06c1835180" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="XMM1" ref="0x7f06c18b3640" loc="713:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:180" name="_SC_HOST_NAME_MAX" ref="0x7f06c0d80610" loc="456:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COMC0" ref="0x7f06c1891980" loc="875:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="NOISE_QUANTIZE_INTERVAL" ref="0x7f06c1bfa070" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:177" name="_SC_V6_ILP32_OFFBIG" ref="0x7f06c0d81be0" loc="449:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:93" name="_SC_XOPEN_ENH_I18N" ref="0x7f06c0d92020" loc="273:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PB1" ref="0x7f06c1868620" loc="1137:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PC3" ref="0x7f06c1864c20" loc="1165:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_ISpunct" ref="0x7f06c1de5e30" loc="60:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="WDP2" ref="0x7f06c18859b0" loc="955:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PD5" ref="0x7f06c185f320" loc="1193:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PE7" ref="0x7f06c185b980" loc="1221:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:152" name="ATM128_UBRR1H" ref="0x7f06c18c05b0" loc="307:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM01" ref="0x7f06c189e020" loc="846:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUSR" ref="0x7f06c18cc8d0" loc="172:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE3" ref="0x7f06c18a6980" loc="799:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WDRF" ref="0x7f06c18a1330" loc="828:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM0" ref="0x7f06c18a0330" loc="835:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RWWSRE" ref="0x7f06c18ad390" loc="752:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE" ref="0x7f06c1877020" loc="1042:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INT7" ref="0x7f06c18ac3a0" loc="759:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="_SC_2_C_DEV" ref="0x7f06c0d9c140" loc="176:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16384" name="_ISprint" ref="0x7f06c1de8460" loc="56:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE0" ref="0x7f06c1879950" loc="1033:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SRW11" ref="0x7f06c18b4c90" loc="708:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="ATM128_PINA" ref="0x7f06c18d28b0" loc="105:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS1" ref="0x7f06c187f980" loc="995:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PIND1" ref="0x7f06c185b340" loc="1217:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINE3" ref="0x7f06c1857980" loc="1245:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TWSTA" ref="0x7f06c18bac10" loc="677:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="_PC_PIPE_BUF" ref="0x7f06c0daa6b0" loc="38:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:247" name="_SC_THREAD_ROBUST_PRIO_INHERIT" ref="0x7f06c0d78020" loc="528:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:134" name="_SC_BASE" ref="0x7f06c0d8a870" loc="362:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TWIE" ref="0x7f06c18b8950" loc="681:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="_SC_2_FORT_RUN" ref="0x7f06c0d9c6e0" loc="180:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="_SC_MESSAGE_PASSING" ref="0x7f06c0da2be0" loc="115:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1132" name="_CS_POSIX_V7_ILP32_OFF32_CFLAGS" ref="0x7f06c0d69060" loc="640:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:156" name="_SC_REGEX_VERSION" ref="0x7f06c0d86bc0" loc="406:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1" ref="0x7f06c18ce8d0" loc="149:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_SNGL_ADC0" ref="0x7f06c1837e50" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_PRESCALE_2" ref="0x7f06c182e490" loc="96:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDA7" ref="0x7f06c186c020" loc="1111:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1108" name="_CS_XBS5_LP64_OFF64_CFLAGS" ref="0x7f06c0d70890" loc="590:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="CHANNEL_GND" ref="0x7f06c1825b00" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1001" name="_CS_LFS_LDFLAGS" ref="0x7f06c0d73670" loc="559:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ISC60" ref="0x7f06c18afd10" loc="743:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="REFS1" ref="0x7f06c1870cc0" loc="1091:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_ADC_DIFF_ADC00_200x" ref="0x7f06c1835e60" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:153" name="_SC_READER_WRITER_LOCKS" ref="0x7f06c0d86350" loc="400:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE0" ref="0x7f06c1874020" loc="1061:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="_PC_ALLOC_SIZE_MIN" ref="0x7f06c0da8dd0" loc="64:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_PRESCALE_128" ref="0x7f06c182db00" loc="103:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="_SC_JOB_CONTROL" ref="0x7f06c0da5300" loc="89:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="_SC_MQ_OPEN_MAX" ref="0x7f06c0da0300" loc="129:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:23" name="ATM128_ADC_DIFF_ADC71_1x" ref="0x7f06c1832a70" loc="73:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:246" name="_SC_XOPEN_STREAMS" ref="0x7f06c0d7ac40" loc="525:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:122" name="ATM128_TCCR1C" ref="0x7f06c18c53b0" loc="258:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCDR3" ref="0x7f06c18866b0" loc="947:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PB2" ref="0x7f06c1868320" loc="1136:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM01" ref="0x7f06c187e9a0" loc="1002:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:41" name="ATM128_OCR1BH" ref="0x7f06c18cfa80" loc="141:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PC4" ref="0x7f06c1864920" loc="1164:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PD6" ref="0x7f06c185f020" loc="1192:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_POSIX_" ref="0x7f06c1df25d0" loc="296:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:127" name="_SC_XBS5_LP64_OFF64" ref="0x7f06c0d8b320" loc="346:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:82" name="_SC_THREAD_PROCESS_SHARED" ref="0x7f06c0d95d30" loc="249:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOV2" ref="0x7f06c18a7330" loc="790:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PF1" ref="0x7f06c1855920" loc="1257:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PG3" ref="0x7f06c1851640" loc="1282:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:98" name="_SC_XOPEN_XPG2" ref="0x7f06c0d92e20" loc="285:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:238" name="CL_TEST" ref="0x7f06c19638c0" loc="9:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ11" ref="0x7f06c187fca0" loc="996:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:184" name="_SC_TRACE_LOG" ref="0x7f06c0d7f2f0" loc="464:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="_PC_NO_TRUNC" ref="0x7f06c0daac80" loc="42:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:239" name="_SC_V7_LP64_OFF64" ref="0x7f06c0d7b610" loc="508:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="INTF4" ref="0x7f06c18aa660" loc="772:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_SPCR" ref="0x7f06c18d5e20" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="XDIV4" ref="0x7f06c18b2660" loc="720:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_SC_CLK_TCK" ref="0x7f06c0da63f0" loc="79:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC" ref="0x7f06c187c020" loc="1011:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TWEN" ref="0x7f06c18b8640" loc="680:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="_PC_SYNC_IO" ref="0x7f06c0da92d0" loc="46:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:58" name="_SC_POLL" ref="0x7f06c0d9bde0" loc="197:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:48" name="ATM128_ASSR" ref="0x7f06c18cdab0" loc="160:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:62" name="_SC_PII_INTERNET_DGRAM" ref="0x7f06c0d9ad70" loc="207:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_POWER_SAVE" ref="0x7f06c18395e0" loc="124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="__codecvt_error" ref="0x7f06c1db2870" loc="210:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1127" name="_CS_POSIX_V6_LP64_OFF64_LINTFLAGS" ref="0x7f06c0d6be00" loc="629:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDB1" ref="0x7f06c1866020" loc="1147:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDC3" ref="0x7f06c1862640" loc="1175:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDD5" ref="0x7f06c185ec70" loc="1203:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDE7" ref="0x7f06c1859350" loc="1231:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCF1C" ref="0x7f06c18a4c90" loc="812:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="FOC3C" ref="0x7f06c18889a0" loc="934:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PD0" ref="0x7f06c185e320" loc="1198:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE1B" ref="0x7f06c18a8340" loc="783:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SPR1" ref="0x7f06c1881330" loc="979:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PE2" ref="0x7f06c185a920" loc="1226:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PF4" ref="0x7f06c1855020" loc="1254:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="ATM128_WDTCR" ref="0x7f06c18d1740" loc="119:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN0" ref="0x7f06c1874980" loc="1064:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CHANNEL_THERMISTOR" ref="0x7f06c1825020" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL" ref="0x7f06c1881980" loc="983:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="_SC_SEM_NSEMS_MAX" ref="0x7f06c0d9f160" loc="140:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:118" name="_SC_USHRT_MAX" ref="0x7f06c0d8d880" loc="326:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM20" ref="0x7f06c189dcb0" loc="857:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:124" name="_SC_NL_TEXTMAX" ref="0x7f06c0d8c990" loc="339:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XMBK" ref="0x7f06c18b3020" loc="711:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC1" ref="0x7f06c187b660" loc="1020:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="AM_TESTNETWORKMSGG" ref="0x7f06c1963210" loc="7:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:248" name="_SC_THREAD_ROBUST_PRIO_PROTECT" ref="0x7f06c0d783b0" loc="530:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF3" ref="0x7f06c18a5cb0" loc="807:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:57" name="ATM128_EIMSK" ref="0x7f06c18cbe00" loc="188:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ENOMEM" ref="0x7f06c1eaaa10" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_CS_GNU_LIBC_VERSION" ref="0x7f06c0d74500" loc="544:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_PORTA" ref="0x7f06c18d1020" loc="111:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWS6" ref="0x7f06c18b6980" loc="695:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS22" ref="0x7f06c189c330" loc="859:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS10" ref="0x7f06c188a020" loc="915:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC3" ref="0x7f06c188a360" loc="918:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ACIS0" ref="0x7f06c1871020" loc="1078:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINA6" ref="0x7f06c186bca0" loc="1122:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="ATM128_OCR1C" ref="0x7f06c18c68b0" loc="253:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:181" name="_SC_TRACE" ref="0x7f06c0d808b0" loc="458:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:60" name="_SC_UIO_MAXIOV" ref="0x7f06c0d9a380" loc="201:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="ATM128_ADC_DIFF_ADC32_10x" ref="0x7f06c1834860" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:106" name="ATM128_EICRA" ref="0x7f06c18c88c0" loc="226:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="__codecvt_partial" ref="0x7f06c1db2590" loc="209:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ACI" ref="0x7f06c1872320" loc="1074:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE" ref="0x7f06c187c330" loc="1012:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PA6" ref="0x7f06c186e950" loc="1102:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:25" name="_SC_AIO_PRIO_DELTA_MAX" ref="0x7f06c0da1c30" loc="125:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:69" name="SERIAL_PROTO_PACKET_NOACK" ref="0x7f06c19d77d0" loc="94:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:176" name="_SC_V6_ILP32_OFF32" ref="0x7f06c0d818e0" loc="447:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="CHANNEL_BATTERY" ref="0x7f06c1825430" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDA2" ref="0x7f06c186b020" loc="1116:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDB4" ref="0x7f06c1867640" loc="1144:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDC6" ref="0x7f06c1863c60" loc="1172:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:147" name="_SC_FILE_LOCKING" ref="0x7f06c0d87020" loc="388:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1000" name="_CS_LFS_CFLAGS" ref="0x7f06c0d73390" loc="557:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="_PC_SOCK_MAXBUF" ref="0x7f06c0da9b20" loc="52:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC11" ref="0x7f06c18b06b0" loc="734:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINF7" ref="0x7f06c1853980" loc="1271:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDF3" ref="0x7f06c1854c60" loc="1265:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_PRESCALE_2b" ref="0x7f06c182e7b0" loc="97:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="XDIVEN" ref="0x7f06c18b3c90" loc="717:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOCA" ref="0x7f06c1889970" loc="927:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM01" ref="0x7f06c189e660" loc="848:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="WGM13" ref="0x7f06c188b340" loc="911:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:157" name="_SC_SHELL" ref="0x7f06c0d86e60" loc="408:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:125" name="_SC_XBS5_ILP32_OFF32" ref="0x7f06c0d8cca0" loc="342:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="_SC_CLOCK_SELECTION" ref="0x7f06c0d891a0" loc="368:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:189" name="_SC_LEVEL1_DCACHE_ASSOC" ref="0x7f06c0d7e350" loc="475:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1143" name="_CS_POSIX_V7_LP64_OFF64_LINTFLAGS" ref="0x7f06c0d678e0" loc="662:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COMB1" ref="0x7f06c1891020" loc="872:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ELAST" ref="0x7f06c1e2e0d0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE" ref="0x7f06c187cc30" loc="1015:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="IVSEL" ref="0x7f06c18a2640" loc="822:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:27" name="ATM128_ADC_DIFF_ADC32_1x" ref="0x7f06c1831830" loc="77:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1103" name="_CS_XBS5_ILP32_OFF32_LINTFLAGS" ref="0x7f06c0d71710" loc="580:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ACIC" ref="0x7f06c1872940" loc="1076:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="_SC_SYNCHRONIZED_IO" ref="0x7f06c0da4920" loc="103:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:86" name="_SC_AVPHYS_PAGES" ref="0x7f06c0d94980" loc="258:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:67" name="_SC_THREADS" ref="0x7f06c0d98c10" loc="219:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:191" name="_SC_LEVEL2_CACHE_SIZE" ref="0x7f06c0d7e9c0" loc="479:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="_SC_MEMLOCK_RANGE" ref="0x7f06c0da25c0" loc="111:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ATM128_UCSR0A" ref="0x7f06c18d5740" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:157" name="ATM128_UCSR1C" ref="0x7f06c18bf7b0" loc="322:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1138" name="_CS_POSIX_V7_ILP32_OFFBIG_LIBS" ref="0x7f06c0d68720" loc="652:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TSM" ref="0x7f06c1884340" loc="960:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PUD" ref="0x7f06c1884c70" loc="963:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DORD" ref="0x7f06c1882630" loc="975:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ADIF" ref="0x7f06c1871c80" loc="1084:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_START_CONVERSION_OFF" ref="0x7f06c182b070" loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:77" name="_SC_THREAD_ATTR_STACKADDR" ref="0x7f06c0d96c90" loc="239:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:91" name="_SC_XOPEN_UNIX" ref="0x7f06c0d93900" loc="269:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB8" ref="0x7f06c1876330" loc="1048:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1137" name="_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS" ref="0x7f06c0d683b0" loc="650:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1149" name="_CS_V7_ENV" ref="0x7f06c0d5dcf0" loc="675:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:108" name="ATM128_XMCRB" ref="0x7f06c18c8c40" loc="229:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_PC_NAME_MAX" ref="0x7f06c0daa130" loc="34:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM3B0" ref="0x7f06c188e660" loc="893:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="JTRF" ref="0x7f06c18a1020" loc="827:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_CS_V5_WIDTH_RESTRICTED_ENVS" ref="0x7f06c0d74bb0" loc="549:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1004" name="_CS_LFS64_CFLAGS" ref="0x7f06c0d72020" loc="565:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:16" name="ATM128_PIND" ref="0x7f06c18d48a0" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="LEDS_LED0" ref="0x7f06c14fe180" loc="33:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINB0" ref="0x7f06c1865ca0" loc="1158:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="OCF2" ref="0x7f06c18a7020" loc="789:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM0" ref="0x7f06c18a0950" loc="837:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINC2" ref="0x7f06c1860340" loc="1186:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PIND4" ref="0x7f06c185c980" loc="1214:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ0" ref="0x7f06c1880970" loc="988:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINE6" ref="0x7f06c1857020" loc="1242:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="_PC_PRIO_IO" ref="0x7f06c0da9840" loc="50:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPMIE" ref="0x7f06c18aed10" loc="750:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCDR1" ref="0x7f06c1886cf0" loc="949:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_SC_CHILD_MAX" ref="0x7f06c0da6140" loc="77:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:13" name="_PC_FILESIZEBITS" ref="0x7f06c0da9e10" loc="54:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:47" name="_SC_2_C_BIND" ref="0x7f06c0d9de60" loc="174:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_SNGL_ADC3" ref="0x7f06c18367c0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PSR0" ref="0x7f06c1883020" loc="964:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WCOL" ref="0x7f06c1883980" loc="969:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDD0" ref="0x7f06c185dc60" loc="1208:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDE2" ref="0x7f06c1858330" loc="1236:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1145" name="_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS" ref="0x7f06c0d5d060" loc="666:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCIE3A" ref="0x7f06c18a6ca0" loc="800:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_ISOC_" ref="0x7f06c1df2870" loc="297:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ISC51" ref="0x7f06c18ae070" loc="744:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X0" ref="0x7f06c1878330" loc="1036:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1144" name="_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS" ref="0x7f06c0d67c70" loc="664:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:113" name="ATM128_TWSR" ref="0x7f06c18c7a90" loc="241:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:88" name="_SC_PASS_MAX" ref="0x7f06c0d93020" loc="262:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:123" name="_SC_NL_SETMAX" ref="0x7f06c0d8c6c0" loc="337:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="MUX2" ref="0x7f06c186fc70" loc="1096:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:139" name="_SC_THREAD_CPUTIME" ref="0x7f06c0d89750" loc="372:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="_PC_ASYNC_IO" ref="0x7f06c0da9590" loc="48:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="_PC_SYMLINK_MAX" ref="0x7f06c0da7150" loc="66:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:238" name="_SC_V7_ILP32_OFFBIG" ref="0x7f06c0d7b320" loc="506:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="_SC_FSYNC" ref="0x7f06c0da4bc0" loc="105:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="OCDR6" ref="0x7f06c1887d00" loc="944:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="_SC_SAVED_IDS" ref="0x7f06c0da55d0" loc="91:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TXB80" ref="0x7f06c1873660" loc="1068:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PB5" ref="0x7f06c1869940" loc="1133:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PC7" ref="0x7f06c1864020" loc="1161:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_DDRC" ref="0x7f06c18d3700" loc="90:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:99" name="ATM128_PING" ref="0x7f06c18c9710" loc="213:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="LEDS_LED3" ref="0x7f06c14fd0b0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:121" name="_SC_NL_MSGMAX" ref="0x7f06c0d8c140" loc="333:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE" ref="0x7f06c1878cb0" loc="1041:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="__codecvt_ok" ref="0x7f06c1db22a0" loc="208:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWPS1" ref="0x7f06c18b5650" loc="699:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINA1" ref="0x7f06c186aca0" loc="1127:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINB3" ref="0x7f06c1865340" loc="1155:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINC5" ref="0x7f06c18619a0" loc="1183:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PIND7" ref="0x7f06c185c020" loc="1211:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:138" name="_SC_CPUTIME" ref="0x7f06c0d89450" loc="370:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1003" name="_CS_LFS_LINTFLAGS" ref="0x7f06c0d73c20" loc="563:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ02" ref="0x7f06c1873020" loc="1066:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:166" name="_SC_USER_GROUPS" ref="0x7f06c0d83990" loc="426:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1106" name="_CS_XBS5_ILP32_OFFBIG_LIBS" ref="0x7f06c0d701c0" loc="586:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PA1" ref="0x7f06c186d920" loc="1107:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGMA0" ref="0x7f06c1890020" loc="877:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGMB2" ref="0x7f06c188c020" loc="903:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1142" name="_CS_POSIX_V7_LP64_OFF64_LIBS" ref="0x7f06c0d67550" loc="660:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="INTF7" ref="0x7f06c18abc90" loc="769:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TWA2" ref="0x7f06c18b7950" loc="688:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CHANNEL_RSSI" ref="0x7f06c1827af0" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/platforms/micaz/sim/platform_hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:245" name="_SC_TRACE_USER_EVENT_MAX" ref="0x7f06c0d7a950" loc="522:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_PRESCALE_8" ref="0x7f06c182edf0" loc="99:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1146" name="_CS_POSIX_V7_LPBIG_OFFBIG_LIBS" ref="0x7f06c0d5d3d0" loc="668:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TCR0UB" ref="0x7f06c1892660" loc="867:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="COM1B0" ref="0x7f06c1890cc0" loc="883:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:198" name="_SC_LEVEL4_CACHE_ASSOC" ref="0x7f06c0d7c060" loc="493:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INT2" ref="0x7f06c18ab330" loc="764:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:36" name="_SC_BC_BASE_MAX" ref="0x7f06c0d9fd10" loc="151:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:133" name="ATM128_OCR3BH" ref="0x7f06c18c3a80" loc="279:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC30" ref="0x7f06c18b1ce0" loc="731:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ITIMER_PROF" ref="0x7f06c1c06790" loc="103:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PINF2" ref="0x7f06c1852980" loc="1276:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PING4" ref="0x7f06c184f360" loc="1295:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_PRESCALE" ref="0x7f06c182de60" loc="107:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="_PC_CHOWN_RESTRICTED" ref="0x7f06c0daa9c0" loc="40:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:37" name="_SC_BC_DIM_MAX" ref="0x7f06c0d9e020" loc="153:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1102" name="_CS_XBS5_ILP32_OFF32_LIBS" ref="0x7f06c0d713a0" loc="578:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="WGM20" ref="0x7f06c189d670" loc="855:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM32" ref="0x7f06c188acc0" loc="921:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="ATM128_ADC_DIFF_ADC42_1x" ref="0x7f06c1831b70" loc="78:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC_SNGL_ADC4" ref="0x7f06c1836ad0" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:28" name="_SC_MQ_PRIO_MAX" ref="0x7f06c0da05e0" loc="131:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS1" ref="0x7f06c189f320" loc="840:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1AL" ref="0x7f06c18ce1e0" loc="145:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWINT" ref="0x7f06c18ba5e0" loc="675:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:32" name="ATM128_SFIOR" ref="0x7f06c18d13c0" loc="116:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:186" name="_SC_LEVEL1_ICACHE_ASSOC" ref="0x7f06c0d7f940" loc="469:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_SERIAL_CC1000_ID" ref="0x7f06c19d9a80" loc="85:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="_CS_GNU_LIBPTHREAD_VERSION" ref="0x7f06c0d74850" loc="546:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_ADC" ref="0x7f06c18d76e0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="_IScntrl" ref="0x7f06c1de5020" loc="59:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOC1B" ref="0x7f06c1887070" loc="938:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM" ref="0x7f06c187b330" loc="1017:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PC1" ref="0x7f06c1863320" loc="1167:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WDP0" ref="0x7f06c1884020" loc="957:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PD3" ref="0x7f06c185f920" loc="1195:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PE5" ref="0x7f06c185a020" loc="1223:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PF7" ref="0x7f06c1856660" loc="1251:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1121" name="_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS" ref="0x7f06c0d6c780" loc="617:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:173" name="_SC_SYMLOOP_MAX" ref="0x7f06c0d81020" loc="440:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ADPS1" ref="0x7f06c1870660" loc="1087:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWA5" ref="0x7f06c18b7020" loc="685:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="TICIE1" ref="0x7f06c18a9cc0" loc="781:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="EXTRF" ref="0x7f06c18a1960" loc="830:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM1" ref="0x7f06c1881c90" loc="984:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ" ref="0x7f06c1877950" loc="1045:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="ATM128_POWER_STANDBY" ref="0x7f06c1839990" loc="125:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="BORF" ref="0x7f06c18a1640" loc="829:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:138" name="ATM128_TCCR3B" ref="0x7f06c18c13b0" loc="292:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="BEACON_SLOT" ref="0x7f06c1529370" loc="7:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcher.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB81" ref="0x7f06c1875980" loc="1057:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:18" name="ATM128_PORTD" ref="0x7f06c18d3020" loc="84:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:154" name="_SC_SPIN_LOCKS" ref="0x7f06c0d86620" loc="402:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINE1" ref="0x7f06c1856020" loc="1247:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS01" ref="0x7f06c189ec80" loc="850:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PGERS" ref="0x7f06c18adcf0" loc="755:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1116" name="_CS_POSIX_V6_ILP32_OFF32_CFLAGS" ref="0x7f06c0d6e570" loc="607:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:141" name="_SC_DEVICE_SPECIFIC" ref="0x7f06c0d89d20" loc="376:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="__codecvt_noconv" ref="0x7f06c1db2b80" loc="211:/usr/include/libio.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:162" name="_SC_SYSTEM_DATABASE" ref="0x7f06c0d85d30" loc="418:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRIE1" ref="0x7f06c1876cb0" loc="1053:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ADEN" ref="0x7f06c1871350" loc="1081:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADMUX" ref="0x7f06c18d6830" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1148" name="_CS_V6_ENV" ref="0x7f06c0d5da20" loc="673:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4096" name="_ISxdigit" ref="0x7f06c1dea7d0" loc="54:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDA5" ref="0x7f06c186c640" loc="1113:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="TOS_AM_GROUP" ref="0x7f06c19df6f0" loc="27:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDB7" ref="0x7f06c1868c50" loc="1141:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1114" name="_CS_XBS5_LPBIG_OFFBIG_LIBS" ref="0x7f06c0d6fdb0" loc="602:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ISC70" ref="0x7f06c18af6d0" loc="741:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDF6" ref="0x7f06c1854330" loc="1262:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:137" name="ATM128_TCNT3H" ref="0x7f06c18c1020" loc="289:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:194" name="_SC_LEVEL3_CACHE_SIZE" ref="0x7f06c0d7d380" loc="485:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="_SC_EXPR_NEST_MAX" ref="0x7f06c0d9d020" loc="163:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_PC_LINK_MAX" ref="0x7f06c0dab890" loc="28:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:68" name="SERIAL_PROTO_PACKET_ACK" ref="0x7f06c19d73f0" loc="93:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1134" name="_CS_POSIX_V7_ILP32_OFF32_LIBS" ref="0x7f06c0d69760" loc="644:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1120" name="_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS" ref="0x7f06c0d6c3f0" loc="615:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:47" name="ATM128_TCCR1A" ref="0x7f06c18cd740" loc="157:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:63" name="ATM128_SREG" ref="0x7f06c18cac50" loc="202:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:163" name="_SC_SYSTEM_DATABASE_R" ref="0x7f06c0d830b0" loc="420:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UPM11" ref="0x7f06c187f340" loc="993:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:121" name="ATM128_OCR1CH" ref="0x7f06c18c5020" loc="255:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FP_NORMAL" ref="0x7f06c1df35a0" loc="208:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:512" name="_ISlower" ref="0x7f06c1dedc80" loc="51:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_START_CONVERSION_ON" ref="0x7f06c182b3e0" loc="119:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOS_SERIAL_ACTIVE_MESSAGE_ID" ref="0x7f06c19d96d0" loc="84:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:101" name="ATM128_PORTG" ref="0x7f06c18c9e00" loc="219:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCF3B" ref="0x7f06c18a4340" loc="809:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="SM1" ref="0x7f06c18a3c40" loc="819:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PG1" ref="0x7f06c1851c40" loc="1284:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="TOV0" ref="0x7f06c18a6640" loc="796:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="SAMPLE_RATE_KEY" ref="0x7f06c1963590" loc="8:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="ATM128_UBRR0L" ref="0x7f06c18d5020" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="INTF2" ref="0x7f06c18aaca0" loc="774:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ECANCEL" ref="0x7f06c1f1a3a0" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="FP_SUBNORMAL" ref="0x7f06c1df32e0" loc="206:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM3A1" ref="0x7f06c188fcc0" loc="890:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:15" name="ATM128_SPDR" ref="0x7f06c18d4530" loc="75:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XDIV2" ref="0x7f06c18b2ca0" loc="722:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="ATM128_ADC_VREF_2_56" ref="0x7f06c1838e30" loc="38:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR" ref="0x7f06c187c930" loc="1014:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UPE0" ref="0x7f06c1878020" loc="1035:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="ATM128_ADC_DIFF_ADC31_1x" ref="0x7f06c1833d20" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="_SC_PII_SOCKET" ref="0x7f06c0d9b5a0" loc="191:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="NOISE_HASHTABLE_SIZE" ref="0x7f06c1bf9610" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="ATM128_OCR3B" ref="0x7f06c18c33a0" loc="277:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X" ref="0x7f06c187b020" loc="1016:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_SC_OPEN_MAX" ref="0x7f06c0da6990" loc="83:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="_SC_ASYNCHRONOUS_IO" ref="0x7f06c0da4320" loc="99:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ATM128_ADC_VREF_RSVD" ref="0x7f06c1838a80" loc="37:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDF0" ref="0x7f06c1853640" loc="1268:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MAXPARENTS" ref="0x7f06c1962020" loc="11:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDG2" ref="0x7f06c1850970" loc="1290:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="ATM128_ADC_DIFF_ADC00_10x" ref="0x7f06c18357d0" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MPCM0" ref="0x7f06c1878650" loc="1037:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRW" ref="0x7f06c18a3320" loc="816:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ACD" ref="0x7f06c1873980" loc="1071:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="_SC_TIMER_MAX" ref="0x7f06c0d9fa10" loc="146:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDC1" ref="0x7f06c1862c60" loc="1177:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDD3" ref="0x7f06c185d330" loc="1205:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDE5" ref="0x7f06c1859970" loc="1233:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCF1A" ref="0x7f06c18a7960" loc="792:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC3A" ref="0x7f06c1888360" loc="932:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PE0" ref="0x7f06c1859020" loc="1228:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PF2" ref="0x7f06c1855620" loc="1256:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="ATM128_MCUCSR" ref="0x7f06c18ccc40" loc="173:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="USBS" ref="0x7f06c1880330" loc="986:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PG4" ref="0x7f06c1851340" loc="1281:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:96" name="_SC_2_C_VERSION" ref="0x7f06c0d928b0" loc="280:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:38" name="ATM128_ICR1L" ref="0x7f06c18d0c20" loc="135:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:178" name="_SC_V6_LP64_OFF64" ref="0x7f06c0d80020" loc="451:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:19" name="TOTALNODES" ref="0x7f06c1962a10" loc="14:TestNetworkC.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="_SC_TIMERS" ref="0x7f06c0da4020" loc="97:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:11" name="ENOACK" ref="0x7f06c1eaad30" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CSB2" ref="0x7f06c188c330" loc="904:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="_PC_2_SYMLINKS" ref="0x7f06c0da7440" loc="68:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1126" name="_CS_POSIX_V6_LP64_OFF64_LIBS" ref="0x7f06c0d6ba70" loc="627:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:175" name="SIM_LOG_OUTPUT_COUNT" ref="0x7f06c1cdb070" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SPI2X" ref="0x7f06c1883ca0" loc="970:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:126" name="HDLC_FLAG_BYTE" ref="0x7f06c19dabc0" loc="77:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CPHA" ref="0x7f06c1881020" loc="978:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:21" name="_SC_SEMAPHORES" ref="0x7f06c0da1020" loc="117:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:69" name="_SC_GETGR_R_SIZE_MAX" ref="0x7f06c0d97330" loc="223:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ICF1" ref="0x7f06c18a7640" loc="791:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DOR1" ref="0x7f06c187a330" loc="1024:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:97" name="ATM128_DDRF" ref="0x7f06c18c9020" loc="207:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TOIE2" ref="0x7f06c18a99a0" loc="780:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINF0" ref="0x7f06c1851020" loc="1278:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PING2" ref="0x7f06c184f9a0" loc="1297:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:64" name="LEDS_LED6" ref="0x7f06c14fc020" loc="39:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWS4" ref="0x7f06c18b5020" loc="697:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="SRL2" ref="0x7f06c18b5ca0" loc="703:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ERETRY" ref="0x7f06c1eaa070" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CS20" ref="0x7f06c189c950" loc="861:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ICNC1" ref="0x7f06c188cc90" loc="909:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:42" name="ATM128_OCR1A" ref="0x7f06c18cfe00" loc="144:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="CS32" ref="0x7f06c1889020" loc="922:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINA4" ref="0x7f06c186a340" loc="1124:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="PINB6" ref="0x7f06c1866990" loc="1152:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:71" name="_SC_LOGIN_NAME_MAX" ref="0x7f06c0d97940" loc="227:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1130" name="_CS_POSIX_V6_LPBIG_OFFBIG_LIBS" ref="0x7f06c0d6a900" loc="635:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:108" name="_SC_MB_LEN_MAX" ref="0x7f06c0d90b20" loc="306:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PA4" ref="0x7f06c186d020" loc="1104:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:241" name="_SC_SS_REPL_MAX" ref="0x7f06c0d7bbf0" loc="513:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:120" name="_SC_NL_LANGMAX" ref="0x7f06c0d8de20" loc="331:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDA0" ref="0x7f06c186b640" loc="1118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="COM1A1" ref="0x7f06c1890360" loc="880:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="DDB2" ref="0x7f06c1867c60" loc="1146:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INT5" ref="0x7f06c18ac9c0" loc="761:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDC4" ref="0x7f06c1862330" loc="1174:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="DDD6" ref="0x7f06c185e960" loc="1202:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="NO_SLOT" ref="0x7f06c15296a0" loc="8:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SenderDispatcher.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:126" name="_SC_XBS5_ILP32_OFFBIG" ref="0x7f06c0d8b020" loc="344:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:256" name="_ISupper" ref="0x7f06c1deee30" loc="50:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC21" ref="0x7f06c18b0070" loc="732:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PINF5" ref="0x7f06c1852020" loc="1273:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:56" name="_SC_PII_INTERNET" ref="0x7f06c0d9b890" loc="193:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="TWSTO" ref="0x7f06c18b8020" loc="678:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="WGM11" ref="0x7f06c188f660" loc="886:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="XMM2" ref="0x7f06c18b3330" loc="712:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="ATM128_ADC_SNGL_ADC7" ref="0x7f06c1835490" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="COMC1" ref="0x7f06c1891660" loc="874:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PSR321" ref="0x7f06c1883340" loc="965:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:124" name="ATM128_ETIFR" ref="0x7f06c18c5730" loc="261:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:37" name="ATM128_TCCR2" ref="0x7f06c18d0550" loc="131:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1131" name="_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS" ref="0x7f06c0d6aca0" loc="637:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="UDRE0" ref="0x7f06c1879650" loc="1032:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:243" name="_SC_TRACE_NAME_MAX" ref="0x7f06c0d7a320" loc="518:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="_PC_PATH_MAX" ref="0x7f06c0daa3f0" loc="36:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:155" name="ATM128_UCSR1A" ref="0x7f06c18bf0b0" loc="316:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:174" name="_SC_STREAMS" ref="0x7f06c0d812d0" loc="442:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:159" name="_SC_SPAWN" ref="0x7f06c0d853e0" loc="412:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="WGM1" ref="0x7f06c18a0c60" loc="838:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM3C0" ref="0x7f06c188eca0" loc="895:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="SPIE" ref="0x7f06c1882020" loc="973:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:196" name="_SC_LEVEL3_CACHE_LINESIZE" ref="0x7f06c0d7d9e0" loc="489:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE1" ref="0x7f06c187a020" loc="1023:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_PINB" ref="0x7f06c18d3df0" loc="96:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="SRW00" ref="0x7f06c18b4970" loc="707:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="_SC_DELAYTIMER_MAX" ref="0x7f06c0da0020" loc="127:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCF0" ref="0x7f06c18a6330" loc="795:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC2" ref="0x7f06c189d350" loc="854:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PINC0" ref="0x7f06c1860980" loc="1188:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="PIND2" ref="0x7f06c185b020" loc="1216:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="PINE4" ref="0x7f06c1857660" loc="1244:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:240" name="_SC_V7_LPBIG_OFFBIG" ref="0x7f06c0d7b910" loc="510:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ATM128_ADC_VREF_OFF" ref="0x7f06c18383c0" loc="35:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:183" name="_SC_TRACE_INHERIT" ref="0x7f06c0d7f020" loc="462:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="FE" ref="0x7f06c187c630" loc="1013:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FP_INFINITE" ref="0x7f06c1df4d00" loc="202:/usr/include/math.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:175" name="_SC_2_PBS_CHECKPOINT" ref="0x7f06c0d815e0" loc="444:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ACO" ref="0x7f06c1872020" loc="1073:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_LEFT_ADJUST" ref="0x7f06c1837870" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1140" name="_CS_POSIX_V7_LP64_OFF64_CFLAGS" ref="0x7f06c0d68e30" loc="656:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:-115" name="NOISE_MIN_QUANTIZE" ref="0x7f06c1bfbc50" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="MSTR" ref="0x7f06c1882940" loc="976:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:152" name="_SC_NETWORKING" ref="0x7f06c0d86020" loc="398:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:29" name="ATM128_ADC_DIFF_ADC52_1x" ref="0x7f06c1830020" loc="79:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:36" name="ATM128_TCNT2" ref="0x7f06c18d01d0" loc="128:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_SNGL_ADC1" ref="0x7f06c18361a0" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:111" name="NOISE_NUM_VALUES" ref="0x7f06c1bf8140" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDE0" ref="0x7f06c1858950" loc="1238:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_PC_MAX_CANON" ref="0x7f06c0dabb60" loc="30:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ISC61" ref="0x7f06c18af9f0" loc="742:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:76" name="_SC_THREAD_THREADS_MAX" ref="0x7f06c0d96950" loc="237:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:46" name="_SC_2_VERSION" ref="0x7f06c0d9dba0" loc="172:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:57" name="_SC_PII_OSI" ref="0x7f06c0d9bb40" loc="195:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1112" name="_CS_XBS5_LPBIG_OFFBIG_CFLAGS" ref="0x7f06c0d6f6f0" loc="598:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXCIE1" ref="0x7f06c1876670" loc="1051:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="_SC_PRIORITY_SCHEDULING" ref="0x7f06c0da5c10" loc="95:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INTF0" ref="0x7f06c18a9340" loc="776:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:130" name="_SC_XOPEN_REALTIME" ref="0x7f06c0d8bc30" loc="353:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_CS_PATH" ref="0x7f06c0d75e60" loc="537:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="PORF" ref="0x7f06c18a1c70" loc="831:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="RXB8" ref="0x7f06c1876020" loc="1047:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_VREF_AVCC" ref="0x7f06c1838770" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="OCDR4" ref="0x7f06c1886390" loc="946:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PB3" ref="0x7f06c1868020" loc="1135:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PC5" ref="0x7f06c1864620" loc="1163:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PD7" ref="0x7f06c1860ca0" loc="1191:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:80" name="_SC_THREAD_PRIO_INHERIT" ref="0x7f06c0d956c0" loc="245:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOS_SERIAL_802_15_4_ID" ref="0x7f06c19d9e40" loc="86:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2048" name="_ISdigit" ref="0x7f06c1deb980" loc="53:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1136" name="_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS" ref="0x7f06c0d68020" loc="648:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="OCR0UB" ref="0x7f06c1892340" loc="866:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_ADCH" ref="0x7f06c18d7d80" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:99" name="_SC_XOPEN_XPG3" ref="0x7f06c0d91140" loc="287:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TOV3" ref="0x7f06c18a4650" loc="810:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="UCSZ00" ref="0x7f06c187d660" loc="1006:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ12" ref="0x7f06c1875660" loc="1056:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:40" name="_SC_COLL_WEIGHTS_MAX" ref="0x7f06c0d9e910" loc="159:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:44" name="ATM128_TCNT1L" ref="0x7f06c18cec40" loc="150:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="UMSEL0" ref="0x7f06c187e680" loc="1001:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="_CS_V6_WIDTH_RESTRICTED_ENVS" ref="0x7f06c0d741f0" loc="540:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="INTF5" ref="0x7f06c18aa340" loc="771:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TWA0" ref="0x7f06c18b6020" loc="690:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXC0" ref="0x7f06c1879330" loc="1031:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCR" ref="0x7f06c18c81d0" loc="222:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="COM1C0" ref="0x7f06c188f340" loc="885:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="SUCCESS" ref="0x7f06c19e29d0" loc="41:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="ESIZE" ref="0x7f06c1f1a070" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="XDIV5" ref="0x7f06c18b2340" loc="719:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="INT0" ref="0x7f06c18ab950" loc="766:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="IVCE" ref="0x7f06c18a2950" loc="823:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:52" name="_SC_2_LOCALEDEF" ref="0x7f06c0d9cc80" loc="184:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:131" name="ATM128_OCR3CH" ref="0x7f06c18c3020" loc="274:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:132" name="_SC_ADVISORY_INFO" ref="0x7f06c0d8a310" loc="358:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="WGM30" ref="0x7f06c188d340" loc="897:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:97" name="_SC_2_UPE" ref="0x7f06c0d92b50" loc="282:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:171" name="_SC_2_PBS_MESSAGE" ref="0x7f06c0d82910" loc="436:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:242" name="_SC_TRACE_EVENT_NAME_MAX" ref="0x7f06c0d7a020" loc="516:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1110" name="_CS_XBS5_LP64_OFF64_LIBS" ref="0x7f06c0d6f020" loc="594:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_ADC_INT_FLAG_ON" ref="0x7f06c182a730" loc="131:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TXCIE0" ref="0x7f06c1874340" loc="1062:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:65535" name="AM_BROADCAST_ADDR" ref="0x7f06c19df140" loc="15:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:22" name="ATM128_ADC_DIFF_ADC61_1x" ref="0x7f06c1832730" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="FAIL" ref="0x7f06c19e2ce0" loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:235" name="_SC_IPV6" ref="0x7f06c0d7c950" loc="499:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PD1" ref="0x7f06c185e020" loc="1197:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="OCIE1C" ref="0x7f06c18a5980" loc="804:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PE3" ref="0x7f06c185a620" loc="1225:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PF5" ref="0x7f06c1856c60" loc="1253:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="_PC_REC_XFER_ALIGN" ref="0x7f06c0da8ad0" loc="62:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8" name="_ISalnum" ref="0x7f06c1de4ca0" loc="61:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:33" name="_SC_SEM_VALUE_MAX" ref="0x7f06c0d9f450" loc="142:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADCSRA" ref="0x7f06c18d64b0" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN1" ref="0x7f06c1875020" loc="1054:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:34" name="ATM128_OCDR" ref="0x7f06c18d1ab0" loc="122:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM21" ref="0x7f06c189d990" loc="856:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="EALREADY" ref="0x7f06c1eaa6f0" loc="50:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="ATM128_ADC_DIFF_ADC41_1x" ref="0x7f06c18320b0" loc="70:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:31" name="ATM128_ADC_SNGL_GND" ref="0x7f06c1830630" loc="81:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ACIS1" ref="0x7f06c1872c60" loc="1077:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:24" name="ATM128_PORTB" ref="0x7f06c18d2540" loc="102:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="TWS7" ref="0x7f06c18b6670" loc="694:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="CS11" ref="0x7f06c188bc80" loc="914:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINA7" ref="0x7f06c186b980" loc="1121:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:101" name="_SC_CHAR_BIT" ref="0x7f06c0d916d0" loc="292:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:115" name="_SC_UCHAR_MAX" ref="0x7f06c0d8d020" loc="320:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:114" name="ATM128_TWAR" ref="0x7f06c18c7e00" loc="244:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:58" name="ATM128_EICRB" ref="0x7f06c18ca1d0" loc="191:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PA7" ref="0x7f06c186e650" loc="1101:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:54" name="ATM128_TIFR" ref="0x7f06c18cb390" loc="179:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:128" name="ATM128_ICR3" ref="0x7f06c18c5e30" loc="267:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="ATM128_ADC_PRESCALE_64" ref="0x7f06c182d7d0" loc="102:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDA3" ref="0x7f06c186cc60" loc="1115:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="DDB5" ref="0x7f06c1867330" loc="1143:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="DDC7" ref="0x7f06c1863950" loc="1171:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="_SC_STREAM_MAX" ref="0x7f06c0da6c60" loc="85:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC00" ref="0x7f06c18af070" loc="737:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="DDF4" ref="0x7f06c1854950" loc="1264:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="FOCB" ref="0x7f06c1889c80" loc="928:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:81" name="_SC_THREAD_PRIO_PROTECT" ref="0x7f06c0d959f0" loc="247:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOS_AM_ADDRESS" ref="0x7f06c19dfa80" loc="28:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="COMA0" ref="0x7f06c1892cc0" loc="871:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="FOC" ref="0x7f06c18a0020" loc="834:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:170" name="_SC_2_PBS_LOCATE" ref="0x7f06c0d82620" loc="434:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:17" name="_SC_MEMLOCK" ref="0x7f06c0da22d0" loc="109:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL0" ref="0x7f06c187d980" loc="1007:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TXEN0" ref="0x7f06c1874ca0" loc="1065:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1006" name="_CS_LFS64_LIBS" ref="0x7f06c0d725e0" loc="569:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:10" name="ATM128_UCSR0B" ref="0x7f06c18d53b0" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:153" name="ATM128_UBRR1L" ref="0x7f06c18c0940" loc="310:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:14" name="ATM128_SPSR" ref="0x7f06c18d41c0" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="RXC" ref="0x7f06c187dca0" loc="1010:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="ATM128_POWER_DOWN" ref="0x7f06c1839d20" loc="126:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="MUX0" ref="0x7f06c186e330" loc="1098:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ITIMER_REAL" ref="0x7f06c1c06070" loc="96:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="RXEN" ref="0x7f06c1877330" loc="1043:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM3B1" ref="0x7f06c188e340" loc="892:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:110" name="_SC_SSIZE_MAX" ref="0x7f06c0d8f0b0" loc="310:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="XDIV0" ref="0x7f06c18b1340" loc="724:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:66" name="_SC_T_IOV_MAX" ref="0x7f06c0d98940" loc="215:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="ATM128_PINE" ref="0x7f06c18d87a0" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:26" name="ATM128_DDRA" ref="0x7f06c18d2c20" loc="108:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="LEDS_LED1" ref="0x7f06c14fe670" loc="34:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/Leds.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1117" name="_CS_POSIX_V6_ILP32_OFF32_LDFLAGS" ref="0x7f06c0d6e900" loc="609:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="TCN0UB" ref="0x7f06c1892020" loc="865:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="PINB1" ref="0x7f06c1865980" loc="1157:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="COM1" ref="0x7f06c18a0640" loc="836:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="PINC3" ref="0x7f06c1860020" loc="1185:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="UCSZ1" ref="0x7f06c1880650" loc="987:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="PIND5" ref="0x7f06c185c660" loc="1213:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="PINE7" ref="0x7f06c1858c90" loc="1241:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:167" name="_SC_USER_GROUPS_R" ref="0x7f06c0d83c80" loc="428:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="TWEA" ref="0x7f06c18ba8f0" loc="676:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:12" name="ATM128_UDR0" ref="0x7f06c18d5ab0" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="DDG0" ref="0x7f06c184f020" loc="1292:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="RWWSB" ref="0x7f06c18ad070" loc="751:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TRUE" ref="0x7f06c1d1a880" loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="DDD1" ref="0x7f06c185d950" loc="1207:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="NOISE_HISTORY" ref="0x7f06c1bfad50" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="DDE3" ref="0x7f06c1858020" loc="1235:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:35" name="ATM128_OCR2" ref="0x7f06c18d1e20" loc="125:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="IDRD" ref="0x7f06c18876c0" loc="942:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:104" name="ATM128_SPMCSR" ref="0x7f06c18c8540" loc="223:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:199" name="_SC_LEVEL4_CACHE_LINESIZE" ref="0x7f06c0d7c3a0" loc="495:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="OCIE3B" ref="0x7f06c18a5020" loc="801:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:8192" name="_ISspace" ref="0x7f06c1de9620" loc="55:/usr/include/ctype.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="ISC40" ref="0x7f06c18ae9d0" loc="747:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="U2X1" ref="0x7f06c187a950" loc="1026:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:90" name="_SC_XOPEN_XCU_VERSION" ref="0x7f06c0d93630" loc="267:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="CSB0" ref="0x7f06c188c950" loc="906:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="_SC_ARG_MAX" ref="0x7f06c0da7de0" loc="75:/usr/include/bits/confname.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="UCPOL" ref="0x7f06c1880c90" loc="989:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="MUX3" ref="0x7f06c186f960" loc="1095:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128_sim.h">
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="RECEIVER" ref="0x7f06c18fd7a0" loc="39:TestNetworkC.nc">
      <component-ref qname="TestNetworkC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:255" name="NO_TASK" ref="0x7f06c1991350" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="NUM_TASKS" ref="0x7f06c1991020" loc="47:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/SimSchedulerBasicP.nc">
      <component-ref qname="SimSchedulerBasicP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="receiveDone_task" ref="0x7f06c156e020" loc="45:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="sendDone_task" ref="0x7f06c155aae0" loc="44:../pure-tdma/sim/AsyncSendAdapterP.nc">
      <component-ref qname="AsyncSendAdapterP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3005" name="TOTALRUNS" ref="0x7f06c14eada0" loc="68:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:123" name="SIMPLE_TDMA_SYNC" ref="0x7f06c14eb070" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="TOTALSENSORS" ref="0x7f06c14e9140" loc="69:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="MAXCHILDREN" ref="0x7f06c14eb3c0" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="TOPO_CHANGE_NODE_THRESHOLD" ref="0x7f06c14ea020" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:55" name="TOTALNODES" ref="0x7f06c14eb710" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:50" name="ROOT1" ref="0x7f06c14ea360" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:20" name="MIN_TOTALNODES" ref="0x7f06c14ea710" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:9" name="NUM_MEASUREMENTS" ref="0x7f06c14ebaa0" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:7" name="BACKLEVELS" ref="0x7f06c14eaa60" loc="67:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="S_SENT" ref="0x7f06c123b950" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_START" ref="0x7f06c123b2f0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="S_OFFSET" ref="0x7f06c123b630" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="S_END" ref="0x7f06c123bc70" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/GenericSlotSenderP.nc">
      <component-ref qname="GenericSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="MAX_DELAY" ref="0x7f06c119d790" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TransformAlarmC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="MAX_DELAY_LOG2" ref="0x7f06c119d070" loc="71:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformAlarmC.nc">
      <component-ref qname="TransformAlarmC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="NUM_UPPER_BITS" ref="0x7f06c1162720" loc="62:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="TransformCounterC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="LOW_SHIFT_RIGHT" ref="0x7f06c1163150" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="TransformCounterC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="OVERFLOW_MASK" ref="0x7f06c1161580" loc="66:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="TransformCounterC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="HIGH_SHIFT_LEFT" ref="0x7f06c11639a0" loc="61:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="TransformCounterC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="syncDoneTask" ref="0x7f06c103c430" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="read_rssi_task" ref="0x7f06c1012580" loc="653:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="stopDoneTask" ref="0x7f06c0de3c70" loc="98:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:6" name="sendDoneTask" ref="0x7f06c0e7c7d0" loc="143:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="startDoneTask" ref="0x7f06c0de2cc0" loc="93:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="NUM_CLIENTS" ref="0x7f06c0bf1a40" loc="40:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="errorTask" ref="0x7f06c0bee840" loc="161:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="U:" name="CancelTask" ref="0x7f06c0ba2960" loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:4" name="S_SEND" ref="0x7f06c0b5b660" loc="59:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:5" name="S_END" ref="0x7f06c0b5b980" loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:2" name="S_BACKOFF" ref="0x7f06c0b5b020" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:0" name="S_START" ref="0x7f06c0b5c960" loc="55:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:3" name="S_CCA2" ref="0x7f06c0b5b340" loc="58:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
    <constant cst="I:1" name="S_CCA" ref="0x7f06c0b5cc80" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/system/SSTdmaSlotSenderP.nc">
      <component-ref qname="SSTdmaSlotSenderP"/>
      <type-int cname="int" size="I:4" alignment="I:4"></type-int>
    </constant>
  </constants>
  <functions>
  </functions>
  <typedefs>
    <typedef name="intptr_t" ref="0x7f06c2249d10" loc="120:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="intptr_t" ref="0x7f06c2249d10"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_packet_t" ref="0x7f06c19d14f0" loc="123:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_packet" ref="0x7f06c19d2a90"/>
        <typename><typedef-ref name="serial_packet_t" ref="0x7f06c19d14f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_spinlock_t" ref="0x7f06c2002be0" loc="201:/usr/include/bits/pthreadtypes.h">
      <type-qualified volatile="">
          <typename><typedef-ref name="pthread_spinlock_t" ref="0x7f06c2002be0"/></typename>
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-qualified>
    </typedef>
    <typedef name="wchar_t" ref="0x7f06c25c8e70" loc="323:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="wchar_t" ref="0x7f06c25c8e70"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128Admux_t" ref="0x7f06c182fe80" loc="90:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f06c182f9b0"/>
        <typename><typedef-ref name="Atm128Admux_t" ref="0x7f06c182fe80"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ushort" ref="0x7f06c2027470" loc="152:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="ushort" ref="0x7f06c2027470"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_footer_t" ref="0x7f06c19ddbb0" loc="17:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:2" alignment="I:1"><nx_struct-ref name="tossim_footer" ref="0x7f06c19dd590"/>
        <typename><typedef-ref name="tossim_footer_t" ref="0x7f06c19ddbb0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_G_uint32_t" ref="0x7f06c1db8170" loc="56:/usr/include/_G_config.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_G_uint32_t" ref="0x7f06c1db8170"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int64_t" ref="0x7f06c203f420" loc="44:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__int64_t" ref="0x7f06c203f420"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int16_t" ref="0x7f06c2040420" loc="39:/usr/include/bits/types.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__int16_t" ref="0x7f06c2040420"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_header_t" ref="0x7f06c19d2730" loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:7" alignment="I:1"><nx_struct-ref name="serial_header" ref="0x7f06c19d4640"/>
        <typename><typedef-ref name="serial_header_t" ref="0x7f06c19d2730"/></typename>
      </type-tag>
    </typedef>
    <typedef name="TMilli" ref="0x7f06c19598d0" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <documentation loc="1:TestNetworkC.nc">
        <short>&#10; Testnework for TDMA simulation in Tossim.</short>
        <long>&#10; Testnework for TDMA simulation in Tossim. &#10; @author Bo Li&#10; @version $Revision: 0.1 $ $Date: 2011/03/25 21:53:58 $&#10;</long>
      </documentation>
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959560"/>
        <typename><typedef-ref name="TMilli" ref="0x7f06c19598d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_G_int16_t" ref="0x7f06c1db90d0" loc="53:/usr/include/_G_config.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="_G_int16_t" ref="0x7f06c1db90d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_char" ref="0x7f06c2044b80" loc="31:/usr/include/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__u_char" ref="0x7f06c2044b80"/></typename>
      </type-int>
    </typedef>
    <typedef name="__intptr_t" ref="0x7f06c2030140" loc="189:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__intptr_t" ref="0x7f06c2030140"/></typename>
      </type-int>
    </typedef>
    <typedef name="__qaddr_t" ref="0x7f06c2032950" loc="185:/usr/include/bits/types.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__quad_t" ref="0x7f06c203fc10"/></typename>
        </type-int>
        <typename><typedef-ref name="__qaddr_t" ref="0x7f06c2032950"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="fd_set" ref="0x7f06c201e7e0" loc="78:/usr/include/sys/select.h">
      <type-tag size="I:128" alignment="I:8"><struct-ref ref="0x7f06c201e470"/>
        <typename><typedef-ref name="fd_set" ref="0x7f06c201e7e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_time_t" ref="0x7f06c1d181c0" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_tossim.h">
        <short>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the basic TOSSIM primitives and utility&#10; functions.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-int cname="long long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="sim_time_t" ref="0x7f06c1d181c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__caddr_t" ref="0x7f06c2032d10" loc="186:/usr/include/bits/types.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="__caddr_t" ref="0x7f06c2032d10"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__time_t" ref="0x7f06c2037450" loc="149:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__time_t" ref="0x7f06c2037450"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ssize_t" ref="0x7f06c2032130" loc="180:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ssize_t" ref="0x7f06c2032130"/></typename>
      </type-int>
    </typedef>
    <typedef name="float_t" ref="0x7f06c1f886f0" loc="31:/usr/include/bits/mathdef.h">
      <type-float cname="float" size="I:4" alignment="I:4">
        <typename><typedef-ref name="float_t" ref="0x7f06c1f886f0"/></typename>
      </type-float>
    </typedef>
    <typedef name="mode_t" ref="0x7f06c202c3e0" loc="71:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="mode_t" ref="0x7f06c202c3e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="_IO_lock_t" ref="0x7f06c1db4020" loc="180:/usr/include/libio.h">
      <type-void size="I:1" alignment="I:1">
        <typename><typedef-ref name="_IO_lock_t" ref="0x7f06c1db4020"/></typename>
      </type-void>
    </typedef>
    <typedef name="int_least32_t" ref="0x7f06c224d090" loc="68:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int_least32_t" ref="0x7f06c224d090"/></typename>
      </type-int>
    </typedef>
    <typedef name="__builtin_va_list" ref="0x7f06c25d0690"  loc="NONE">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7f06c25d0530"/></type-tag>
      </type-pointer>
    </typedef>
    <typedef name="__uint32_t" ref="0x7f06c203f020" loc="42:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uint32_t" ref="0x7f06c203f020"/></typename>
      </type-int>
    </typedef>
    <typedef name="TMicro" ref="0x7f06c1952930" loc="31:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c19525c0"/>
        <typename><typedef-ref name="TMicro" ref="0x7f06c1952930"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsfilcnt_t" ref="0x7f06c2033900" loc="177:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsfilcnt_t" ref="0x7f06c2033900"/></typename>
      </type-int>
    </typedef>
    <typedef name="nlink_t" ref="0x7f06c202c7b0" loc="76:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="nlink_t" ref="0x7f06c202c7b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="clock_t" ref="0x7f06c2029c30" loc="60:/usr/include/time.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="clock_t" ref="0x7f06c2029c30"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_condattr_t" ref="0x7f06c20074a0" loc="136:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x7f06c2007080"/>
        <typename><typedef-ref name="pthread_condattr_t" ref="0x7f06c20074a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__pthread_list_t" ref="0x7f06c20100d0" loc="65:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref name="__pthread_internal_list" ref="0x7f06c2011560"/>
        <typename><typedef-ref name="__pthread_list_t" ref="0x7f06c20100d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="heap_t" ref="0x7f06c1c76620" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.h">
      <documentation loc="42:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.h">
        <short>&#10; </short>
        <long>&#10; @author Philip Levis&#10;</long>
      </documentation>
      <type-tag size="I:24" alignment="I:8"><struct-ref name="heap" ref="0x7f06c1c78be0"/>
        <typename><typedef-ref name="heap_t" ref="0x7f06c1c76620"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gid_t" ref="0x7f06c203ec80" loc="136:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gid_t" ref="0x7f06c203ec80"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint16_t" ref="0x7f06c20b21f0" loc="446:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nxle_uint16_t">
        <typename><typedef-ref name="nxle_uint16_t" ref="0x7f06c20b21f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_channel_t" ref="0x7f06c1cdd520" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:24" alignment="I:8"><struct-ref name="sim_log_channel" ref="0x7f06c1cde730"/>
        <typename><typedef-ref name="sim_log_channel_t" ref="0x7f06c1cdd520"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int" ref="0x7f06c202f0d0" loc="36:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int" ref="0x7f06c202f0d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_once_t" ref="0x7f06c2007c80" loc="144:/usr/include/bits/pthreadtypes.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_once_t" ref="0x7f06c2007c80"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint" ref="0x7f06c2027800" loc="153:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint" ref="0x7f06c2027800"/></typename>
      </type-int>
    </typedef>
    <typedef name="am_group_t" ref="0x7f06c19e07c0" loc="11:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_group_t" ref="0x7f06c19e07c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least8_t" ref="0x7f06c224d890" loc="77:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_least8_t" ref="0x7f06c224d890"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsid_t" ref="0x7f06c20390d0" loc="144:/usr/include/bits/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c203ad30"/>
        <typename><typedef-ref name="__fsid_t" ref="0x7f06c20390d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uint_fast32_t" ref="0x7f06c2249500" loc="107:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast32_t" ref="0x7f06c2249500"/></typename>
      </type-int>
    </typedef>
    <typedef name="blksize_t" ref="0x7f06c2015470" loc="229:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="blksize_t" ref="0x7f06c2015470"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least64_t" ref="0x7f06c224d480" loc="70:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_least64_t" ref="0x7f06c224d480"/></typename>
      </type-int>
    </typedef>
    <typedef name="__pid_t" ref="0x7f06c203a7c0" loc="143:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__pid_t" ref="0x7f06c203a7c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_int" ref="0x7f06c20433d0" loc="33:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__u_int" ref="0x7f06c20433d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_event_t" ref="0x7f06c1d0c410" loc="43:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_event_queue.h">
      <type-tag size="I:48" alignment="I:8"><struct-ref name="sim_event" ref="0x7f06c1d0c020"/>
        <typename><typedef-ref name="sim_event_t" ref="0x7f06c1d0c410"/></typename>
      </type-tag>
    </typedef>
    <typedef name="error_t" ref="0x7f06c1db6020" loc="56:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
      <documentation loc="23:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision$&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="error_t" ref="0x7f06c1db6020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sig_atomic_t" ref="0x7f06c20249a0" loc="24:/usr/include/bits/sigset.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__sig_atomic_t" ref="0x7f06c20249a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__daddr_t" ref="0x7f06c2036020" loc="153:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__daddr_t" ref="0x7f06c2036020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino_t" ref="0x7f06c203b0d0" loc="137:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ino_t" ref="0x7f06c203b0d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_uint16_t" ref="0x7f06c1db9bb0" loc="55:/usr/include/_G_config.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="_G_uint16_t" ref="0x7f06c1db9bb0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least8_t" ref="0x7f06c224e8b0" loc="66:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_least8_t" ref="0x7f06c224e8b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="FILE" ref="0x7f06c1dbe7f0" loc="49:/usr/include/stdio.h">
      <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
        <typename><typedef-ref name="FILE" ref="0x7f06c1dbe7f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__compar_fn_t" ref="0x7f06c1fb95b0" loc="742:/usr/include/stdlib.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
          <function-parameters>
            <type-pointer size="I:8" alignment="I:8">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
            <type-pointer size="I:8" alignment="I:8">
              <type-qualified const="">
                <type-void size="I:1" alignment="I:1"></type-void>
              </type-qualified>
            </type-pointer>
          </function-parameters>
        </type-function>
        <typename><typedef-ref name="__compar_fn_t" ref="0x7f06c1fb95b0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__locale_t" ref="0x7f06c2096020" loc="40:/usr/include/xlocale.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:232" alignment="I:8"><struct-ref name="__locale_struct" ref="0x7f06c20995f0"/></type-tag>
        <typename><typedef-ref name="__locale_t" ref="0x7f06c2096020"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="Atm128_ADCL_t" ref="0x7f06c18274d0" loc="152:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCL_t" ref="0x7f06c18274d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mode_t" ref="0x7f06c203b890" loc="139:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__mode_t" ref="0x7f06c203b890"/></typename>
      </type-int>
    </typedef>
    <typedef name="locale_t" ref="0x7f06c2096430" loc="43:/usr/include/xlocale.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="I:232" alignment="I:8"><struct-ref name="__locale_struct" ref="0x7f06c20995f0"/></type-tag>
        <typename><typedef-ref name="locale_t" ref="0x7f06c2096430"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="radio_stats_t" ref="0x7f06c19d42e0" loc="110:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:18" alignment="I:2"><struct-ref name="radio_stats" ref="0x7f06c19d6020"/>
        <typename><typedef-ref name="radio_stats_t" ref="0x7f06c19d42e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="clockid_t" ref="0x7f06c2028560" loc="92:/usr/include/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="clockid_t" ref="0x7f06c2028560"/></typename>
      </type-int>
    </typedef>
    <typedef name="gid_t" ref="0x7f06c202c020" loc="66:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="gid_t" ref="0x7f06c202c020"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsid_t" ref="0x7f06c202e020" loc="40:/usr/include/sys/types.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c203ad30"/>
        <typename><typedef-ref name="fsid_t" ref="0x7f06c202e020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_packet_t" ref="0x7f06c19f3590" loc="51:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_packet.h">
        <short>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.</short>
        <long>&#10;&#10; TOSSIM packet abstract data type, so C++ code can call into nesC&#10; code that does the native-to-network type translation.&#10;&#10; @author Philip Levis&#10; @date   Jan 2 2006&#10;</long>
      </documentation>
      <type-tag size="I:0" alignment="I:1"><struct-ref name="sim_packet" ref="0x7f06c19f3250"/>
        <typename><typedef-ref name="sim_packet_t" ref="0x7f06c19f3590"/></typename>
      </type-tag>
    </typedef>
    <typedef name="Atm128Adcsra_t" ref="0x7f06c1828c70" loc="149:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x7f06c1828590"/>
        <typename><typedef-ref name="Atm128Adcsra_t" ref="0x7f06c1828c70"/></typename>
      </type-tag>
    </typedef>
    <typedef name="int8_t" ref="0x7f06c25ba8d0" loc="37:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int8_t" ref="0x7f06c25ba8d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_log_output_t" ref="0x7f06c1cde3c0" loc="46:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.c">
      <type-tag size="I:16" alignment="I:8"><struct-ref name="sim_log_output" ref="0x7f06c1cdfb00"/>
        <typename><typedef-ref name="sim_log_output_t" ref="0x7f06c1cde3c0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="suseconds_t" ref="0x7f06c2020410" loc="49:/usr/include/sys/select.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="suseconds_t" ref="0x7f06c2020410"/></typename>
      </type-int>
    </typedef>
    <typedef name="sigset_t" ref="0x7f06c2022c30" loc="38:/usr/include/sys/select.h">
      <type-tag size="I:128" alignment="I:8"><struct-ref ref="0x7f06c20224b0"/>
        <typename><typedef-ref name="sigset_t" ref="0x7f06c2022c30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="T32khz" ref="0x7f06c1952180" loc="30:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/timer/Timer.h">
      <type-tag size="I:4" alignment="I:4"><struct-ref ref="0x7f06c1959dc0"/>
        <typename><typedef-ref name="T32khz" ref="0x7f06c1952180"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_short" ref="0x7f06c2030cc0" loc="35:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_short" ref="0x7f06c2030cc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="ptrdiff_t" ref="0x7f06c25c8640" loc="149:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="ptrdiff_t" ref="0x7f06c25c8640"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_header_t" ref="0x7f06c19dd230" loc="13:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:8" alignment="I:1"><nx_struct-ref name="tossim_header" ref="0x7f06c19dfe20"/>
        <typename><typedef-ref name="tossim_header_t" ref="0x7f06c19dd230"/></typename>
      </type-tag>
    </typedef>
    <typedef name="blkcnt_t" ref="0x7f06c2015880" loc="236:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="blkcnt_t" ref="0x7f06c2015880"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint32_t" ref="0x7f06c224e090" loc="52:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint32_t" ref="0x7f06c224e090"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_uint64_t" ref="0x7f06c20b00d0" loc="448:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:1" network="nxle_uint64_t">
        <typename><typedef-ref name="nxle_uint64_t" ref="0x7f06c20b00d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint8_t" ref="0x7f06c20b8020" loc="435:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_uint8_t" ref="0x7f06c20b8020"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintptr_t" ref="0x7f06c2247130" loc="123:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uintptr_t" ref="0x7f06c2247130"/></typename>
      </type-int>
    </typedef>
    <typedef name="caddr_t" ref="0x7f06c20293f0" loc="117:/usr/include/sys/types.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-int cname="char" size="I:1" alignment="I:1"></type-int>
        <typename><typedef-ref name="caddr_t" ref="0x7f06c20293f0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__u_long" ref="0x7f06c20437d0" loc="34:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__u_long" ref="0x7f06c20437d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast64_t" ref="0x7f06c2249930" loc="108:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast64_t" ref="0x7f06c2249930"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint16_t" ref="0x7f06c2040830" loc="40:/usr/include/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__uint16_t" ref="0x7f06c2040830"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_char" ref="0x7f06c20308f0" loc="34:/usr/include/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_char" ref="0x7f06c20308f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="mcu_power_t" ref="0x7f06c183db00" loc="114:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="mcu_power_t" ref="0x7f06c183db00"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast16_t" ref="0x7f06c224a090" loc="93:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast16_t" ref="0x7f06c224a090"/></typename>
      </type-int>
    </typedef>
    <typedef name="fpos_t" ref="0x7f06c1d8fb90" loc="111:/usr/include/stdio.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c1dbcb80"/>
        <typename><typedef-ref name="fpos_t" ref="0x7f06c1d8fb90"/></typename>
      </type-tag>
    </typedef>
    <typedef name="div_t" ref="0x7f06c205c090" loc="102:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c205dc40"/>
        <typename><typedef-ref name="div_t" ref="0x7f06c205c090"/></typename>
      </type-tag>
    </typedef>
    <typedef name="sim_gain_noise_t" ref="0x7f06c1b34310" loc="6:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.c">
      <type-tag size="I:16" alignment="I:8"><struct-ref name="sim_gain_noise" ref="0x7f06c1b36b00"/>
        <typename><typedef-ref name="sim_gain_noise_t" ref="0x7f06c1b34310"/></typename>
      </type-tag>
    </typedef>
    <typedef name="size_t" ref="0x7f06c25c8a80" loc="211:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stddef.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
      </type-int>
    </typedef>
    <typedef name="socklen_t" ref="0x7f06c0dd5530" loc="275:/usr/include/unistd.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="socklen_t" ref="0x7f06c0dd5530"/></typename>
      </type-int>
    </typedef>
    <typedef name="__uint8_t" ref="0x7f06c2040020" loc="38:/usr/include/bits/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__uint8_t" ref="0x7f06c2040020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__sigset_t" ref="0x7f06c2022820" loc="32:/usr/include/bits/sigset.h">
      <type-tag size="I:128" alignment="I:8"><struct-ref ref="0x7f06c20224b0"/>
        <typename><typedef-ref name="__sigset_t" ref="0x7f06c2022820"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__loff_t" ref="0x7f06c2032530" loc="184:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__loff_t" ref="0x7f06c2032530"/></typename>
      </type-int>
    </typedef>
    <typedef name="__ino64_t" ref="0x7f06c203b4d0" loc="138:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__ino64_t" ref="0x7f06c203b4d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_id_t" ref="0x7f06c19e35b0" loc="6:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <documentation loc="25:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
        <short>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.</short>
        <long>&#10; Defining the platform-independently named packet structures to be the&#10; tossim structures.&#10;&#10; @author Philip Levis&#10; @date   Dec 2 2005&#10; Revision:  $Revision$&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_id_t" ref="0x7f06c19e35b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_header_t" ref="0x7f06c19d0b30" loc="44:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:8" alignment="I:1"><union-ref name="message_header" ref="0x7f06c19d0200"/>
        <typename><typedef-ref name="message_header_t" ref="0x7f06c19d0b30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="gain_entry_t" ref="0x7f06c1b432e0" loc="53:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h">
      <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_gain.h">
        <short>&#10; Further edited by for multi-channel TOSSIM, each channel uses different noise traces&#10;&#10; </short>
        <long>&#10; Further edited by for multi-channel TOSSIM, each channel uses different noise traces&#10;&#10; @author Bo Li of wustl&#10; @data Mar 19, 2012&#10;</long>
      </documentation>
      <type-tag size="I:32" alignment="I:8"><struct-ref name="gain_entry" ref="0x7f06c1b45530"/>
        <typename><typedef-ref name="gain_entry_t" ref="0x7f06c1b432e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_addr_t" ref="0x7f06c19e0ba0" loc="12:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="am_addr_t" ref="0x7f06c19e0ba0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int32_t" ref="0x7f06c20b9120" loc="433:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nx_int32_t">
        <typename><typedef-ref name="nx_int32_t" ref="0x7f06c20b9120"/></typename>
      </type-int>
    </typedef>
    <typedef name="Atm128_ADCH_t" ref="0x7f06c18270d0" loc="151:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/adc/Atm128Adc.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="Atm128_ADCH_t" ref="0x7f06c18270d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least16_t" ref="0x7f06c224b020" loc="78:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint_least16_t" ref="0x7f06c224b020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_close_fn" ref="0x7f06c1da3dc0" loc="384:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
        </function-parameters>
        <typename><typedef-ref name="__io_close_fn" ref="0x7f06c1da3dc0"/></typename>
      </type-function>
    </typedef>
    <typedef name="uint8_t" ref="0x7f06c224f8a0" loc="49:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint8_t" ref="0x7f06c224f8a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="time_t" ref="0x7f06c20280d0" loc="76:/usr/include/time.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="time_t" ref="0x7f06c20280d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int8_t" ref="0x7f06c20b6cd0" loc="441:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nxle_int8_t">
        <typename><typedef-ref name="nxle_int8_t" ref="0x7f06c20b6cd0"/></typename>
      </type-int>
    </typedef>
    <typedef name="lldiv_t" ref="0x7f06c205b6d0" loc="122:/usr/include/stdlib.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c205b2b0"/>
        <typename><typedef-ref name="lldiv_t" ref="0x7f06c205b6d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="_IO_FILE" ref="0x7f06c1da9020" loc="341:/usr/include/libio.h">
      <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
        <typename><typedef-ref name="_IO_FILE" ref="0x7f06c1da9020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_attr_t" ref="0x7f06c2011180" loc="57:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:56" alignment="I:8"><union-ref ref="0x7f06c2013d20"/>
        <typename><typedef-ref name="pthread_attr_t" ref="0x7f06c2011180"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_seek_fn" ref="0x7f06c1da3420" loc="381:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        <function-parameters>
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:8" alignment="I:8">
            <type-int cname="long" size="I:8" alignment="I:8">
              <typename><typedef-ref name="__off64_t" ref="0x7f06c203a450"/></typename>
            </type-int>
          </type-pointer>
          <type-int cname="int" size="I:4" alignment="I:4"></type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_seek_fn" ref="0x7f06c1da3420"/></typename>
      </type-function>
    </typedef>
    <typedef name="pid_t" ref="0x7f06c202b3d0" loc="99:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pid_t" ref="0x7f06c202b3d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="timer_t" ref="0x7f06c2028990" loc="104:/usr/include/time.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="timer_t" ref="0x7f06c2028990"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="pthread_rwlockattr_t" ref="0x7f06c20027a0" loc="195:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:8" alignment="I:8"><union-ref ref="0x7f06c2002380"/>
        <typename><typedef-ref name="pthread_rwlockattr_t" ref="0x7f06c20027a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uint64_t" ref="0x7f06c203f830" loc="45:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__uint64_t" ref="0x7f06c203f830"/></typename>
      </type-int>
    </typedef>
    <typedef name="__dev_t" ref="0x7f06c203e520" loc="134:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__dev_t" ref="0x7f06c203e520"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int32_t" ref="0x7f06c20b5bc0" loc="443:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="int" size="I:4" alignment="I:1" network="nxle_int32_t">
        <typename><typedef-ref name="nxle_int32_t" ref="0x7f06c20b5bc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="va_list" ref="0x7f06c1d8f790" loc="80:/usr/include/stdio.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7f06c25d0530"/></type-tag>
        <typename><typedef-ref name="va_list" ref="0x7f06c1d8f790"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="__off_t" ref="0x7f06c203a090" loc="141:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__off_t" ref="0x7f06c203a090"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast8_t" ref="0x7f06c224bc50" loc="91:/usr/include/stdint.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="int_fast8_t" ref="0x7f06c224bc50"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blkcnt_t" ref="0x7f06c2034820" loc="169:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blkcnt_t" ref="0x7f06c2034820"/></typename>
      </type-int>
    </typedef>
    <typedef name="tossim_metadata_t" ref="0x7f06c19da180" loc="29:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/TossimRadioMsg.h">
      <type-tag size="I:6" alignment="I:1"><nx_struct-ref name="tossim_metadata" ref="0x7f06c19dc020"/>
        <typename><typedef-ref name="tossim_metadata_t" ref="0x7f06c19da180"/></typename>
      </type-tag>
    </typedef>
    <typedef name="am_id_t" ref="0x7f06c19e03e0" loc="10:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="am_id_t" ref="0x7f06c19e03e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="intmax_t" ref="0x7f06c2247510" loc="135:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="intmax_t" ref="0x7f06c2247510"/></typename>
      </type-int>
    </typedef>
    <typedef name="serial_metadata_t" ref="0x7f06c19d1e70" loc="127:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <type-tag size="I:1" alignment="I:1"><nx_struct-ref name="serial_metadata" ref="0x7f06c19d1860"/>
        <typename><typedef-ref name="serial_metadata_t" ref="0x7f06c19d1e70"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fsblkcnt_t" ref="0x7f06c2033090" loc="173:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsblkcnt_t" ref="0x7f06c2033090"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint16_t" ref="0x7f06c224fca0" loc="50:/usr/include/stdint.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="uint16_t" ref="0x7f06c224fca0"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos_t" ref="0x7f06c1dba020" loc="26:/usr/include/_G_config.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c1dbcb80"/>
        <typename><typedef-ref name="_G_fpos_t" ref="0x7f06c1dba020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int8_t" ref="0x7f06c2027dc0" loc="201:/usr/include/sys/types.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="u_int8_t" ref="0x7f06c2027dc0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_group_t" ref="0x7f06c19e3ad0" loc="7:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nx_uint8_t">
        <typename><typedef-ref name="nx_am_group_t" ref="0x7f06c19e3ad0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timer_t" ref="0x7f06c2034020" loc="161:/usr/include/bits/types.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-void size="I:1" alignment="I:1"></type-void>
        <typename><typedef-ref name="__timer_t" ref="0x7f06c2034020"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="message_metadata_t" ref="0x7f06c19cd020" loc="52:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:6" alignment="I:1"><union-ref name="message_metadata" ref="0x7f06c19ce8b0"/>
        <typename><typedef-ref name="message_metadata_t" ref="0x7f06c19cd020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__io_write_fn" ref="0x7f06c1da53d0" loc="372:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__ssize_t" ref="0x7f06c2032130"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:8" alignment="I:8">
            <type-qualified const="">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-qualified>
          </type-pointer>
          <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
            <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_write_fn" ref="0x7f06c1da53d0"/></typename>
      </type-function>
    </typedef>
    <typedef name="fd_mask" ref="0x7f06c201ebf0" loc="85:/usr/include/sys/select.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="fd_mask" ref="0x7f06c201ebf0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint32_t" ref="0x7f06c20b8e60" loc="437:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nx_uint32_t">
        <typename><typedef-ref name="nx_uint32_t" ref="0x7f06c20b8e60"/></typename>
      </type-int>
    </typedef>
    <typedef name="hashtable_t" ref="0x7f06c1cea0d0" loc="10:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/hashtable.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_log.h">
        <short>&#10; The TOSSIM logging system.</short>
        <long>&#10; The TOSSIM logging system. Unlike in TinyOS 1.x, this logging&#10; system supports an arbitrary number of channels, denoted by&#10; a string identifier. A channel can be connected to any number&#10; of outputs, and a debug statement can be associated with any&#10; number of channels.&#10;&#10; @author Philip Levis&#10; @date   Nov 22 2005&#10;</long>
      </documentation>
      <type-tag size="V:" alignment="V:"><struct-ref name="hashtable" ref="0x7f06c1cebcb0"/>
        <typename><typedef-ref name="hashtable_t" ref="0x7f06c1cea0d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="dev_t" ref="0x7f06c202eb40" loc="61:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="dev_t" ref="0x7f06c202eb40"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_quad_t" ref="0x7f06c203e090" loc="54:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__u_quad_t" ref="0x7f06c203e090"/></typename>
      </type-int>
    </typedef>
    <typedef name="__swblk_t" ref="0x7f06c20363e0" loc="154:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__swblk_t" ref="0x7f06c20363e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int32_t" ref="0x7f06c20268f0" loc="203:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="u_int32_t" ref="0x7f06c20268f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsfilcnt_t" ref="0x7f06c20130d0" loc="244:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="fsfilcnt_t" ref="0x7f06c20130d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast8_t" ref="0x7f06c224ac50" loc="104:/usr/include/stdint.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uint_fast8_t" ref="0x7f06c224ac50"/></typename>
      </type-int>
    </typedef>
    <typedef name="snr_lqi_t" ref="0x7f06c100f020" loc="13:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <type-tag size="I:24" alignment="I:8"><struct-ref name="snr_lqi" ref="0x7f06c1010570"/>
        <typename><typedef-ref name="snr_lqi_t" ref="0x7f06c100f020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__rlim64_t" ref="0x7f06c2039ca0" loc="147:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__rlim64_t" ref="0x7f06c2039ca0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__key_t" ref="0x7f06c2036750" loc="155:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__key_t" ref="0x7f06c2036750"/></typename>
      </type-int>
    </typedef>
    <typedef name="__useconds_t" ref="0x7f06c2037830" loc="150:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__useconds_t" ref="0x7f06c2037830"/></typename>
      </type-int>
    </typedef>
    <typedef name="__io_read_fn" ref="0x7f06c1da62c0" loc="364:/usr/include/libio.h">
      <type-function size="I:1" alignment="I:1">
        <type-int cname="long" size="I:8" alignment="I:8">
          <typename><typedef-ref name="__ssize_t" ref="0x7f06c2032130"/></typename>
        </type-int>
        <function-parameters>
          <type-pointer size="I:8" alignment="I:8">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <type-pointer size="I:8" alignment="I:8">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
          <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
            <typename><typedef-ref name="size_t" ref="0x7f06c25c8a80"/></typename>
          </type-int>
        </function-parameters>
        <typename><typedef-ref name="__io_read_fn" ref="0x7f06c1da62c0"/></typename>
      </type-function>
    </typedef>
    <typedef name="nx_int16_t" ref="0x7f06c20bb9e0" loc="432:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nx_int16_t">
        <typename><typedef-ref name="nx_int16_t" ref="0x7f06c20bb9e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__gwchar_t" ref="0x7f06c2241020" loc="35:/usr/include/inttypes.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__gwchar_t" ref="0x7f06c2241020"/></typename>
      </type-int>
    </typedef>
    <typedef name="TestNetworkMsg" ref="0x7f06c195b3a0" loc="51:TestNetwork.h">
      <documentation loc="1:TestNetworkAppC.nc">
        <short>&#10; Testnework for TDMA simulation in Tossim.</short>
        <long>&#10; Testnework for TDMA simulation in Tossim. &#10; @author Bo Li&#10; @version $Revision: 0.1 $ $Date: 2011/03/25 21:53:58 $&#10;</long>
      </documentation>
      <type-tag size="I:122" alignment="I:1"><nx_struct-ref name="TestNetworkMsg" ref="0x7f06c1962e90"/>
        <typename><typedef-ref name="TestNetworkMsg" ref="0x7f06c195b3a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="register_t" ref="0x7f06c2024410" loc="206:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="register_t" ref="0x7f06c2024410"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrierattr_t" ref="0x7f06c1fff8e0" loc="216:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x7f06c1fff4c0"/>
        <typename><typedef-ref name="pthread_barrierattr_t" ref="0x7f06c1fff8e0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="ssize_t" ref="0x7f06c202bb30" loc="110:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="ssize_t" ref="0x7f06c202bb30"/></typename>
      </type-int>
    </typedef>
    <typedef name="__quad_t" ref="0x7f06c203fc10" loc="53:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__quad_t" ref="0x7f06c203fc10"/></typename>
      </type-int>
    </typedef>
    <typedef name="int32_t" ref="0x7f06c224f120" loc="39:/usr/include/stdint.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="int32_t" ref="0x7f06c224f120"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint64_t" ref="0x7f06c224e490" loc="56:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint64_t" ref="0x7f06c224e490"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_long" ref="0x7f06c202f490" loc="37:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_long" ref="0x7f06c202f490"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_atomic_t" ref="0x7f06c1848c40" loc="88:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/atm128/sim/atm128hardware.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__nesc_atomic_t" ref="0x7f06c1848c40"/></typename>
      </type-int>
    </typedef>
    <typedef name="_LIB_VERSION_TYPE" ref="0x7f06c1df2c60" loc="298:/usr/include/math.h">
      <type-tag size="I:4" alignment="I:4"><enum-ref ref="0x7f06c1df3a70"/>
        <typename><typedef-ref name="_LIB_VERSION_TYPE" ref="0x7f06c1df2c60"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nxle_int64_t" ref="0x7f06c20b3320" loc="444:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="long" size="I:8" alignment="I:1" network="nxle_int64_t">
        <typename><typedef-ref name="nxle_int64_t" ref="0x7f06c20b3320"/></typename>
      </type-int>
    </typedef>
    <typedef name="nxle_int16_t" ref="0x7f06c20b5490" loc="442:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="short" size="I:2" alignment="I:1" network="nxle_int16_t">
        <typename><typedef-ref name="nxle_int16_t" ref="0x7f06c20b5490"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_t" ref="0x7f06c2013550" loc="50:/usr/include/bits/pthreadtypes.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="pthread_t" ref="0x7f06c2013550"/></typename>
      </type-int>
    </typedef>
    <typedef name="__blksize_t" ref="0x7f06c2034410" loc="164:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blksize_t" ref="0x7f06c2034410"/></typename>
      </type-int>
    </typedef>
    <typedef name="imaxdiv_t" ref="0x7f06c2241d20" loc="283:/usr/include/inttypes.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c2241900"/>
        <typename><typedef-ref name="imaxdiv_t" ref="0x7f06c2241d20"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nlink_t" ref="0x7f06c203bc90" loc="140:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__nlink_t" ref="0x7f06c203bc90"/></typename>
      </type-int>
    </typedef>
    <typedef name="__id_t" ref="0x7f06c2037090" loc="148:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__id_t" ref="0x7f06c2037090"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least32_t" ref="0x7f06c224b410" loc="79:/usr/include/stdint.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uint_least32_t" ref="0x7f06c224b410"/></typename>
      </type-int>
    </typedef>
    <typedef name="__mbstate_t" ref="0x7f06c1dbc440" loc="95:/usr/include/wchar.h">
      <type-tag size="I:8" alignment="I:4"><struct-ref ref="0x7f06c1dbc020"/>
        <typename><typedef-ref name="__mbstate_t" ref="0x7f06c1dbc440"/></typename>
      </type-tag>
    </typedef>
    <typedef name="message_footer_t" ref="0x7f06c19ce530" loc="48:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/platform_message.h">
      <type-tag size="I:2" alignment="I:1"><union-ref name="message_footer" ref="0x7f06c19d0e90"/>
        <typename><typedef-ref name="message_footer_t" ref="0x7f06c19ce530"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__WAIT_STATUS" ref="0x7f06c205d600" loc="72:/usr/include/stdlib.h">
      <type-tag size="I:8" alignment="I:8"><union-ref ref="0x7f06c205d080"/>
        <typename><typedef-ref name="__WAIT_STATUS" ref="0x7f06c205d600"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__blkcnt64_t" ref="0x7f06c2034c00" loc="170:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__blkcnt64_t" ref="0x7f06c2034c00"/></typename>
      </type-int>
    </typedef>
    <typedef name="fsblkcnt_t" ref="0x7f06c2015c90" loc="240:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="fsblkcnt_t" ref="0x7f06c2015c90"/></typename>
      </type-int>
    </typedef>
    <typedef name="off_t" ref="0x7f06c202b020" loc="87:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="off_t" ref="0x7f06c202b020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__u_short" ref="0x7f06c2043020" loc="32:/usr/include/bits/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="__u_short" ref="0x7f06c2043020"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int64_t" ref="0x7f06c20b9830" loc="434:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="long" size="I:8" alignment="I:1" network="nx_int64_t">
        <typename><typedef-ref name="nx_int64_t" ref="0x7f06c20b9830"/></typename>
      </type-int>
    </typedef>
    <typedef name="quad_t" ref="0x7f06c202f850" loc="38:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="quad_t" ref="0x7f06c202f850"/></typename>
      </type-int>
    </typedef>
    <typedef name="__suseconds_t" ref="0x7f06c2037c20" loc="151:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__suseconds_t" ref="0x7f06c2037c20"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_barrier_t" ref="0x7f06c2000c60" loc="210:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:32" alignment="I:8"><union-ref ref="0x7f06c2000440"/>
        <typename><typedef-ref name="pthread_barrier_t" ref="0x7f06c2000c60"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__int8_t" ref="0x7f06c2043bb0" loc="37:/usr/include/bits/types.h">
      <type-int cname="signed char" size="I:1" alignment="I:1">
        <typename><typedef-ref name="__int8_t" ref="0x7f06c2043bb0"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_fpos64_t" ref="0x7f06c1dbab60" loc="31:/usr/include/_G_config.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c1dba740"/>
        <typename><typedef-ref name="_G_fpos64_t" ref="0x7f06c1dbab60"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__clockid_t" ref="0x7f06c2036b00" loc="158:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__clockid_t" ref="0x7f06c2036b00"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_fast16_t" ref="0x7f06c22490d0" loc="106:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_fast16_t" ref="0x7f06c22490d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="uintmax_t" ref="0x7f06c2247910" loc="136:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uintmax_t" ref="0x7f06c2247910"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_am_addr_t" ref="0x7f06c19e0020" loc="8:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/AM.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_am_addr_t" ref="0x7f06c19e0020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__clock_t" ref="0x7f06c2039490" loc="145:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__clock_t" ref="0x7f06c2039490"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_uint16_t" ref="0x7f06c20b8740" loc="436:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1" network="nx_uint16_t">
        <typename><typedef-ref name="nx_uint16_t" ref="0x7f06c20b8740"/></typename>
      </type-int>
    </typedef>
    <typedef name="__rlim_t" ref="0x7f06c2039890" loc="146:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__rlim_t" ref="0x7f06c2039890"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_quad_t" ref="0x7f06c202fc40" loc="39:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_quad_t" ref="0x7f06c202fc40"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast32_t" ref="0x7f06c224a470" loc="94:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast32_t" ref="0x7f06c224a470"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_least16_t" ref="0x7f06c224eca0" loc="67:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int_least16_t" ref="0x7f06c224eca0"/></typename>
      </type-int>
    </typedef>
    <typedef name="useconds_t" ref="0x7f06c0dd5140" loc="256:/usr/include/unistd.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="useconds_t" ref="0x7f06c0dd5140"/></typename>
      </type-int>
    </typedef>
    <typedef name="ldiv_t" ref="0x7f06c205cb30" loc="110:/usr/include/stdlib.h">
      <type-tag size="I:16" alignment="I:8"><struct-ref ref="0x7f06c205c710"/>
        <typename><typedef-ref name="ldiv_t" ref="0x7f06c205cb30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="u_int64_t" ref="0x7f06c2026e70" loc="204:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="u_int64_t" ref="0x7f06c2026e70"/></typename>
      </type-int>
    </typedef>
    <typedef name="u_int16_t" ref="0x7f06c2026370" loc="202:/usr/include/sys/types.h">
      <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:2">
        <typename><typedef-ref name="u_int16_t" ref="0x7f06c2026370"/></typename>
      </type-int>
    </typedef>
    <typedef name="uint_least64_t" ref="0x7f06c224b840" loc="81:/usr/include/stdint.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="uint_least64_t" ref="0x7f06c224b840"/></typename>
      </type-int>
    </typedef>
    <typedef name="__int32_t" ref="0x7f06c2040bf0" loc="41:/usr/include/bits/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__int32_t" ref="0x7f06c2040bf0"/></typename>
      </type-int>
    </typedef>
    <typedef name="_G_int32_t" ref="0x7f06c1db9620" loc="54:/usr/include/_G_config.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="_G_int32_t" ref="0x7f06c1db9620"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_rwlock_t" ref="0x7f06c2003b30" loc="189:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:56" alignment="I:8"><union-ref ref="0x7f06c2003660"/>
        <typename><typedef-ref name="pthread_rwlock_t" ref="0x7f06c2003b30"/></typename>
      </type-tag>
    </typedef>
    <typedef name="double_t" ref="0x7f06c1f88a70" loc="32:/usr/include/bits/mathdef.h">
      <type-float cname="double" size="I:8" alignment="I:8">
        <typename><typedef-ref name="double_t" ref="0x7f06c1f88a70"/></typename>
      </type-float>
    </typedef>
    <typedef name="lqi_dist_t" ref="0x7f06c1010180" loc="7:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_lqi.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:16" alignment="I:8"><struct-ref name="lqi_dist" ref="0x7f06c1013920"/>
        <typename><typedef-ref name="lqi_dist_t" ref="0x7f06c1010180"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__fd_mask" ref="0x7f06c20207f0" loc="55:/usr/include/sys/select.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fd_mask" ref="0x7f06c20207f0"/></typename>
      </type-int>
    </typedef>
    <typedef name="bool" ref="0x7f06c1d1a020" loc="57:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/tos.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="bool" ref="0x7f06c1d1a020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsblkcnt64_t" ref="0x7f06c20334c0" loc="174:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsblkcnt64_t" ref="0x7f06c20334c0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_hash_t" ref="0x7f06c1bf7910" loc="63:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <documentation loc="24:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
        <short>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.</short>
        <long>&#10; Implementation of all of the SNIST primitives and utility&#10; functions.&#10;&#10; @author Hyungjune Lee&#10; @date   Oct 13 2006&#10;</long>
      </documentation>
      <type-tag size="I:488" alignment="I:8"><struct-ref name="sim_noise_hash_t" ref="0x7f06c1bf84e0"/>
        <typename><typedef-ref name="sim_noise_hash_t" ref="0x7f06c1bf7910"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__FILE" ref="0x7f06c1dbec70" loc="65:/usr/include/stdio.h">
      <type-tag size="I:216" alignment="I:8"><struct-ref name="_IO_FILE" ref="0x7f06c1dbe400"/>
        <typename><typedef-ref name="__FILE" ref="0x7f06c1dbec70"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__gnuc_va_list" ref="0x7f06c1db86d0" loc="40:/usr/lib/gcc/x86_64-redhat-linux/4.4.7/include/stdarg.h">
      <type-pointer size="I:8" alignment="I:8">
        <type-tag size="V:" alignment="V:"><struct-ref ref="0x7f06c25d0530"/></type-tag>
        <typename><typedef-ref name="__gnuc_va_list" ref="0x7f06c1db86d0"/></typename>
      </type-pointer>
    </typedef>
    <typedef name="nxle_uint8_t" ref="0x7f06c20b3a50" loc="445:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1" network="nxle_uint8_t">
        <typename><typedef-ref name="nxle_uint8_t" ref="0x7f06c20b3a50"/></typename>
      </type-int>
    </typedef>
    <typedef name="__off64_t" ref="0x7f06c203a450" loc="142:/usr/include/bits/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__off64_t" ref="0x7f06c203a450"/></typename>
      </type-int>
    </typedef>
    <typedef name="__fsfilcnt64_t" ref="0x7f06c2033d30" loc="178:/usr/include/bits/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="__fsfilcnt64_t" ref="0x7f06c2033d30"/></typename>
      </type-int>
    </typedef>
    <typedef name="int64_t" ref="0x7f06c224f4d0" loc="41:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int64_t" ref="0x7f06c224f4d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="int16_t" ref="0x7f06c25bad80" loc="38:/usr/include/stdint.h">
      <type-int cname="short" size="I:2" alignment="I:2">
        <typename><typedef-ref name="int16_t" ref="0x7f06c25bad80"/></typename>
      </type-int>
    </typedef>
    <typedef name="ulong" ref="0x7f06c2027090" loc="151:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="ulong" ref="0x7f06c2027090"/></typename>
      </type-int>
    </typedef>
    <typedef name="int_fast64_t" ref="0x7f06c224a850" loc="95:/usr/include/stdint.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="int_fast64_t" ref="0x7f06c224a850"/></typename>
      </type-int>
    </typedef>
    <typedef name="uid_t" ref="0x7f06c202cb60" loc="81:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="uid_t" ref="0x7f06c202cb60"/></typename>
      </type-int>
    </typedef>
    <typedef name="message_t" ref="0x7f06c19cb9a0" loc="19:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/types/message.h">
      <type-tag size="I:172" alignment="I:1"><nx_struct-ref name="message_t" ref="0x7f06c19cd350"/>
        <typename><typedef-ref name="message_t" ref="0x7f06c19cb9a0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="nx_uint64_t" ref="0x7f06c20b65b0" loc="438:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:1" network="nx_uint64_t">
        <typename><typedef-ref name="nx_uint64_t" ref="0x7f06c20b65b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="loff_t" ref="0x7f06c202e3e0" loc="45:/usr/include/sys/types.h">
      <type-int cname="long" size="I:8" alignment="I:8">
        <typename><typedef-ref name="loff_t" ref="0x7f06c202e3e0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__socklen_t" ref="0x7f06c2030530" loc="192:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__socklen_t" ref="0x7f06c2030530"/></typename>
      </type-int>
    </typedef>
    <typedef name="node_t" ref="0x7f06c1c6e590" loc="54:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/heap.c">
      <type-tag size="I:16" alignment="I:8"><struct-ref name="node" ref="0x7f06c1c6fd40"/>
        <typename><typedef-ref name="node_t" ref="0x7f06c1c6e590"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__uid_t" ref="0x7f06c203e8d0" loc="135:/usr/include/bits/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__uid_t" ref="0x7f06c203e8d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="nx_int8_t" ref="0x7f06c20bb2d0" loc="431:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="signed char" size="I:1" alignment="I:1" network="nx_int8_t">
        <typename><typedef-ref name="nx_int8_t" ref="0x7f06c20bb2d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="sim_noise_node_t" ref="0x7f06c1bf4c40" loc="75:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_noise.h">
      <type-tag size="I:80" alignment="I:8"><struct-ref name="sim_noise_node_t" ref="0x7f06c1bf7d60"/>
        <typename><typedef-ref name="sim_noise_node_t" ref="0x7f06c1bf4c40"/></typename>
      </type-tag>
    </typedef>
    <typedef name="id_t" ref="0x7f06c202b760" loc="105:/usr/include/sys/types.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="id_t" ref="0x7f06c202b760"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutex_t" ref="0x7f06c200d3d0" loc="104:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:40" alignment="I:8"><union-ref ref="0x7f06c200fed0"/>
        <typename><typedef-ref name="pthread_mutex_t" ref="0x7f06c200d3d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__itimer_which_t" ref="0x7f06c1c055a0" loc="122:/usr/include/sys/time.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="__itimer_which_t" ref="0x7f06c1c055a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_cond_t" ref="0x7f06c2008890" loc="130:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:48" alignment="I:8"><union-ref ref="0x7f06c20083c0"/>
        <typename><typedef-ref name="pthread_cond_t" ref="0x7f06c2008890"/></typename>
      </type-tag>
    </typedef>
    <typedef name="pthread_key_t" ref="0x7f06c20078b0" loc="140:/usr/include/bits/pthreadtypes.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:4">
        <typename><typedef-ref name="pthread_key_t" ref="0x7f06c20078b0"/></typename>
      </type-int>
    </typedef>
    <typedef name="ino_t" ref="0x7f06c202e790" loc="49:/usr/include/sys/types.h">
      <type-int cname="unsigned long" unsigned="" size="I:8" alignment="I:8">
        <typename><typedef-ref name="ino_t" ref="0x7f06c202e790"/></typename>
      </type-int>
    </typedef>
    <typedef name="daddr_t" ref="0x7f06c2029020" loc="116:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="daddr_t" ref="0x7f06c2029020"/></typename>
      </type-int>
    </typedef>
    <typedef name="__timezone_ptr_t" ref="0x7f06c1c0b540" loc="63:/usr/include/sys/time.h">
      <documentation loc="32:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/sim_mote.h">
        <short>&#10; Further edited by for multi-channel TOSSIM, each channel uses different noise traces&#10;&#10; </short>
        <long>&#10; Further edited by for multi-channel TOSSIM, each channel uses different noise traces&#10;&#10; @author Bo Li of wustl&#10; @data Mar 19, 2012&#10;</long>
      </documentation>
      <type-qualified __restrict="">
          <typename><typedef-ref name="__timezone_ptr_t" ref="0x7f06c1c0b540"/></typename>
        <type-pointer size="I:8" alignment="I:8">
          <type-tag size="I:8" alignment="I:4"><struct-ref name="timezone" ref="0x7f06c1c0c9f0"/></type-tag>
        </type-pointer>
      </type-qualified>
    </typedef>
    <typedef name="nxle_uint32_t" ref="0x7f06c20b2950" loc="447:/afs/cs.pitt.edu/usr0/wangwenchen/local/lib/ncc/nesc_nx.h">
      <type-int cname="unsigned int" unsigned="" size="I:4" alignment="I:1" network="nxle_uint32_t">
        <typename><typedef-ref name="nxle_uint32_t" ref="0x7f06c20b2950"/></typename>
      </type-int>
    </typedef>
    <typedef name="key_t" ref="0x7f06c20297a0" loc="123:/usr/include/sys/types.h">
      <type-int cname="int" size="I:4" alignment="I:4">
        <typename><typedef-ref name="key_t" ref="0x7f06c20297a0"/></typename>
      </type-int>
    </typedef>
    <typedef name="pthread_mutexattr_t" ref="0x7f06c200c020" loc="110:/usr/include/bits/pthreadtypes.h">
      <type-tag size="I:4" alignment="I:4"><union-ref ref="0x7f06c200db90"/>
        <typename><typedef-ref name="pthread_mutexattr_t" ref="0x7f06c200c020"/></typename>
      </type-tag>
    </typedef>
    <typedef name="uart_id_t" ref="0x7f06c19da5d0" loc="72:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
      <documentation loc="60:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
        <typename><typedef-ref name="uart_id_t" ref="0x7f06c19da5d0"/></typename>
      </type-int>
    </typedef>
    <typedef name="__nesc_sillytask_receiveDone_task" ref="0x7f06c156e5e0" loc="45:../pure-tdma/sim/AsyncReceiveAdapterP.nc">
      <component-ref qname="AsyncReceiveAdapterP"/>
      <type-array elements="I:0" size="I:0" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDone_task" ref="0x7f06c15590d0" loc="44:../pure-tdma/sim/AsyncSendAdapterP.nc">
      <component-ref qname="AsyncSendAdapterP"/>
      <type-array elements="I:1" size="I:4" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="logentry_t" ref="0x7f06c14e10d0" loc="105:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-tag size="I:61189" alignment="I:1"><nx_struct-ref name="logentry_t" scoped="" ref="0x7f06c14e8570"/>
        <typename><typedef-ref name="logentry_t" scoped="" ref="0x7f06c14e10d0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="time_value" ref="0x7f06c14e8230" loc="77:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/apps/wustl/upma/lib/macs/paper2_alpha/PureTDMASchedulerP.nc">
      <component-ref qname="PureTDMASchedulerP"/>
      <type-tag size="I:4" alignment="I:1"><nx_struct-ref name="time_value" scoped="" ref="0x7f06c14e9900"/>
        <typename><typedef-ref name="time_value" scoped="" ref="0x7f06c14e8230"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_syncDoneTask" ref="0x7f06c103c9d0" loc="36:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/chips/cc2420/control/sim/CC2420ControlP.nc">
      <component-ref qname="CC2420ControlP"/>
      <type-array elements="I:2" size="I:8" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="receive_message_t" ref="0x7f06c0f585f0" loc="64:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-tag size="I:72" alignment="I:8"><struct-ref name="receive_message" scoped="" ref="0x7f06c0f58180"/>
        <typename><typedef-ref name="receive_message_t" scoped="" ref="0x7f06c0f585f0"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_read_rssi_task" ref="0x7f06c1012b20" loc="653:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/lib/tossim/CpmModelC.nc">
      <component-ref qname="CpmModelC"/>
      <type-array elements="I:3" size="I:12" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_startDoneTask" ref="0x7f06c0de02a0" loc="93:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:4" size="I:16" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_stopDoneTask" ref="0x7f06c0de2250" loc="98:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:5" size="I:20" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_sendDoneTask" ref="0x7f06c0de3020" loc="143:../pure-tdma/sim/TossimPacketModelC.nc">
      <component-ref qname="TossimPacketModelC"/>
      <type-array elements="I:6" size="I:24" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="queue_entry_t" ref="0x7f06c0be7480" loc="49:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-tag size="I:8" alignment="I:8"><struct-ref scoped="" ref="0x7f06c0be7110"/>
        <typename><typedef-ref name="queue_entry_t" scoped="" ref="0x7f06c0be7480"/></typename>
      </type-tag>
    </typedef>
    <typedef name="__nesc_sillytask_errorTask" ref="0x7f06c0beede0" loc="161:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
    <typedef name="__nesc_sillytask_CancelTask" ref="0x7f06c0ba1020" loc="118:/afs/cs.pitt.edu/usr0/wangwenchen/local/src/tinyos-2.x/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueImplP"/>
      <type-array elements="U:" size="U:" alignment="I:4">
        <type-int cname="int" size="I:4" alignment="I:4"></type-int>
      </type-array>
    </typedef>
  </typedefs>
</nesc>
